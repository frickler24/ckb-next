.TH "KbProfile" 3 "Sat Jun 3 2017" "Version beta-v0.2.8+testing at branch all-mine" "ckb-next" \" -*- nroff -*-
.ad l
.nh
.SH NAME
KbProfile \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <src/ckb/kbprofile\&.h>\fP
.PP
Inherits \fBQObject\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef QList< \fBKbMode\fP * > \fBModeList\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBKbProfile\fP (\fBKb\fP *parent, const \fBKeyMap\fP &\fBkeyMap\fP, const \fBKbProfile\fP &other)"
.br
.ti -1c
.RI "\fBKbProfile\fP (\fBKb\fP *parent, const \fBKeyMap\fP &\fBkeyMap\fP, const QString &guid='', const QString &modified='')"
.br
.ti -1c
.RI "\fBKbProfile\fP (\fBKb\fP *parent, const \fBKeyMap\fP &\fBkeyMap\fP, \fBCkbSettings\fP &settings, const QString &guid)"
.br
.ti -1c
.RI "void \fBsave\fP (\fBCkbSettings\fP &settings)"
.br
.ti -1c
.RI "bool \fBneedsSave\fP () const "
.br
.ti -1c
.RI "void \fBsetNeedsSave\fP ()"
.br
.ti -1c
.RI "QString \fBname\fP () const "
.br
.ti -1c
.RI "void \fBname\fP (const QString &newName)"
.br
.ti -1c
.RI "\fBUsbId\fP & \fBid\fP ()"
.br
.ti -1c
.RI "void \fBid\fP (const \fBUsbId\fP &\fBnewId\fP)"
.br
.ti -1c
.RI "void \fBnewId\fP ()"
.br
.ti -1c
.RI "const \fBKeyMap\fP & \fBkeyMap\fP () const "
.br
.ti -1c
.RI "void \fBkeyMap\fP (const \fBKeyMap\fP &newKeyMap)"
.br
.ti -1c
.RI "const \fBModeList\fP & \fBmodes\fP () const "
.br
.ti -1c
.RI "void \fBmodes\fP (const QList< \fBKbMode\fP * > &newModes)"
.br
.ti -1c
.RI "void \fBappend\fP (\fBKbMode\fP *newMode)"
.br
.ti -1c
.RI "void \fBinsert\fP (int index, \fBKbMode\fP *newMode)"
.br
.ti -1c
.RI "void \fBremoveAll\fP (\fBKbMode\fP *mode)"
.br
.ti -1c
.RI "void \fBmove\fP (int from, int to)"
.br
.ti -1c
.RI "int \fBmodeCount\fP () const "
.br
.ti -1c
.RI "int \fBindexOf\fP (\fBKbMode\fP *mode) const "
.br
.ti -1c
.RI "\fBKbMode\fP * \fBfind\fP (const QUuid &\fBid\fP)"
.br
.ti -1c
.RI "\fBKbMode\fP * \fBcurrentMode\fP () const "
.br
.ti -1c
.RI "void \fBcurrentMode\fP (\fBKbMode\fP *newCurrentMode)"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBsetNeedsUpdate\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBKbMode\fP * \fB_currentMode\fP"
.br
.ti -1c
.RI "QString \fB_name\fP"
.br
.ti -1c
.RI "\fBUsbId\fP \fB_id\fP"
.br
.ti -1c
.RI "\fBKeyMap\fP \fB_keyMap\fP"
.br
.ti -1c
.RI "\fBModeList\fP \fB_modes\fP"
.br
.ti -1c
.RI "bool \fB_needsSave\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 11 of file kbprofile\&.h\&.
.SH "Member Typedef Documentation"
.PP 
.SS "typedef QList<\fBKbMode\fP*> \fBKbProfile::ModeList\fP"

.PP
Definition at line 41 of file kbprofile\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "KbProfile::KbProfile (\fBKb\fP *parent, const \fBKeyMap\fP &keyMap, const \fBKbProfile\fP &other)\fC [explicit]\fP"

.PP
Definition at line 4 of file kbprofile\&.cpp\&.
.PP
References _currentMode, _modes, and modes()\&.
.PP
.nf
4                                                                              :
5     QObject(parent), _currentMode(0), _name(other\&._name), _id(other\&._id), _keyMap(keyMap), _needsSave(true)
6 {
7     foreach(KbMode* mode, other\&.modes()){
8         KbMode* newMode = new KbMode(parent, keyMap, *mode);
9         if(!_currentMode || mode == other\&._currentMode)
10             _currentMode = newMode;
11         _modes\&.append(newMode);
12     }
13 }
.fi
.SS "KbProfile::KbProfile (\fBKb\fP *parent, const \fBKeyMap\fP &keyMap, const QString &guid = \fC''\fP, const QString &modified = \fC''\fP)\fC [explicit]\fP"

.PP
Definition at line 15 of file kbprofile\&.cpp\&.
.PP
References _id, and UsbId::guid\&.
.PP
.nf
15                                                                                                    :
16     QObject(parent), _currentMode(0), _id(guid, modified\&.toUInt(0, 16)), _keyMap(keyMap), _needsSave(true)
17 {
18     if(_id\&.guid\&.isNull())
19         _id\&.guid = QUuid::createUuid();
20 }
.fi
.SS "KbProfile::KbProfile (\fBKb\fP *parent, const \fBKeyMap\fP &keyMap, \fBCkbSettings\fP &settings, const QString &guid)\fC [explicit]\fP"

.PP
Definition at line 22 of file kbprofile\&.cpp\&.
.PP
References _currentMode, _id, _keyMap, _modes, _name, CkbSettings::contains(), current, UsbId::guid, UsbId::hwModified, UsbId::hwModifiedString(), KbMode::id(), UsbId::modified, UsbId::modifiedString(), and CkbSettings::value()\&.
.PP
.nf
22                                                                                                  :
23     QObject(parent), _currentMode(0), _id(guid, 0), _keyMap(keyMap), _needsSave(false)
24 {
25     // Load data from preferences
26     SGroup group(settings, guid);
27     _name = settings\&.value("Name")\&.toString()\&.trimmed();
28     if(_name == "")
29         _name = "Unnamed";
30     _id\&.modifiedString(settings\&.value("Modified")\&.toString());
31     if(settings\&.contains("HwModified"))
32         _id\&.hwModifiedString(settings\&.value("HwModified")\&.toString());
33     else
34         _id\&.hwModified = _id\&.modified;
35     QUuid current = settings\&.value("CurrentMode")\&.toString()\&.trimmed();
36     // Load modes
37     uint count = settings\&.value("ModeCount")\&.toUInt();
38     for(uint i = 0; i < count; i++){
39         SGroup group(settings, QString::number(i));
40         KbMode* mode = new KbMode(parent, _keyMap, settings);
41         _modes\&.append(mode);
42         // Set currentMode to the mode matching the current GUID, or the first mode in case it's not found
43         if(current == mode->id()\&.guid || !_currentMode)
44             _currentMode = mode;
45     }
46 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void KbProfile::append (\fBKbMode\fP *newMode)\fC [inline]\fP"

.PP
Definition at line 44 of file kbprofile\&.h\&.
.PP
References _modes, and setNeedsUpdate()\&.
.PP
Referenced by Kb::hwSave(), KbWidget::on_modesList_itemClicked(), KbProfileDialog::profileList_reordered(), Kb::readNotify(), and Kb::setCurrentProfile()\&.
.PP
.nf
44 { setNeedsUpdate(); _modes\&.append(newMode); }
.fi
.SS "\fBKbMode\fP* KbProfile::currentMode () const\fC [inline]\fP"

.PP
Definition at line 54 of file kbprofile\&.h\&.
.PP
References _currentMode\&.
.PP
Referenced by KeyAction::keyEvent(), KbBindWidget::on_copyButton_clicked(), KPerfWidget::on_copyButton_clicked(), MPerfWidget::on_copyButton_clicked(), Kb::setCurrentMode(), and Kb::setCurrentProfile()\&.
.PP
.nf
54 { return _currentMode; }
.fi
.SS "void KbProfile::currentMode (\fBKbMode\fP *newCurrentMode)\fC [inline]\fP"

.PP
Definition at line 55 of file kbprofile\&.h\&.
.PP
References _currentMode, and _needsSave\&.
.PP
.nf
55 { _needsSave = true; _currentMode = newCurrentMode; }
.fi
.SS "\fBKbMode\fP* KbProfile::find (const QUuid &id)\fC [inline]\fP"

.PP
Definition at line 51 of file kbprofile\&.h\&.
.PP
References _modes, UsbId::guid, id(), and KbMode::id()\&.
.PP
Referenced by KbWidget::modesList_reordered(), and KbWidget::on_modesList_currentItemChanged()\&.
.PP
.nf
51 { foreach(KbMode* mode, _modes) { if(mode->id()\&.guid == id) return mode; } return 0; }
.fi
.SS "\fBUsbId\fP& KbProfile::id ()\fC [inline]\fP"

.PP
Definition at line 30 of file kbprofile\&.h\&.
.PP
References _id\&.
.PP
Referenced by find(), Kb::find(), Kb::hwSave(), KbProfileDialog::on_profileList_customContextMenuRequested(), KbProfileDialog::on_profileList_itemChanged(), KbProfileDialog::on_profileList_itemClicked(), Kb::readNotify(), KbProfileDialog::repopulate(), Kb::save(), and Kb::writeProfileHeader()\&.
.PP
.nf
30 { return _id; }
.fi
.SS "void KbProfile::id (const \fBUsbId\fP &newId)\fC [inline]\fP"

.PP
Definition at line 31 of file kbprofile\&.h\&.
.PP
References _id, _needsSave, and newId()\&.
.PP
.nf
31 { _needsSave = true; _id = newId; }
.fi
.SS "int KbProfile::indexOf (\fBKbMode\fP *mode) const\fC [inline]\fP"

.PP
Definition at line 50 of file kbprofile\&.h\&.
.PP
References _modes\&.
.PP
Referenced by Kb::frameUpdate(), KeyAction::keyEvent(), KbWidget::modeChanged(), KbWidget::on_modesList_customContextMenuRequested(), and Kb::readNotify()\&.
.PP
.nf
50 { return _modes\&.indexOf(mode); }
.fi
.SS "void KbProfile::insert (intindex, \fBKbMode\fP *newMode)\fC [inline]\fP"

.PP
Definition at line 45 of file kbprofile\&.h\&.
.PP
References _modes, and setNeedsUpdate()\&.
.PP
Referenced by KbWidget::on_modesList_customContextMenuRequested()\&.
.PP
.nf
45 { setNeedsUpdate(); _modes\&.insert(index, newMode); }
.fi
.SS "const \fBKeyMap\fP& KbProfile::keyMap () const\fC [inline]\fP"

.PP
Definition at line 37 of file kbprofile\&.h\&.
.PP
References _keyMap\&.
.PP
Referenced by KPerfWidget::setPerf(), and Kb::updateLayout()\&.
.PP
.nf
37 { return _keyMap; }
.fi
.SS "void KbProfile::keyMap (const \fBKeyMap\fP &newKeyMap)"

.PP
Definition at line 85 of file kbprofile\&.cpp\&.
.PP
References _keyMap, _modes, KbMode::keyMap(), and setNeedsUpdate()\&.
.PP
.nf
85                                              {
86     _keyMap = newKeyMap;
87     foreach(KbMode* mode, _modes)
88         mode->keyMap(newKeyMap);
89     setNeedsUpdate();
90 }
.fi
.SS "int KbProfile::modeCount () const\fC [inline]\fP"

.PP
Definition at line 49 of file kbprofile\&.h\&.
.PP
References _modes\&.
.PP
Referenced by Kb::hwSave(), KeyAction::keyEvent(), KbWidget::on_modesList_customContextMenuRequested(), Kb::readNotify(), save(), and Kb::setCurrentProfile()\&.
.PP
.nf
49 { return _modes\&.count(); }
.fi
.SS "const \fBModeList\fP& KbProfile::modes () const\fC [inline]\fP"

.PP
Definition at line 42 of file kbprofile\&.h\&.
.PP
References _modes\&.
.PP
Referenced by Kb::hwSave(), KbProfile(), KeyAction::keyEvent(), KbWidget::modesList_reordered(), KbBindWidget::on_copyButton_clicked(), KPerfWidget::on_copyButton_clicked(), MPerfWidget::on_copyButton_clicked(), KbWidget::on_modesList_customContextMenuRequested(), KbWidget::profileChanged(), Kb::readNotify(), RebindWidget::setBind(), Kb::setCurrentMode(), Kb::setCurrentProfile(), and Kb::updateLayout()\&.
.PP
.nf
42 { return _modes; }
.fi
.SS "void KbProfile::modes (const QList< \fBKbMode\fP * > &newModes)\fC [inline]\fP"

.PP
Definition at line 43 of file kbprofile\&.h\&.
.PP
References _modes, and setNeedsUpdate()\&.
.PP
.nf
43 { setNeedsUpdate(); _modes = newModes; }
.fi
.SS "void KbProfile::move (intfrom, intto)\fC [inline]\fP"

.PP
Definition at line 47 of file kbprofile\&.h\&.
.PP
References _modes, and setNeedsUpdate()\&.
.PP
Referenced by Kb::readNotify()\&.
.PP
.nf
47 { setNeedsUpdate(); _modes\&.move(from, to); }
.fi
.SS "QString KbProfile::name () const\fC [inline]\fP"

.PP
Definition at line 28 of file kbprofile\&.h\&.
.PP
References _name\&.
.PP
Referenced by KbProfileDialog::on_profileList_itemChanged(), Kb::readNotify(), KbProfileDialog::repopulate(), save(), KbWidget::updateProfileList(), and Kb::writeProfileHeader()\&.
.PP
.nf
28 { return _name; }
.fi
.SS "void KbProfile::name (const QString &newName)\fC [inline]\fP"

.PP
Definition at line 29 of file kbprofile\&.h\&.
.PP
References _name, and _needsSave\&.
.PP
.nf
29 { _needsSave = true; _name = newName\&.trimmed(); if(_name == "") _name = "Unnamed"; }
.fi
.SS "bool KbProfile::needsSave () const"

.PP
Definition at line 68 of file kbprofile\&.cpp\&.
.PP
References _modes, _needsSave, and KbMode::needsSave()\&.
.PP
Referenced by Kb::needsSave()\&.
.PP
.nf
68                                 {
69     if(_needsSave)
70         return true;
71     foreach(KbMode* mode, _modes){
72         if(mode->needsSave())
73             return true;
74     }
75     return false;
76 }
.fi
.SS "void KbProfile::newId ()"

.PP
Definition at line 78 of file kbprofile\&.cpp\&.
.PP
References _id, _modes, _needsSave, and KbMode::newId()\&.
.PP
Referenced by id(), and KbProfileDialog::on_profileList_customContextMenuRequested()\&.
.PP
.nf
78                      {
79     _needsSave = true;
80     _id = UsbId();
81     foreach(KbMode* mode, _modes)
82         mode->newId();
83 }
.fi
.SS "void KbProfile::removeAll (\fBKbMode\fP *mode)\fC [inline]\fP"

.PP
Definition at line 46 of file kbprofile\&.h\&.
.PP
References _modes, and setNeedsUpdate()\&.
.PP
Referenced by KbWidget::on_modesList_customContextMenuRequested(), and KbProfileDialog::on_profileList_customContextMenuRequested()\&.
.PP
.nf
46 { setNeedsUpdate(); _modes\&.removeAll(mode); }
.fi
.SS "void KbProfile::save (\fBCkbSettings\fP &settings)"

.PP
Definition at line 48 of file kbprofile\&.cpp\&.
.PP
References _currentMode, _id, _modes, _needsSave, UsbId::guidString(), UsbId::hwModifiedString(), KbMode::id(), modeCount(), UsbId::modifiedString(), name(), UsbId::newModified(), KbMode::save(), and CkbSettings::setValue()\&.
.PP
Referenced by Kb::save()\&.
.PP
.nf
48                                          {
49     _needsSave = false;
50     _id\&.newModified();
51     // Save data to preferences
52     SGroup group(settings, id()\&.guidString());
53     settings\&.setValue("Name", name());
54     settings\&.setValue("Modified", _id\&.modifiedString());
55     settings\&.setValue("HwModified", _id\&.hwModifiedString());
56     if(_currentMode)
57         settings\&.setValue("CurrentMode", _currentMode->id()\&.guidString());
58     // Save modes
59     uint count = modeCount();
60     settings\&.setValue("ModeCount", count);
61     for(uint i = 0; i < count; i++){
62         SGroup group(settings, QString::number(i));
63         KbMode* mode = _modes\&.at(i);
64         mode->save(settings);
65     }
66 }
.fi
.SS "void KbProfile::setNeedsSave ()\fC [inline]\fP"

.PP
Definition at line 25 of file kbprofile\&.h\&.
.PP
References _needsSave\&.
.PP
Referenced by Kb::hwSave(), Kb::readNotify(), and setNeedsUpdate()\&.
.PP
.nf
25 { _needsSave = true; }
.fi
.SS "void KbProfile::setNeedsUpdate ()\fC [inline]\fP, \fC [private]\fP"

.PP
Definition at line 66 of file kbprofile\&.h\&.
.PP
References _modes, setNeedsSave(), and KbMode::setNeedsUpdate()\&.
.PP
Referenced by append(), insert(), keyMap(), modes(), move(), and removeAll()\&.
.PP
.nf
66 { setNeedsSave(); foreach(KbMode* mode, _modes){ mode->setNeedsUpdate(); } }
.fi
.SH "Field Documentation"
.PP 
.SS "\fBKbMode\fP* KbProfile::_currentMode\fC [private]\fP"

.PP
Definition at line 58 of file kbprofile\&.h\&.
.PP
Referenced by currentMode(), KbProfile(), and save()\&.
.SS "\fBUsbId\fP KbProfile::_id\fC [private]\fP"

.PP
Definition at line 60 of file kbprofile\&.h\&.
.PP
Referenced by id(), KbProfile(), newId(), and save()\&.
.SS "\fBKeyMap\fP KbProfile::_keyMap\fC [private]\fP"

.PP
Definition at line 61 of file kbprofile\&.h\&.
.PP
Referenced by KbProfile(), and keyMap()\&.
.SS "\fBModeList\fP KbProfile::_modes\fC [private]\fP"

.PP
Definition at line 62 of file kbprofile\&.h\&.
.PP
Referenced by append(), find(), indexOf(), insert(), KbProfile(), keyMap(), modeCount(), modes(), move(), needsSave(), newId(), removeAll(), save(), and setNeedsUpdate()\&.
.SS "QString KbProfile::_name\fC [private]\fP"

.PP
Definition at line 59 of file kbprofile\&.h\&.
.PP
Referenced by KbProfile(), and name()\&.
.SS "bool KbProfile::_needsSave\fC [private]\fP"

.PP
Definition at line 63 of file kbprofile\&.h\&.
.PP
Referenced by currentMode(), id(), name(), needsSave(), newId(), save(), and setNeedsSave()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for ckb-next from the source code\&.
