.TH "KbLightWidget" 3 "Tue Jun 6 2017" "Version beta-v0.2.8+testing at branch all-mine" "ckb-next" \" -*- nroff -*-
.ad l
.nh
.SH NAME
KbLightWidget \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <src/ckb/kblightwidget\&.h>\fP
.PP
Inherits \fBQWidget\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBKbLightWidget\fP (\fBQWidget\fP *parent=0)"
.br
.ti -1c
.RI "\fB~KbLightWidget\fP ()"
.br
.ti -1c
.RI "void \fBsetLight\fP (\fBKbLight\fP *newLight)"
.br
.ti -1c
.RI "void \fBsetMonochrome\fP ()"
.br
.in -1c
.SS "Private Slots"

.in +1c
.ti -1c
.RI "void \fBupdateLight\fP ()"
.br
.ti -1c
.RI "void \fBnewSelection\fP (QStringList selection)"
.br
.ti -1c
.RI "void \fBchangeColor\fP (QColor newColor)"
.br
.ti -1c
.RI "void \fBchangeAnim\fP (\fBKbAnim\fP *newAnim)"
.br
.ti -1c
.RI "void \fBchangeAnimKeys\fP (QStringList keys)"
.br
.ti -1c
.RI "void \fBon_brightnessBox_activated\fP (int index)"
.br
.ti -1c
.RI "void \fBon_animButton_clicked\fP ()"
.br
.ti -1c
.RI "void \fBon_bgButton_clicked\fP ()"
.br
.ti -1c
.RI "void \fBon_showAnimBox_clicked\fP (bool checked)"
.br
.ti -1c
.RI "void \fBtoggleSidelight\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBKbLight\fP * \fBlight\fP"
.br
.ti -1c
.RI "QStringList \fBcurrentSelection\fP"
.br
.ti -1c
.RI "\fBUi::KbLightWidget\fP * \fBui\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 15 of file kblightwidget\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "KbLightWidget::KbLightWidget (\fBQWidget\fP *parent = \fC0\fP)\fC [explicit]\fP"

.PP
Definition at line 6 of file kblightwidget\&.cpp\&.
.PP
References Ui_KbLightWidget::animButton, Ui_KbLightWidget::animWidget, Ui_KbLightWidget::bgButton, changeAnim(), changeAnimKeys(), changeColor(), AnimScript::count(), CkbSettings::get(), Ui_KbLightWidget::keyWidget, newSelection(), Ui_KbLightWidget::setupUi(), Ui_KbLightWidget::showAnimBox, toggleSidelight(), and ui\&.
.PP
.nf
6                                             :
7     QWidget(parent), light(0),
8     ui(new Ui::KbLightWidget)
9 {
10     ui->setupUi(this);
11     if(AnimScript::count() == 0)
12         ui->animButton->setVisible(false);
13 
14     connect(ui->bgButton, SIGNAL(colorChanged(QColor)), this, SLOT(changeColor(QColor)));
15     connect(ui->keyWidget, SIGNAL(selectionChanged(QStringList)), this, SLOT(newSelection(QStringList)));
16     connect(ui->keyWidget, SIGNAL(sidelightToggled()), this, SLOT(toggleSidelight())); // click on a toggle button, like sidelight
17     connect(ui->animWidget, SIGNAL(animChanged(KbAnim*)), this, SLOT(changeAnim(KbAnim*)));
18     connect(ui->animWidget, SIGNAL(didUpdateSelection(QStringList)), this, SLOT(changeAnimKeys(QStringList)));
19 
20     // Restore "show animated" setting
21     ui->showAnimBox->setChecked(!CkbSettings::get("UI/Light/ShowBaseOnly")\&.toBool());
22 }
.fi
.SS "KbLightWidget::~KbLightWidget ()"

.PP
Definition at line 24 of file kblightwidget\&.cpp\&.
.PP
References ui\&.
.PP
.nf
24                              {
25     delete ui;
26 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void KbLightWidget::changeAnim (\fBKbAnim\fP *newAnim)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 121 of file kblightwidget\&.cpp\&.
.PP
References KeyWidget::clearSelection(), KbAnim::keys(), Ui_KbLightWidget::keyWidget, KeyWidget::setAnimationToSelection(), KeyWidget::setSelection(), and ui\&.
.PP
Referenced by KbLightWidget()\&.
.PP
.nf
121                                              {
122     if(newAnim)
123         ui->keyWidget->setSelection(newAnim->keys());
124     else
125         ui->keyWidget->clearSelection();
126     ui->keyWidget->setAnimationToSelection();
127 }
.fi
.SS "void KbLightWidget::changeAnimKeys (QStringListkeys)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 129 of file kblightwidget\&.cpp\&.
.PP
References Ui_KbLightWidget::keyWidget, KeyWidget::setAnimation(), and ui\&.
.PP
Referenced by KbLightWidget()\&.
.PP
.nf
129                                                   {
130     ui->keyWidget->setAnimation(keys);
131 }
.fi
.SS "void KbLightWidget::changeColor (QColornewColor)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 99 of file kblightwidget\&.cpp\&.
.PP
References KbLight::color(), KeyWidget::colorMap(), KbLight::colorMap(), currentSelection, Ui_KbLightWidget::keyWidget, light, and ui\&.
.PP
Referenced by KbLightWidget()\&.
.PP
.nf
99                                               {
100     if(light){
101         foreach(QString key, currentSelection)
102             light->color(key, newColor);
103         ui->keyWidget->colorMap(light->colorMap());
104     }
105 }
.fi
.SS "void KbLightWidget::newSelection (QStringListselection)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 72 of file kblightwidget\&.cpp\&.
.PP
References Ui_KbLightWidget::animWidget, Ui_KbLightWidget::bgButton, ColorButton::color(), KbLight::colorMap(), currentSelection, KeyMap::isMouse(), light, KbLight::map(), Ui_KbLightWidget::selLabel, KbAnimWidget::setSelectedKeys(), and ui\&.
.PP
Referenced by KbLightWidget()\&.
.PP
.nf
72                                                      {
73     // Determine selected color (invalid color if no selection or if they're not all the same)
74     QColor selectedColor;
75     const QColorMap& colorMap = light->colorMap();
76     foreach(const QString& key, selection){
77         QColor color = colorMap\&.value(key);
78         if(!selectedColor\&.isValid())
79             selectedColor = color;
80         else if(color != selectedColor){
81             selectedColor = QColor();
82             break;
83         }
84     }
85 
86     currentSelection = selection;
87     ui->animWidget->setSelectedKeys(selection);
88     ui->bgButton->color(selectedColor);
89     int count = selection\&.count();
90     if(count == 0){
91         ui->selLabel->setText("Click to select");
92         return;
93     } else if(count == 1)
94         ui->selLabel->setText(tr("1 %1 selected")\&.arg(light->map()\&.isMouse() ? "zone" : "key"));
95     else
96         ui->selLabel->setText(tr("%1 %2 selected")\&.arg(count)\&.arg(light->map()\&.isMouse() ? "zones" : "keys"));
97 }
.fi
.SS "void KbLightWidget::on_animButton_clicked ()\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 143 of file kblightwidget\&.cpp\&.
.PP
References KbAnimWidget::addAnim(), Ui_KbLightWidget::animWidget, AnimAddDialog::chosenPreset(), AnimAddDialog::chosenScript(), AnimScript::count(), currentSelection, Ui_KbLightWidget::keyWidget, light, AnimScript::preset(), AnimScript::presets(), KbLight::restartAnimation(), KeyWidget::selectAll(), and ui\&.
.PP
.nf
143                                          {
144     if(AnimScript::count() == 0)
145         return;
146     if(currentSelection\&.isEmpty())
147         ui->keyWidget->selectAll();
148     AnimAddDialog dialog(this, light, currentSelection);
149     dialog\&.exec();
150     if(dialog\&.result() != QDialog::Accepted)
151         return;
152     const AnimScript* script = dialog\&.chosenScript();
153     int presetId = dialog\&.chosenPreset();
154     ui->animWidget->addAnim(script, currentSelection, script->presets()[presetId], script->preset(presetId));
155     light->restartAnimation();
156 }
.fi
.SS "void KbLightWidget::on_bgButton_clicked ()\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 138 of file kblightwidget\&.cpp\&.
.PP
References currentSelection, Ui_KbLightWidget::keyWidget, KeyWidget::selectAll(), and ui\&.
.PP
.nf
138                                        {
139     if(currentSelection\&.isEmpty())
140         ui->keyWidget->selectAll();
141 }
.fi
.SS "void KbLightWidget::on_brightnessBox_activated (intindex)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 133 of file kblightwidget\&.cpp\&.
.PP
References KbLight::dimming(), and light\&.
.PP
.nf
133                                                        {
134     if(light)
135         light->dimming(index);
136 }
.fi
.SS "void KbLightWidget::on_showAnimBox_clicked (boolchecked)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 52 of file kblightwidget\&.cpp\&.
.PP
References KeyWidget::displayColorMap(), Ui_KbLightWidget::keyWidget, light, CkbSettings::set(), and ui\&.
.PP
Referenced by setLight()\&.
.PP
.nf
52                                                       {
53     // FIXME: set globally if there's more than one KbLightWidget active
54     // Connect/disconnect animation slot
55     if(checked){
56         if(light)
57             connect(light, SIGNAL(frameDisplayed(const ColorMap&,const QSet<QString>&)), ui->keyWidget, SLOT(displayColorMap(const ColorMap&,const QSet<QString>&)));
58     } else {
59         if(light)
60             disconnect(light, SIGNAL(frameDisplayed(const ColorMap&,const QSet<QString>&)), ui->keyWidget, SLOT(displayColorMap(const ColorMap&,const QSet<QString>&)));
61         ui->keyWidget->displayColorMap(ColorMap());
62     }
63     CkbSettings::set("UI/Light/ShowBaseOnly", !checked);
64 }
.fi
.SS "void KbLightWidget::setLight (\fBKbLight\fP *newLight)"

.PP
Definition at line 28 of file kblightwidget\&.cpp\&.
.PP
References Ui_KbLightWidget::animWidget, KeyWidget::clearAnimation(), KbAnimWidget::clearSelection(), KeyWidget::clearSelection(), Ui_KbLightWidget::keyWidget, light, on_showAnimBox_clicked(), KeyWidget::setAnimation(), KbAnimWidget::setLight(), Ui_KbLightWidget::showAnimBox, ui, and updateLight()\&.
.PP
Referenced by KbWidget::modeChanged()\&.
.PP
.nf
28                                              {
29     ui->keyWidget->clearSelection();
30     ui->keyWidget->clearAnimation();
31     ui->animWidget->clearSelection();
32     if(light == newLight)
33         return;
34     if(light){
35         disconnect(light, SIGNAL(updated()), this, SLOT(updateLight()));
36         // Disabled animated colors for previous light
37         on_showAnimBox_clicked(false);
38     }
39     connect(newLight, SIGNAL(updated()), this, SLOT(updateLight()));
40     light = newLight;
41     updateLight();
42     ui->keyWidget->setAnimation(QStringList());
43     ui->animWidget->setLight(newLight);
44     if(ui->showAnimBox->isChecked())
45         on_showAnimBox_clicked(true);
46 }
.fi
.SS "void KbLightWidget::setMonochrome ()"

.PP
Definition at line 48 of file kblightwidget\&.cpp\&.
.PP
References Ui_KbLightWidget::keyWidget, KeyWidget::monochrome(), and ui\&.
.PP
Referenced by KbWidget::KbWidget()\&.
.PP
.nf
48                                  {
49     ui->keyWidget->monochrome(true);
50 }
.fi
.SS "void KbLightWidget::toggleSidelight ()\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 107 of file kblightwidget\&.cpp\&.
.PP
References KbLight::color(), KeyWidget::colorMap(), KbLight::colorMap(), Ui_KbLightWidget::keyWidget, light, and ui\&.
.PP
Referenced by KbLightWidget()\&.
.PP
.nf
107                                    {
108     if(light){
109         if (light->colorMap()["lsidel"] == 0xFF000000){
110                 light->color("lsidel",QRgb(0xFFFFFFFF));
111                 light->color("rsidel",QRgb(0xFFFFFFFF));
112         } else {
113                 light->color("lsidel", QRgb(0xFF000000));
114                 light->color("rsidel", QRgb(0xFF000000));
115         }
116         ui->keyWidget->colorMap(light->colorMap());
117     }
118 }
.fi
.SS "void KbLightWidget::updateLight ()\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 66 of file kblightwidget\&.cpp\&.
.PP
References Ui_KbLightWidget::brightnessBox, KeyWidget::colorMap(), KbLight::colorMap(), KbLight::dimming(), Ui_KbLightWidget::keyWidget, light, KeyWidget::map(), KbLight::map(), and ui\&.
.PP
Referenced by setLight()\&.
.PP
.nf
66                                {
67     ui->keyWidget->map(light->map());
68     ui->keyWidget->colorMap(light->colorMap());
69     ui->brightnessBox->setCurrentIndex(light->dimming());
70 }
.fi
.SH "Field Documentation"
.PP 
.SS "QStringList KbLightWidget::currentSelection\fC [private]\fP"

.PP
Definition at line 44 of file kblightwidget\&.h\&.
.PP
Referenced by changeColor(), newSelection(), on_animButton_clicked(), and on_bgButton_clicked()\&.
.SS "\fBKbLight\fP* KbLightWidget::light\fC [private]\fP"

.PP
Definition at line 43 of file kblightwidget\&.h\&.
.PP
Referenced by changeColor(), newSelection(), on_animButton_clicked(), on_brightnessBox_activated(), on_showAnimBox_clicked(), setLight(), toggleSidelight(), and updateLight()\&.
.SS "\fBUi::KbLightWidget\fP* KbLightWidget::ui\fC [private]\fP"

.PP
Definition at line 46 of file kblightwidget\&.h\&.
.PP
Referenced by changeAnim(), changeAnimKeys(), changeColor(), KbLightWidget(), newSelection(), on_animButton_clicked(), on_bgButton_clicked(), on_showAnimBox_clicked(), setLight(), setMonochrome(), toggleSidelight(), updateLight(), and ~KbLightWidget()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for ckb-next from the source code\&.
