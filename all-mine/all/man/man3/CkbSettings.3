.TH "CkbSettings" 3 "Tue Jun 6 2017" "Version beta-v0.2.8+testing at branch all-mine" "ckb-next" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CkbSettings \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <src/ckb/ckbsettings\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCkbSettings\fP ()"
.br
.ti -1c
.RI "\fBCkbSettings\fP (const QString &basePath, bool eraseExisting=false)"
.br
.ti -1c
.RI "\fBCkbSettings\fP (QSettings &settings)"
.br
.ti -1c
.RI "\fB~CkbSettings\fP ()"
.br
.ti -1c
.RI "void \fBbeginGroup\fP (const QString &prefix)"
.br
.ti -1c
.RI "void \fBendGroup\fP ()"
.br
.ti -1c
.RI "QStringList \fBchildGroups\fP () const "
.br
.ti -1c
.RI "QStringList \fBchildKeys\fP () const "
.br
.ti -1c
.RI "bool \fBcontains\fP (const QString &\fBkey\fP) const "
.br
.ti -1c
.RI "bool \fBcontainsGroup\fP (const QString &group)"
.br
.ti -1c
.RI "QVariant \fBvalue\fP (const QString &\fBkey\fP, const QVariant &defaultValue=QVariant()) const "
.br
.ti -1c
.RI "void \fBsetValue\fP (const QString &\fBkey\fP, const QVariant &\fBvalue\fP)"
.br
.ti -1c
.RI "void \fBremove\fP (const QString &\fBkey\fP)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static QVariant \fBget\fP (const QString &\fBkey\fP, const QVariant &defaultValue=QVariant())"
.br
.ti -1c
.RI "static void \fBset\fP (const QString &\fBkey\fP, const QVariant &\fBvalue\fP)"
.br
.ti -1c
.RI "static bool \fBisBusy\fP ()"
.br
.ti -1c
.RI "static void \fBcleanUp\fP ()"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "QString \fBpwd\fP () const "
.br
.ti -1c
.RI "QString \fBpwd\fP (const QString &\fBkey\fP) const "
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "QSettings * \fBbacking\fP"
.br
.ti -1c
.RI "QStringList \fBgroups\fP"
.br
.ti -1c
.RI "QStringList \fBremoveCache\fP"
.br
.ti -1c
.RI "QMap< QString, QVariant > \fBwriteCache\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 11 of file ckbsettings\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "CkbSettings::CkbSettings ()"

.PP
Definition at line 61 of file ckbsettings\&.cpp\&.
.PP
.nf
61                          :
62     backing(globalSettings()) {
63 }
.fi
.SS "CkbSettings::CkbSettings (const QString &basePath, booleraseExisting = \fCfalse\fP)"

.PP
Definition at line 65 of file ckbsettings\&.cpp\&.
.PP
References beginGroup()\&.
.PP
.nf
65                                                                     :
66     backing(globalSettings()) {
67     if(basePath\&.isEmpty()){
68         if(eraseExisting)
69             qDebug() << "CkbSettings created with basePath = \"\" and eraseExisting = true\&. This is a mistake\&.";
70         return;
71     }
72     if(eraseExisting)
73         remove(basePath);
74     beginGroup(basePath);
75 }
.fi
.SS "CkbSettings::CkbSettings (QSettings &settings)"

.PP
Definition at line 77 of file ckbsettings\&.cpp\&.
.PP
.nf
77                                             :
78     backing(&settings) {
79 }
.fi
.SS "CkbSettings::~CkbSettings ()"

.PP
Definition at line 145 of file ckbsettings\&.cpp\&.
.PP
References backing, removeCache, and writeCache\&.
.PP
.nf
145                          {
146     if(removeCache\&.isEmpty() && writeCache\&.isEmpty())
147         return;
148     // Save the settings from the settings thread\&.
149     // They have to be saved from that thread specifically to avoid performance issues
150     CkbSettingsWriter* writer = new CkbSettingsWriter(backing, removeCache, writeCache);
151     writer->moveToThread(globalThread);
152     QObject::staticMetaObject\&.invokeMethod(writer, "run", Qt::QueuedConnection);
153 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void CkbSettings::beginGroup (const QString &prefix)"

.PP
Definition at line 81 of file ckbsettings\&.cpp\&.
.PP
References groups\&.
.PP
Referenced by CkbSettings(), KbAnim::save(), and SGroup::SGroup()\&.
.PP
.nf
81                                                  {
82     groups\&.append(prefix);
83 }
.fi
.SS "QStringList CkbSettings::childGroups () const"

.PP
Definition at line 89 of file ckbsettings\&.cpp\&.
.PP
References backing, current, lockMutex, and pwd()\&.
.PP
Referenced by containsGroup(), and GradientDialog::GradientDialog()\&.
.PP
.nf
89                                            {
90     QString current = pwd();
91     lockMutex;
92     if(!current\&.isEmpty())
93         backing->beginGroup(current);
94     QStringList res = backing->childGroups();
95     if(!current\&.isEmpty())
96         backing->endGroup();
97     return res;
98 }
.fi
.SS "QStringList CkbSettings::childKeys () const"

.PP
Definition at line 100 of file ckbsettings\&.cpp\&.
.PP
References backing, current, lockMutex, and pwd()\&.
.PP
Referenced by GradientDialog::GradientDialog(), KbAnim::KbAnim(), KbBind::load(), KbLight::load(), and KbBind::loadGlobalRemap()\&.
.PP
.nf
100                                          {
101     QString current = pwd();
102     lockMutex;
103     if(!current\&.isEmpty())
104         backing->beginGroup(current);
105     QStringList res = backing->childKeys();
106     if(!current\&.isEmpty())
107         backing->endGroup();
108     return res;
109 }
.fi
.SS "void CkbSettings::cleanUp ()\fC [static]\fP"

.PP
Definition at line 46 of file ckbsettings\&.cpp\&.
.PP
References _globalSettings, cacheWritesInProgress(), and globalThread\&.
.PP
Referenced by MainWindow::cleanup()\&.
.PP
.nf
46                          {
47     if(!_globalSettings)
48         return;
49     // Wait for all writers to finish
50     while(cacheWritesInProgress\&.load() > 0)
51         QThread::yieldCurrentThread();
52     // Stop thread and delete objects
53     globalThread->quit();
54     globalThread->wait();
55     delete globalThread;
56     delete _globalSettings;
57     globalThread = 0;
58     _globalSettings = 0;
59 }
.fi
.SS "bool CkbSettings::contains (const QString &key) const"

.PP
Definition at line 111 of file ckbsettings\&.cpp\&.
.PP
References backing, lockMutex, and pwd()\&.
.PP
Referenced by KbMode::KbMode(), KbProfile::KbProfile(), and KbPerf::load()\&.
.PP
.nf
111                                                    {
112     lockMutex;
113     return backing->contains(pwd(key));
114 }
.fi
.SS "bool CkbSettings::containsGroup (const QString &group)"

.PP
Definition at line 116 of file ckbsettings\&.cpp\&.
.PP
References childGroups()\&.
.PP
Referenced by KbPerf::load()\&.
.PP
.nf
116                                                    {
117     QStringList components = group\&.split("/");
118     if(components\&.length() > 1){
119         // Find sub-group
120         SGroup group(*this, components[0]);
121         return containsGroup(QStringList(components\&.mid(1))\&.join('/'));
122     }
123     return childGroups()\&.contains(group);
124 }
.fi
.SS "void CkbSettings::endGroup ()"

.PP
Definition at line 85 of file ckbsettings\&.cpp\&.
.PP
References groups\&.
.PP
Referenced by KbAnim::save(), and SGroup::~SGroup()\&.
.PP
.nf
85                           {
86     groups\&.removeLast();
87 }
.fi
.SS "QVariant CkbSettings::get (const QString &key, const QVariant &defaultValue = \fCQVariant()\fP)\fC [static]\fP"

.PP
Definition at line 155 of file ckbsettings\&.cpp\&.
.PP
References globalCache, globalSettings(), lockMutexCache, and lockMutexStatic2\&.
.PP
Referenced by MainWindow::closeEvent(), KbLightWidget::KbLightWidget(), MainWindow::MainWindow(), AutoRun::once(), and MainWindow::timerTick()\&.
.PP
.nf
155                                                                          {
156     // Store these settings in a memory cache
157     lockMutexCache;
158     if(globalCache\&.contains(key))
159         return globalCache\&.value(key);
160     // If it wasn't found in the memory cache, look for it in QSettings
161     lockMutexStatic2;
162     QSettings* settings = globalSettings();
163     return globalCache[key] = settings->value(key, defaultValue);
164 }
.fi
.SS "bool CkbSettings::isBusy ()\fC [static]\fP"

.PP
Definition at line 42 of file ckbsettings\&.cpp\&.
.PP
References cacheWritesInProgress()\&.
.PP
Referenced by Kb::autoSave(), and ExtraSettingsWidget::pollUpdates()\&.
.PP
.nf
42                         {
43     return cacheWritesInProgress\&.load() > 0;
44 }
.fi
.SS "QString CkbSettings::pwd () const\fC [inline]\fP, \fC [private]\fP"

.PP
Definition at line 51 of file ckbsettings\&.h\&.
.PP
References groups\&.
.PP
Referenced by childGroups(), childKeys(), contains(), remove(), setValue(), and value()\&.
.PP
.nf
51 { return groups\&.join("/"); }
.fi
.SS "QString CkbSettings::pwd (const QString &key) const\fC [inline]\fP, \fC [private]\fP"

.PP
Definition at line 52 of file ckbsettings\&.h\&.
.PP
References groups, and pwd()\&.
.PP
Referenced by pwd()\&.
.PP
.nf
52 { return pwd() + (groups\&.isEmpty() ? "" : "/") + key; }
.fi
.SS "void CkbSettings::remove (const QString &key)"

.PP
Definition at line 141 of file ckbsettings\&.cpp\&.
.PP
References pwd(), and removeCache\&.
.PP
Referenced by SettingsWidget::SettingsWidget()\&.
.PP
.nf
141                                           {
142     removeCache\&.append(pwd(key));
143 }
.fi
.SS "void CkbSettings::set (const QString &key, const QVariant &value)\fC [static]\fP"

.PP
Definition at line 166 of file ckbsettings\&.cpp\&.
.PP
References globalCache, globalSettings(), lockMutexCache, lockMutexStatic, and value()\&.
.PP
Referenced by MainWindow::closeEvent(), AutoRun::enable(), AutoRun::isEnabled(), SettingsWidget::on_autoFWBox_clicked(), ExtraSettingsWidget::on_delayBox_clicked(), ExtraSettingsWidget::on_ditherBox_clicked(), SettingsWidget::on_layoutBox_activated(), ExtraSettingsWidget::on_mAccelBox_clicked(), ExtraSettingsWidget::on_sAccelBox_clicked(), KbLightWidget::on_showAnimBox_clicked(), ExtraSettingsWidget::on_sSpeedBox_valueChanged(), ExtraSettingsWidget::on_trayBox_clicked(), MPerfWidget::on_xyBox_clicked(), and ExtraSettingsWidget::pollUpdates()\&.
.PP
.nf
166                                                               {
167     {
168         lockMutexCache;
169         if(globalCache\&.value(key) == value)
170             return;
171         globalCache[key] = value;
172     }
173     lockMutexStatic;
174     globalSettings()->setValue(key, value);
175 }
.fi
.SS "void CkbSettings::setValue (const QString &key, const QVariant &value)"

.PP
Definition at line 131 of file ckbsettings\&.cpp\&.
.PP
References globalCache, lockMutexCache, pwd(), value(), and writeCache\&.
.PP
Referenced by ExtraSettingsWidget::on_fpsBox_valueChanged(), KbProfile::save(), KbPerf::save(), KbAnim::save(), KbBind::save(), KbMode::save(), KbLight::save(), Kb::save(), KbBind::saveGlobalRemap(), SettingsWidget::SettingsWidget(), and GradientDialog::~GradientDialog()\&.
.PP
.nf
131                                                                    {
132     // Cache the write values, save them when the object is destroyed
133     QString realKey = pwd(key);
134     writeCache[realKey] = value;
135     // Update global cache if needed
136     lockMutexCache;
137     if(globalCache\&.contains(realKey))
138         globalCache[realKey] = value;
139 }
.fi
.SS "QVariant CkbSettings::value (const QString &key, const QVariant &defaultValue = \fCQVariant()\fP) const"

.PP
Definition at line 126 of file ckbsettings\&.cpp\&.
.PP
References backing, lockMutex, and pwd()\&.
.PP
Referenced by ExtraSettingsWidget::ExtraSettingsWidget(), GradientDialog::GradientDialog(), KbAnim::KbAnim(), KbMode::KbMode(), KbProfile::KbProfile(), KbPerf::load(), KbBind::load(), KbLight::load(), Kb::load(), KbBind::loadGlobalRemap(), set(), SettingsWidget::SettingsWidget(), and setValue()\&.
.PP
.nf
126                                                                                   {
127     lockMutex;
128     return backing->value(pwd(key), defaultValue);
129 }
.fi
.SH "Field Documentation"
.PP 
.SS "QSettings* CkbSettings::backing\fC [private]\fP"

.PP
Definition at line 46 of file ckbsettings\&.h\&.
.PP
Referenced by childGroups(), childKeys(), contains(), value(), and ~CkbSettings()\&.
.SS "QStringList CkbSettings::groups\fC [private]\fP"

.PP
Definition at line 47 of file ckbsettings\&.h\&.
.PP
Referenced by beginGroup(), endGroup(), and pwd()\&.
.SS "QStringList CkbSettings::removeCache\fC [private]\fP"

.PP
Definition at line 48 of file ckbsettings\&.h\&.
.PP
Referenced by remove(), and ~CkbSettings()\&.
.SS "QMap<QString, QVariant> CkbSettings::writeCache\fC [private]\fP"

.PP
Definition at line 49 of file ckbsettings\&.h\&.
.PP
Referenced by setValue(), and ~CkbSettings()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for ckb-next from the source code\&.
