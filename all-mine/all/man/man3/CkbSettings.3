.TH "CkbSettings" 3 "Sat May 27 2017" "Version v0.2.8 at branch all-mine" "ckb-next" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CkbSettings \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <src/ckb/ckbsettings\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCkbSettings\fP ()"
.br
.ti -1c
.RI "\fBCkbSettings\fP (const QString &basePath, bool eraseExisting=false)"
.br
.ti -1c
.RI "\fBCkbSettings\fP (QSettings &settings)"
.br
.ti -1c
.RI "\fB~CkbSettings\fP ()"
.br
.ti -1c
.RI "void \fBbeginGroup\fP (const QString &prefix)"
.br
.ti -1c
.RI "void \fBendGroup\fP ()"
.br
.ti -1c
.RI "QStringList \fBchildGroups\fP () const "
.br
.ti -1c
.RI "QStringList \fBchildKeys\fP () const "
.br
.ti -1c
.RI "bool \fBcontains\fP (const QString &\fBkey\fP) const "
.br
.ti -1c
.RI "bool \fBcontainsGroup\fP (const QString &group)"
.br
.ti -1c
.RI "QVariant \fBvalue\fP (const QString &\fBkey\fP, const QVariant &defaultValue=QVariant()) const "
.br
.ti -1c
.RI "void \fBsetValue\fP (const QString &\fBkey\fP, const QVariant &\fBvalue\fP)"
.br
.ti -1c
.RI "void \fBremove\fP (const QString &\fBkey\fP)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static QVariant \fBget\fP (const QString &\fBkey\fP, const QVariant &defaultValue=QVariant())"
.br
.ti -1c
.RI "static void \fBset\fP (const QString &\fBkey\fP, const QVariant &\fBvalue\fP)"
.br
.ti -1c
.RI "static bool \fBinformIfNonWritable\fP ()"
.br
.RI "\fIIf config files are writable, return false\&. Otherwise give the user a pop up and return true\&. \fP"
.ti -1c
.RI "static bool \fBisWritable\fP ()"
.br
.RI "\fISetter & getter for it\&. \fP"
.ti -1c
.RI "static void \fBsetWritable\fP (bool v)"
.br
.RI "\fI\fBCkbSettings::setWritable\fP Remember if the config files are writable (setter) \fP"
.ti -1c
.RI "static bool \fBisBusy\fP ()"
.br
.ti -1c
.RI "static void \fBcleanUp\fP ()"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "QString \fBpwd\fP () const "
.br
.ti -1c
.RI "QString \fBpwd\fP (const QString &\fBkey\fP) const "
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "QSettings * \fBbacking\fP"
.br
.ti -1c
.RI "QStringList \fBgroups\fP"
.br
.ti -1c
.RI "QStringList \fBremoveCache\fP"
.br
.ti -1c
.RI "QMap< QString, QVariant > \fBwriteCache\fP"
.br
.in -1c
.SS "Static Private Attributes"

.in +1c
.ti -1c
.RI "static bool \fB_writable\fP = false"
.br
.RI "\fIRemember, whether the Config files are writable or not\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 12 of file ckbsettings\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "CkbSettings::CkbSettings ()"

.PP
Definition at line 146 of file ckbsettings\&.cpp\&.
.PP
.nf
146                          :
147     backing(globalSettings()) {
148 }
.fi
.SS "CkbSettings::CkbSettings (const QString &basePath, booleraseExisting = \fCfalse\fP)"

.PP
Definition at line 150 of file ckbsettings\&.cpp\&.
.PP
References beginGroup()\&.
.PP
.nf
150                                                                     :
151     backing(globalSettings()) {
152     if(basePath\&.isEmpty()){
153         if(eraseExisting)
154             qDebug() << "CkbSettings created with basePath = \"\" and eraseExisting = true\&. This is a mistake\&.";
155         return;
156     }
157     if(eraseExisting)
158         remove(basePath);
159     beginGroup(basePath);
160 }
.fi
.SS "CkbSettings::CkbSettings (QSettings &settings)"

.PP
Definition at line 162 of file ckbsettings\&.cpp\&.
.PP
.nf
162                                             :
163     backing(&settings) {
164 }
.fi
.SS "CkbSettings::~CkbSettings ()"

.PP
Definition at line 230 of file ckbsettings\&.cpp\&.
.PP
References backing, removeCache, and writeCache\&.
.PP
.nf
230                          {
231     if(removeCache\&.isEmpty() && writeCache\&.isEmpty())
232         return;
233     // Save the settings from the settings thread\&.
234     // They have to be saved from that thread specifically to avoid performance issues
235     CkbSettingsWriter* writer = new CkbSettingsWriter(backing, removeCache, writeCache);
236     writer->moveToThread(globalThread);
237     QObject::staticMetaObject\&.invokeMethod(writer, "run", Qt::QueuedConnection);
238 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void CkbSettings::beginGroup (const QString &prefix)"

.PP
Definition at line 166 of file ckbsettings\&.cpp\&.
.PP
References groups\&.
.PP
Referenced by CkbSettings(), KbAnim::save(), and SGroup::SGroup()\&.
.PP
.nf
166                                                  {
167     groups\&.append(prefix);
168 }
.fi
.SS "QStringList CkbSettings::childGroups () const"

.PP
Definition at line 174 of file ckbsettings\&.cpp\&.
.PP
References backing, current, lockMutex, and pwd()\&.
.PP
Referenced by containsGroup(), and GradientDialog::GradientDialog()\&.
.PP
.nf
174                                            {
175     QString current = pwd();
176     lockMutex;
177     if(!current\&.isEmpty())
178         backing->beginGroup(current);
179     QStringList res = backing->childGroups();
180     if(!current\&.isEmpty())
181         backing->endGroup();
182     return res;
183 }
.fi
.SS "QStringList CkbSettings::childKeys () const"

.PP
Definition at line 185 of file ckbsettings\&.cpp\&.
.PP
References backing, current, lockMutex, and pwd()\&.
.PP
Referenced by GradientDialog::GradientDialog(), KbAnim::KbAnim(), KbBind::load(), KbLight::load(), and KbBind::loadGlobalRemap()\&.
.PP
.nf
185                                          {
186     QString current = pwd();
187     lockMutex;
188     if(!current\&.isEmpty())
189         backing->beginGroup(current);
190     QStringList res = backing->childKeys();
191     if(!current\&.isEmpty())
192         backing->endGroup();
193     return res;
194 }
.fi
.SS "void CkbSettings::cleanUp ()\fC [static]\fP"

.PP
Definition at line 131 of file ckbsettings\&.cpp\&.
.PP
References _globalSettings, cacheWritesInProgress(), and globalThread\&.
.PP
Referenced by MainWindow::cleanup()\&.
.PP
.nf
131                          {
132     if(!_globalSettings)
133         return;
134     // Wait for all writers to finish
135     while(cacheWritesInProgress\&.load() > 0)
136         QThread::yieldCurrentThread();
137     // Stop thread and delete objects
138     globalThread->quit();
139     globalThread->wait();
140     delete globalThread;
141     delete _globalSettings;
142     globalThread = 0;
143     _globalSettings = 0;
144 }
.fi
.SS "bool CkbSettings::contains (const QString &key) const"

.PP
Definition at line 196 of file ckbsettings\&.cpp\&.
.PP
References backing, lockMutex, and pwd()\&.
.PP
Referenced by KbMode::KbMode(), KbProfile::KbProfile(), and KbPerf::load()\&.
.PP
.nf
196                                                    {
197     lockMutex;
198     return backing->contains(pwd(key));
199 }
.fi
.SS "bool CkbSettings::containsGroup (const QString &group)"

.PP
Definition at line 201 of file ckbsettings\&.cpp\&.
.PP
References childGroups()\&.
.PP
Referenced by KbPerf::load()\&.
.PP
.nf
201                                                    {
202     QStringList components = group\&.split("/");
203     if(components\&.length() > 1){
204         // Find sub-group
205         SGroup group(*this, components[0]);
206         return containsGroup(QStringList(components\&.mid(1))\&.join('/'));
207     }
208     return childGroups()\&.contains(group);
209 }
.fi
.SS "void CkbSettings::endGroup ()"

.PP
Definition at line 170 of file ckbsettings\&.cpp\&.
.PP
References groups\&.
.PP
Referenced by KbAnim::save(), and SGroup::~SGroup()\&.
.PP
.nf
170                           {
171     groups\&.removeLast();
172 }
.fi
.SS "QVariant CkbSettings::get (const QString &key, const QVariant &defaultValue = \fCQVariant()\fP)\fC [static]\fP"

.PP
Definition at line 240 of file ckbsettings\&.cpp\&.
.PP
References globalCache, globalSettings(), lockMutexCache, and lockMutexStatic2\&.
.PP
Referenced by MainWindow::closeEvent(), KbLightWidget::KbLightWidget(), MainWindow::MainWindow(), AutoRun::once(), and MainWindow::timerTick()\&.
.PP
.nf
240                                                                          {
241     // Store these settings in a memory cache
242     lockMutexCache;
243     if(globalCache\&.contains(key))
244         return globalCache\&.value(key);
245     // If it wasn't found in the memory cache, look for it in QSettings
246     lockMutexStatic2;
247     QSettings* settings = globalSettings();
248     return globalCache[key] = settings->value(key, defaultValue);
249 }
.fi
.SS "bool CkbSettings::informIfNonWritable ()\fC [static]\fP"
CkbSettings::checkIfWritable If the local implementation of the config database is not yet writable, bring up a popup to the user to informhim about it\&. Bring up the information where he can find the info\&. 
.PP
Definition at line 112 of file ckbsettings\&.cpp\&.
.PP
References _globalSettings, and isWritable()\&.
.PP
Referenced by MainWindow::MainWindow()\&.
.PP
.nf
112                                       {
113     if (isWritable()) return false;
114     QMessageBox msgBox;
115     msgBox\&.setIcon(QMessageBox::Warning);
116     msgBox\&.setProperty("Title", "Profile is read only");
117     msgBox\&.setText("Your profile information for ckb-next is nonwritable\&.");
118     QString info = "This might happen if you did start the ckb-next program with root privileges earlier\&.\n\nOr did you copy it from somewhere?\n\nPlease have a look at\n"
119             + _globalSettings->fileName();
120     msgBox\&.setInformativeText(info);
121     msgBox\&.exec();
122     qDebug() << "Profile information for ckb-next is nonwritable\&. It is located at" << _globalSettings->fileName();
123     return true;
124 }
.fi
.SS "bool CkbSettings::isBusy ()\fC [static]\fP"

.PP
Definition at line 127 of file ckbsettings\&.cpp\&.
.PP
References cacheWritesInProgress()\&.
.PP
Referenced by Kb::autoSave(), and ExtraSettingsWidget::pollUpdates()\&.
.PP
.nf
127                         {
128     return cacheWritesInProgress\&.load() > 0;
129 }
.fi
.SS "bool CkbSettings::isWritable ()\fC [static]\fP"
\fBCkbSettings::isWritable\fP Remember if the config files are writable (boolean getter)
.PP
\fBReturns:\fP
.RS 4
the value of CkbSettings::writable 
.RE
.PP

.PP
Definition at line 98 of file ckbsettings\&.cpp\&.
.PP
References _writable\&.
.PP
Referenced by informIfNonWritable(), and main()\&.
.PP
.nf
98 { return _writable; }
.fi
.SS "QString CkbSettings::pwd () const\fC [inline]\fP, \fC [private]\fP"

.PP
Definition at line 61 of file ckbsettings\&.h\&.
.PP
References groups\&.
.PP
Referenced by childGroups(), childKeys(), contains(), remove(), setValue(), and value()\&.
.PP
.nf
61 { return groups\&.join("/"); }
.fi
.SS "QString CkbSettings::pwd (const QString &key) const\fC [inline]\fP, \fC [private]\fP"

.PP
Definition at line 62 of file ckbsettings\&.h\&.
.PP
References groups, and pwd()\&.
.PP
Referenced by pwd()\&.
.PP
.nf
62 { return pwd() + (groups\&.isEmpty() ? "" : "/") + key; }
.fi
.SS "void CkbSettings::remove (const QString &key)"

.PP
Definition at line 226 of file ckbsettings\&.cpp\&.
.PP
References pwd(), and removeCache\&.
.PP
Referenced by SettingsWidget::SettingsWidget()\&.
.PP
.nf
226                                           {
227     removeCache\&.append(pwd(key));
228 }
.fi
.SS "void CkbSettings::set (const QString &key, const QVariant &value)\fC [static]\fP"

.PP
Definition at line 251 of file ckbsettings\&.cpp\&.
.PP
References globalCache, globalSettings(), lockMutexCache, lockMutexStatic, and value()\&.
.PP
Referenced by MainWindow::closeEvent(), AutoRun::enable(), AutoRun::isEnabled(), SettingsWidget::on_autoFWBox_clicked(), ExtraSettingsWidget::on_delayBox_clicked(), ExtraSettingsWidget::on_ditherBox_clicked(), SettingsWidget::on_layoutBox_activated(), ExtraSettingsWidget::on_mAccelBox_clicked(), ExtraSettingsWidget::on_sAccelBox_clicked(), KbLightWidget::on_showAnimBox_clicked(), ExtraSettingsWidget::on_sSpeedBox_valueChanged(), ExtraSettingsWidget::on_trayBox_clicked(), MPerfWidget::on_xyBox_clicked(), and ExtraSettingsWidget::pollUpdates()\&.
.PP
.nf
251                                                               {
252     {
253         lockMutexCache;
254         if(globalCache\&.value(key) == value)
255             return;
256         globalCache[key] = value;
257     }
258     lockMutexStatic;
259     globalSettings()->setValue(key, value);
260 }
.fi
.SS "void CkbSettings::setValue (const QString &key, const QVariant &value)"

.PP
Definition at line 216 of file ckbsettings\&.cpp\&.
.PP
References globalCache, lockMutexCache, pwd(), value(), and writeCache\&.
.PP
Referenced by ExtraSettingsWidget::on_fpsBox_valueChanged(), KbProfile::save(), KbPerf::save(), KbAnim::save(), KbBind::save(), KbMode::save(), KbLight::save(), Kb::save(), KbBind::saveGlobalRemap(), SettingsWidget::SettingsWidget(), and GradientDialog::~GradientDialog()\&.
.PP
.nf
216                                                                    {
217     // Cache the write values, save them when the object is destroyed
218     QString realKey = pwd(key);
219     writeCache[realKey] = value;
220     // Update global cache if needed
221     lockMutexCache;
222     if(globalCache\&.contains(realKey))
223         globalCache[realKey] = value;
224 }
.fi
.SS "void CkbSettings::setWritable (boolv)\fC [static]\fP"

.PP
\fBParameters:\fP
.RS 4
\fIv\fP Set the value of CkbSettings::writable 
.RE
.PP

.PP
Definition at line 105 of file ckbsettings\&.cpp\&.
.PP
References _writable\&.
.PP
Referenced by globalSettings()\&.
.PP
.nf
105 { _writable = v; }
.fi
.SS "QVariant CkbSettings::value (const QString &key, const QVariant &defaultValue = \fCQVariant()\fP) const"

.PP
Definition at line 211 of file ckbsettings\&.cpp\&.
.PP
References backing, lockMutex, and pwd()\&.
.PP
Referenced by ExtraSettingsWidget::ExtraSettingsWidget(), GradientDialog::GradientDialog(), KbAnim::KbAnim(), KbMode::KbMode(), KbProfile::KbProfile(), KbPerf::load(), KbBind::load(), KbLight::load(), Kb::load(), KbBind::loadGlobalRemap(), set(), SettingsWidget::SettingsWidget(), and setValue()\&.
.PP
.nf
211                                                                                   {
212     lockMutex;
213     return backing->value(pwd(key), defaultValue);
214 }
.fi
.SH "Field Documentation"
.PP 
.SS "bool CkbSettings::_writable = false\fC [static]\fP, \fC [private]\fP"
\fBCkbSettings::_writable\fP\&. 
.PP
Definition at line 59 of file ckbsettings\&.h\&.
.PP
Referenced by isWritable(), and setWritable()\&.
.SS "QSettings* CkbSettings::backing\fC [private]\fP"

.PP
Definition at line 54 of file ckbsettings\&.h\&.
.PP
Referenced by childGroups(), childKeys(), contains(), value(), and ~CkbSettings()\&.
.SS "QStringList CkbSettings::groups\fC [private]\fP"

.PP
Definition at line 55 of file ckbsettings\&.h\&.
.PP
Referenced by beginGroup(), endGroup(), and pwd()\&.
.SS "QStringList CkbSettings::removeCache\fC [private]\fP"

.PP
Definition at line 56 of file ckbsettings\&.h\&.
.PP
Referenced by remove(), and ~CkbSettings()\&.
.SS "QMap<QString, QVariant> CkbSettings::writeCache\fC [private]\fP"

.PP
Definition at line 57 of file ckbsettings\&.h\&.
.PP
Referenced by setValue(), and ~CkbSettings()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for ckb-next from the source code\&.
