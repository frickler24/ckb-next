.TH "MPerfWidget" 3 "Mon Jun 5 2017" "Version beta-v0.2.8+testing at branch macrotime.0.2.thread" "ckb-next" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MPerfWidget \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <src/ckb/mperfwidget\&.h>\fP
.PP
Inherits \fBQWidget\fP\&.
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBDpiUi\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBMPerfWidget\fP (\fBQWidget\fP *parent=0)"
.br
.ti -1c
.RI "\fB~MPerfWidget\fP ()"
.br
.ti -1c
.RI "void \fBsetPerf\fP (\fBKbPerf\fP *newPerf, \fBKbProfile\fP *newProfile)"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static const int \fBDPI_COUNT\fP = KbPerf::DPI_COUNT"
.br
.ti -1c
.RI "static const int \fBDPI_MIN\fP = KbPerf::DPI_MIN"
.br
.ti -1c
.RI "static const int \fBDPI_MAX\fP = KbPerf::DPI_MAX"
.br
.in -1c
.SS "Private Slots"

.in +1c
.ti -1c
.RI "void \fBcolorClicked\fP (int index)"
.br
.ti -1c
.RI "void \fBcolorChanged\fP (int index)"
.br
.ti -1c
.RI "void \fBsliderXMoved\fP (int index)"
.br
.ti -1c
.RI "void \fBsliderYMoved\fP (int index)"
.br
.ti -1c
.RI "void \fBboxXChanged\fP (int index)"
.br
.ti -1c
.RI "void \fBboxYChanged\fP (int index)"
.br
.ti -1c
.RI "void \fBenableChanged\fP (int index)"
.br
.ti -1c
.RI "void \fBon_xyBox_clicked\fP (bool checked)"
.br
.ti -1c
.RI "void \fBon_indicBox_clicked\fP (bool checked)"
.br
.ti -1c
.RI "void \fBon_aSnapBox_clicked\fP (bool checked)"
.br
.ti -1c
.RI "void \fBon_lHeightBox_activated\fP (int index)"
.br
.ti -1c
.RI "void \fBon_copyButton_clicked\fP ()"
.br
.ti -1c
.RI "void \fBon_spinBox_valueChanged\fP (int arg1)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBUi::MPerfWidget\fP * \fBui\fP"
.br
.ti -1c
.RI "\fBKbPerf\fP * \fBperf\fP"
.br
.ti -1c
.RI "\fBKbProfile\fP * \fBprofile\fP"
.br
.ti -1c
.RI "\fBDpiUi\fP \fBstages\fP [\fBDPI_COUNT\fP]"
.br
.ti -1c
.RI "bool \fB_xyLink\fP"
.br
.ti -1c
.RI "bool \fBcolorLink\fP"
.br
.ti -1c
.RI "QSignalMapper \fBbuttonMapper1\fP"
.br
.ti -1c
.RI "QSignalMapper \fBbuttonMapper2\fP"
.br
.ti -1c
.RI "QSignalMapper \fBsliderXMapper\fP"
.br
.ti -1c
.RI "QSignalMapper \fBsliderYMapper\fP"
.br
.ti -1c
.RI "QSignalMapper \fBboxXMapper\fP"
.br
.ti -1c
.RI "QSignalMapper \fBboxYMapper\fP"
.br
.ti -1c
.RI "QSignalMapper \fBenableMapper\fP"
.br
.ti -1c
.RI "bool \fBisSetting\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 18 of file mperfwidget\&.h\&.
.SH "Data Structure Documentation"
.PP 
.SH "struct MPerfWidget::DpiUi"
.PP 
Definition at line 37 of file mperfwidget\&.h\&.
.PP
\fBData Fields:\fP
.RS 4
QCheckBox * \fIenableCheck\fP 
.br
.PP
\fBColorButton\fP * \fIindicator\fP 
.br
.PP
QSpinBox * \fIxBox\fP 
.br
.PP
QSlider * \fIxSlider\fP 
.br
.PP
QSpinBox * \fIyBox\fP 
.br
.PP
QSlider * \fIySlider\fP 
.br
.PP
.RE
.PP
.SH "Constructor & Destructor Documentation"
.PP 
.SS "MPerfWidget::MPerfWidget (\fBQWidget\fP *parent = \fC0\fP)\fC [explicit]\fP"

.PP
Definition at line 8 of file mperfwidget\&.cpp\&.
.PP
References _xyLink, ColorButton::allowAlpha(), ColorButton::bigIcons(), boxXChanged(), boxXMapper, boxYChanged(), boxYMapper, buttonMapper1, buttonMapper2, colorChanged(), colorClicked(), DPI_COUNT, Ui_MPerfWidget::eBox1, Ui_MPerfWidget::eBox2, Ui_MPerfWidget::eBox3, Ui_MPerfWidget::eBox4, Ui_MPerfWidget::eBox5, enableChanged(), MPerfWidget::DpiUi::enableCheck, enableMapper, Ui_MPerfWidget::iButton0, Ui_MPerfWidget::iButton1, Ui_MPerfWidget::iButton2, Ui_MPerfWidget::iButton3, Ui_MPerfWidget::iButton4, Ui_MPerfWidget::iButton5, Ui_MPerfWidget::iButtonO, MPerfWidget::DpiUi::indicator, ColorButton::setLabel(), Ui_MPerfWidget::setupUi(), sliderXMapper, sliderXMoved(), sliderYMapper, sliderYMoved(), stages, ui, MPerfWidget::DpiUi::xBox, Ui_MPerfWidget::xBox0, Ui_MPerfWidget::xBox1, Ui_MPerfWidget::xBox2, Ui_MPerfWidget::xBox3, Ui_MPerfWidget::xBox4, Ui_MPerfWidget::xBox5, MPerfWidget::DpiUi::xSlider, Ui_MPerfWidget::xSlider0, Ui_MPerfWidget::xSlider1, Ui_MPerfWidget::xSlider2, Ui_MPerfWidget::xSlider3, Ui_MPerfWidget::xSlider4, Ui_MPerfWidget::xSlider5, Ui_MPerfWidget::xyBox, MPerfWidget::DpiUi::yBox, Ui_MPerfWidget::yBox0, Ui_MPerfWidget::yBox1, Ui_MPerfWidget::yBox2, Ui_MPerfWidget::yBox3, Ui_MPerfWidget::yBox4, Ui_MPerfWidget::yBox5, MPerfWidget::DpiUi::ySlider, Ui_MPerfWidget::ySlider0, Ui_MPerfWidget::ySlider1, Ui_MPerfWidget::ySlider2, Ui_MPerfWidget::ySlider3, Ui_MPerfWidget::ySlider4, and Ui_MPerfWidget::ySlider5\&.
.PP
.nf
8                                         :
9     QWidget(parent), ui(new Ui::MPerfWidget), perf(0), profile(0), _xyLink(!CkbSettings::get(xyLinkPath)\&.toBool()), colorLink(false), isSetting(false) {
10     ui->setupUi(this);
11     ui->xyBox->setChecked(!_xyLink);
12     // Set up DPI stages
13     stages[0]\&.indicator = ui->iButton0; stages[0]\&.xSlider = ui->xSlider0; stages[0]\&.ySlider = ui->ySlider0; stages[0]\&.xBox = ui->xBox0; stages[0]\&.yBox = ui->yBox0; stages[0]\&.enableCheck = 0;
14     stages[1]\&.indicator = ui->iButton1; stages[1]\&.xSlider = ui->xSlider1; stages[1]\&.ySlider = ui->ySlider1; stages[1]\&.xBox = ui->xBox1; stages[1]\&.yBox = ui->yBox1; stages[1]\&.enableCheck = ui->eBox1;
15     stages[2]\&.indicator = ui->iButton2; stages[2]\&.xSlider = ui->xSlider2; stages[2]\&.ySlider = ui->ySlider2; stages[2]\&.xBox = ui->xBox2; stages[2]\&.yBox = ui->yBox2; stages[2]\&.enableCheck = ui->eBox2;
16     stages[3]\&.indicator = ui->iButton3; stages[3]\&.xSlider = ui->xSlider3; stages[3]\&.ySlider = ui->ySlider3; stages[3]\&.xBox = ui->xBox3; stages[3]\&.yBox = ui->yBox3; stages[3]\&.enableCheck = ui->eBox3;
17     stages[4]\&.indicator = ui->iButton4; stages[4]\&.xSlider = ui->xSlider4; stages[4]\&.ySlider = ui->ySlider4; stages[4]\&.xBox = ui->xBox4; stages[4]\&.yBox = ui->yBox4; stages[4]\&.enableCheck = ui->eBox4;
18     stages[5]\&.indicator = ui->iButton5; stages[5]\&.xSlider = ui->xSlider5; stages[5]\&.ySlider = ui->ySlider5; stages[5]\&.xBox = ui->xBox5; stages[5]\&.yBox = ui->yBox5; stages[5]\&.enableCheck = ui->eBox5;
19     ui->iButtonO->setLabel(false);
20     ui->iButtonO->bigIcons(true);
21     ui->iButtonO->allowAlpha(true);
22     for(int i = 0; i < DPI_COUNT; i++){
23         stages[i]\&.indicator->setLabel(false);
24         stages[i]\&.indicator->bigIcons(true);
25         stages[i]\&.indicator->allowAlpha(true);
26         // Map signals
27         connect(stages[i]\&.indicator, SIGNAL(clicked(bool)), &buttonMapper1, SLOT(map()));
28         connect(stages[i]\&.indicator, SIGNAL(colorChanged(QColor)), &buttonMapper2, SLOT(map()));
29         connect(stages[i]\&.xSlider, SIGNAL(valueChanged(int)), &sliderXMapper, SLOT(map()));
30         connect(stages[i]\&.ySlider, SIGNAL(valueChanged(int)), &sliderYMapper, SLOT(map()));
31         connect(stages[i]\&.xBox, SIGNAL(valueChanged(int)), &boxXMapper, SLOT(map()));
32         connect(stages[i]\&.yBox, SIGNAL(valueChanged(int)), &boxYMapper, SLOT(map()));
33         if(stages[i]\&.enableCheck)
34             // Sniper has no enable
35             connect(stages[i]\&.enableCheck, SIGNAL(stateChanged(int)), &enableMapper, SLOT(map()));
36         // Set names
37         buttonMapper1\&.setMapping(stages[i]\&.indicator, i);
38         buttonMapper2\&.setMapping(stages[i]\&.indicator, i);
39         sliderXMapper\&.setMapping(stages[i]\&.xSlider, i);
40         sliderYMapper\&.setMapping(stages[i]\&.ySlider, i);
41         boxXMapper\&.setMapping(stages[i]\&.xBox, i);
42         boxYMapper\&.setMapping(stages[i]\&.yBox, i);
43         if(stages[i]\&.enableCheck)
44             enableMapper\&.setMapping(stages[i]\&.enableCheck, i);
45     }
46     // Connect to slots
47     connect(&buttonMapper1, SIGNAL(mapped(int)), this, SLOT(colorClicked(int)));
48     connect(&buttonMapper2, SIGNAL(mapped(int)), this, SLOT(colorChanged(int)));
49     connect(&sliderXMapper, SIGNAL(mapped(int)), this, SLOT(sliderXMoved(int)));
50     connect(&sliderYMapper, SIGNAL(mapped(int)), this, SLOT(sliderYMoved(int)));
51     connect(&boxXMapper, SIGNAL(mapped(int)), this, SLOT(boxXChanged(int)));
52     connect(&boxYMapper, SIGNAL(mapped(int)), this, SLOT(boxYChanged(int)));
53     connect(&enableMapper, SIGNAL(mapped(int)), this, SLOT(enableChanged(int)));
54 }
.fi
.SS "MPerfWidget::~MPerfWidget ()"

.PP
Definition at line 56 of file mperfwidget\&.cpp\&.
.PP
References ui\&.
.PP
.nf
56                          {
57     delete ui;
58 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void MPerfWidget::boxXChanged (intindex)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 157 of file mperfwidget\&.cpp\&.
.PP
References _xyLink, KbPerf::dpi(), dpiLog(), perf, SET_END, SET_START, stages, MPerfWidget::DpiUi::xBox, MPerfWidget::DpiUi::xSlider, and MPerfWidget::DpiUi::yBox\&.
.PP
Referenced by MPerfWidget()\&.
.PP
.nf
157                                       {
158     SET_START;
159     QSpinBox* box = stages[index]\&.xBox;
160     QSlider* slider = stages[index]\&.xSlider;
161     int value = box->value();
162     slider->setValue(dpiLog(value, slider->minimum(), slider->maximum()));
163     if(_xyLink)
164         perf->dpi(index, value);
165     else
166         perf->dpi(index, QPoint(value, perf->dpi(index)\&.y()));
167     SET_END;
168     if(_xyLink)
169         stages[index]\&.yBox->setValue(value);
170 }
.fi
.SS "void MPerfWidget::boxYChanged (intindex)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 172 of file mperfwidget\&.cpp\&.
.PP
References _xyLink, KbPerf::dpi(), dpiLog(), perf, SET_END, SET_START, stages, MPerfWidget::DpiUi::xBox, MPerfWidget::DpiUi::yBox, and MPerfWidget::DpiUi::ySlider\&.
.PP
Referenced by MPerfWidget()\&.
.PP
.nf
172                                       {
173     SET_START;
174     QSpinBox* box = stages[index]\&.yBox;
175     QSlider* slider = stages[index]\&.ySlider;
176     int value = box->value();
177     slider->setValue(dpiLog(value, slider->minimum(), slider->maximum()));
178     if(_xyLink)
179         perf->dpi(index, value);
180     else
181         perf->dpi(index, QPoint(perf->dpi(index)\&.x(), value));
182     SET_END;
183     if(_xyLink)
184         stages[index]\&.xBox->setValue(value);
185 }
.fi
.SS "void MPerfWidget::colorChanged (intindex)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 86 of file mperfwidget\&.cpp\&.
.PP
References ColorButton::color(), colorLink, DPI_COUNT, KbPerf::dpiColor(), Ui_MPerfWidget::iButtonO, MPerfWidget::DpiUi::indicator, KbPerf::OTHER, perf, stages, and ui\&.
.PP
Referenced by MPerfWidget()\&.
.PP
.nf
86                                        {
87     QColor color = stages[index]\&.indicator->color();
88     if(colorLink){
89         // Alt was held down - set all
90         for(int i = 0; i < DPI_COUNT; i++){
91             stages[i]\&.indicator->color(color);
92             perf->dpiColor(i, color);
93         }
94         ui->iButtonO->color(color);
95         perf->dpiColor(KbPerf::OTHER, color);
96     } else {
97         // Set one
98         perf->dpiColor(index, color);
99     }
100     colorLink = false;
101 }
.fi
.SS "void MPerfWidget::colorClicked (intindex)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 81 of file mperfwidget\&.cpp\&.
.PP
References colorLink\&.
.PP
Referenced by MPerfWidget()\&.
.PP
.nf
81                                        {
82     // Set all colors at once if Alt is held down
83     colorLink = !!(qApp->keyboardModifiers() & Qt::AltModifier);
84 }
.fi
.SS "void MPerfWidget::enableChanged (intindex)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 187 of file mperfwidget\&.cpp\&.
.PP
References KbPerf::dpiEnabled(), perf, and stages\&.
.PP
Referenced by MPerfWidget()\&.
.PP
.nf
187                                         {
188     perf->dpiEnabled(index, stages[index]\&.enableCheck->isChecked());
189 }
.fi
.SS "void MPerfWidget::on_aSnapBox_clicked (boolchecked)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 201 of file mperfwidget\&.cpp\&.
.PP
References KbPerf::angleSnap(), and perf\&.
.PP
.nf
201                                                  {
202     perf->angleSnap(checked);
203 }
.fi
.SS "void MPerfWidget::on_copyButton_clicked ()\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 209 of file mperfwidget\&.cpp\&.
.PP
References KbProfile::currentMode(), KbProfile::modes(), perf, KbMode::perf(), profile, and ModeSelectDialog::selection()\&.
.PP
.nf
209                                        {
210     ModeSelectDialog dialog(this, profile->currentMode(), profile->modes(), "Copy performance settings to:");
211     if(dialog\&.exec() != QDialog::Accepted)
212         return;
213     QList<KbMode*> selectedModes = dialog\&.selection();
214     foreach(KbMode* mode, selectedModes){
215         *mode->perf() = *perf;
216     }
217 }
.fi
.SS "void MPerfWidget::on_indicBox_clicked (boolchecked)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 197 of file mperfwidget\&.cpp\&.
.PP
References KbPerf::dpiIndicator(), and perf\&.
.PP
.nf
197                                                  {
198     perf->dpiIndicator(checked);
199 }
.fi
.SS "void MPerfWidget::on_lHeightBox_activated (intindex)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 205 of file mperfwidget\&.cpp\&.
.PP
References KbPerf::liftHeight(), and perf\&.
.PP
.nf
205                                                   {
206     perf->liftHeight((KbPerf::height)(index + 1));
207 }
.fi
.SS "void MPerfWidget::on_spinBox_valueChanged (intarg1)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 219 of file mperfwidget\&.cpp\&.
.PP
References KbPerf::iOpacity(), and perf\&.
.PP
.nf
219                                                  {
220     if(!perf)
221         return;
222     perf->iOpacity(arg1 / 100\&.f);
223 }
.fi
.SS "void MPerfWidget::on_xyBox_clicked (boolchecked)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 191 of file mperfwidget\&.cpp\&.
.PP
References _xyLink, CkbSettings::set(), and xyLinkPath\&.
.PP
.nf
191                                               {
192     _xyLink = !checked;
193     CkbSettings::set(xyLinkPath, checked);
194     // FIXME: update other MPerfWidgets, since this is a global setting
195 }
.fi
.SS "void MPerfWidget::setPerf (\fBKbPerf\fP *newPerf, \fBKbProfile\fP *newProfile)"

.PP
Definition at line 60 of file mperfwidget\&.cpp\&.
.PP
References _xyLink, KbPerf::angleSnap(), Ui_MPerfWidget::aSnapBox, ColorButton::color(), KbPerf::dpi(), DPI_COUNT, KbPerf::dpiColor(), KbPerf::dpiEnabled(), KbPerf::dpiIndicator(), MPerfWidget::DpiUi::enableCheck, Ui_MPerfWidget::iButtonO, MPerfWidget::DpiUi::indicator, Ui_MPerfWidget::indicBox, KbPerf::iOpacity(), Ui_MPerfWidget::lHeightBox, KbPerf::liftHeight(), KbPerf::OTHER, perf, profile, Ui_MPerfWidget::spinBox, stages, ui, MPerfWidget::DpiUi::xBox, and MPerfWidget::DpiUi::yBox\&.
.PP
Referenced by KbWidget::modeChanged()\&.
.PP
.nf
60                                                                {
61     perf = newPerf;
62     profile = newProfile;
63     ui->spinBox->setValue(round(perf->iOpacity() * 100\&.f));
64     for(int i = 0; i < DPI_COUNT; i++){
65         stages[i]\&.indicator->color(perf->dpiColor(i));
66         bool oldLink = _xyLink;
67         // Don't force X/Y to the same value if they were set differently in the past
68         _xyLink = false;
69         stages[i]\&.xBox->setValue(perf->dpi(i)\&.x());
70         stages[i]\&.yBox->setValue(perf->dpi(i)\&.y());
71         _xyLink = oldLink;
72         if(stages[i]\&.enableCheck)
73             stages[i]\&.enableCheck->setChecked(perf->dpiEnabled(i));
74     }
75     ui->iButtonO->color(perf->dpiColor(KbPerf::OTHER));
76     ui->aSnapBox->setChecked(perf->angleSnap());
77     ui->lHeightBox->setCurrentIndex(perf->liftHeight() - 1);
78     ui->indicBox->setChecked(perf->dpiIndicator());
79 }
.fi
.SS "void MPerfWidget::sliderXMoved (intindex)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 128 of file mperfwidget\&.cpp\&.
.PP
References _xyLink, KbPerf::dpi(), dpiExp(), dpiRound(), perf, SET_END, SET_START, stages, MPerfWidget::DpiUi::xBox, MPerfWidget::DpiUi::xSlider, and MPerfWidget::DpiUi::ySlider\&.
.PP
Referenced by MPerfWidget()\&.
.PP
.nf
128                                        {
129     SET_START;
130     QSlider* slider = stages[index]\&.xSlider;
131     int value = dpiRound(dpiExp(slider->value(), slider->minimum(), slider->maximum()));
132     stages[index]\&.xBox->setValue(value);
133     if(_xyLink)
134         perf->dpi(index, value);
135     else
136         perf->dpi(index, QPoint(value, perf->dpi(index)\&.y()));
137     SET_END;
138     if(_xyLink)
139         stages[index]\&.ySlider->setValue(slider->value());
140 }
.fi
.SS "void MPerfWidget::sliderYMoved (intindex)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 142 of file mperfwidget\&.cpp\&.
.PP
References _xyLink, KbPerf::dpi(), dpiExp(), dpiRound(), perf, SET_END, SET_START, stages, ui, Ui_MPerfWidget::xyBox, MPerfWidget::DpiUi::yBox, and MPerfWidget::DpiUi::ySlider\&.
.PP
Referenced by MPerfWidget()\&.
.PP
.nf
142                                        {
143     SET_START;
144     QSlider* slider = stages[index]\&.ySlider;
145     int value = dpiRound(dpiExp(slider->value(), slider->minimum(), slider->maximum()));
146     stages[index]\&.yBox->setValue(value);
147     if(_xyLink)
148         perf->dpi(index, value);
149     else
150         perf->dpi(index, QPoint(perf->dpi(index)\&.x(), value));
151     SET_END;
152     if(!ui->xyBox->isChecked())
153         // X/Y linked?
154         stages[index]\&.xSlider->setValue(slider->value());
155 }
.fi
.SH "Field Documentation"
.PP 
.SS "bool MPerfWidget::_xyLink\fC [private]\fP"

.PP
Definition at line 44 of file mperfwidget\&.h\&.
.PP
Referenced by boxXChanged(), boxYChanged(), MPerfWidget(), on_xyBox_clicked(), setPerf(), sliderXMoved(), and sliderYMoved()\&.
.SS "QSignalMapper MPerfWidget::boxXMapper\fC [private]\fP"

.PP
Definition at line 49 of file mperfwidget\&.h\&.
.PP
Referenced by MPerfWidget()\&.
.SS "QSignalMapper MPerfWidget::boxYMapper\fC [private]\fP"

.PP
Definition at line 49 of file mperfwidget\&.h\&.
.PP
Referenced by MPerfWidget()\&.
.SS "QSignalMapper MPerfWidget::buttonMapper1\fC [private]\fP"

.PP
Definition at line 47 of file mperfwidget\&.h\&.
.PP
Referenced by MPerfWidget()\&.
.SS "QSignalMapper MPerfWidget::buttonMapper2\fC [private]\fP"

.PP
Definition at line 47 of file mperfwidget\&.h\&.
.PP
Referenced by MPerfWidget()\&.
.SS "bool MPerfWidget::colorLink\fC [private]\fP"

.PP
Definition at line 45 of file mperfwidget\&.h\&.
.PP
Referenced by colorChanged(), and colorClicked()\&.
.SS "const int MPerfWidget::DPI_COUNT = KbPerf::DPI_COUNT\fC [static]\fP"

.PP
Definition at line 28 of file mperfwidget\&.h\&.
.PP
Referenced by colorChanged(), MPerfWidget(), and setPerf()\&.
.SS "const int MPerfWidget::DPI_MAX = KbPerf::DPI_MAX\fC [static]\fP"

.PP
Definition at line 29 of file mperfwidget\&.h\&.
.SS "const int MPerfWidget::DPI_MIN = KbPerf::DPI_MIN\fC [static]\fP"

.PP
Definition at line 29 of file mperfwidget\&.h\&.
.SS "QSignalMapper MPerfWidget::enableMapper\fC [private]\fP"

.PP
Definition at line 50 of file mperfwidget\&.h\&.
.PP
Referenced by MPerfWidget()\&.
.SS "bool MPerfWidget::isSetting\fC [private]\fP"

.PP
Definition at line 53 of file mperfwidget\&.h\&.
.SS "\fBKbPerf\fP* MPerfWidget::perf\fC [private]\fP"

.PP
Definition at line 34 of file mperfwidget\&.h\&.
.PP
Referenced by boxXChanged(), boxYChanged(), colorChanged(), enableChanged(), on_aSnapBox_clicked(), on_copyButton_clicked(), on_indicBox_clicked(), on_lHeightBox_activated(), on_spinBox_valueChanged(), setPerf(), sliderXMoved(), and sliderYMoved()\&.
.SS "\fBKbProfile\fP* MPerfWidget::profile\fC [private]\fP"

.PP
Definition at line 35 of file mperfwidget\&.h\&.
.PP
Referenced by on_copyButton_clicked(), and setPerf()\&.
.SS "QSignalMapper MPerfWidget::sliderXMapper\fC [private]\fP"

.PP
Definition at line 48 of file mperfwidget\&.h\&.
.PP
Referenced by MPerfWidget()\&.
.SS "QSignalMapper MPerfWidget::sliderYMapper\fC [private]\fP"

.PP
Definition at line 48 of file mperfwidget\&.h\&.
.PP
Referenced by MPerfWidget()\&.
.SS "\fBDpiUi\fP MPerfWidget::stages[\fBDPI_COUNT\fP]\fC [private]\fP"

.PP
Definition at line 43 of file mperfwidget\&.h\&.
.PP
Referenced by boxXChanged(), boxYChanged(), colorChanged(), enableChanged(), MPerfWidget(), setPerf(), sliderXMoved(), and sliderYMoved()\&.
.SS "\fBUi::MPerfWidget\fP* MPerfWidget::ui\fC [private]\fP"

.PP
Definition at line 32 of file mperfwidget\&.h\&.
.PP
Referenced by colorChanged(), MPerfWidget(), setPerf(), sliderYMoved(), and ~MPerfWidget()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for ckb-next from the source code\&.
