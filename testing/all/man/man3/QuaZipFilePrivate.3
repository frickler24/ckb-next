.TH "QuaZipFilePrivate" 3 "Tue May 16 2017" "Version beta-v0.2.7 at branch testing" "ckb-next" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QuaZipFilePrivate \- 
.PP
The implementation class for \fBQuaZip\fP\&.  

.SH SYNOPSIS
.br
.PP
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBresetZipError\fP () const "
.br
.RI "\fIResets \fBzipError\fP\&. \fP"
.ti -1c
.RI "void \fBsetZipError\fP (int \fBzipError\fP) const "
.br
.RI "\fISets the zip error\&. \fP"
.ti -1c
.RI "\fBQuaZipFilePrivate\fP (\fBQuaZipFile\fP *\fBq\fP)"
.br
.RI "\fIThe constructor for the corresponding \fBQuaZipFile\fP constructor\&. \fP"
.ti -1c
.RI "\fBQuaZipFilePrivate\fP (\fBQuaZipFile\fP *\fBq\fP, const QString &zipName)"
.br
.RI "\fIThe constructor for the corresponding \fBQuaZipFile\fP constructor\&. \fP"
.ti -1c
.RI "\fBQuaZipFilePrivate\fP (\fBQuaZipFile\fP *\fBq\fP, const QString &zipName, const QString &\fBfileName\fP, \fBQuaZip::CaseSensitivity\fP cs)"
.br
.RI "\fIThe constructor for the corresponding \fBQuaZipFile\fP constructor\&. \fP"
.ti -1c
.RI "\fBQuaZipFilePrivate\fP (\fBQuaZipFile\fP *\fBq\fP, \fBQuaZip\fP *\fBzip\fP)"
.br
.RI "\fIThe constructor for the \fBQuaZipFile\fP constructor accepting a file name\&. \fP"
.ti -1c
.RI "\fB~QuaZipFilePrivate\fP ()"
.br
.RI "\fIThe destructor\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBQuaZipFile\fP * \fBq\fP"
.br
.RI "\fIThe pointer to the associated \fBQuaZipFile\fP instance\&. \fP"
.ti -1c
.RI "\fBQuaZip\fP * \fBzip\fP"
.br
.RI "\fIThe \fBQuaZip\fP object to work with\&. \fP"
.ti -1c
.RI "QString \fBfileName\fP"
.br
.RI "\fIThe file name\&. \fP"
.ti -1c
.RI "\fBQuaZip::CaseSensitivity\fP \fBcaseSensitivity\fP"
.br
.RI "\fICase sensitivity mode\&. \fP"
.ti -1c
.RI "bool \fBraw\fP"
.br
.RI "\fIWhether this file is opened in the raw mode\&. \fP"
.ti -1c
.RI "qint64 \fBwritePos\fP"
.br
.RI "\fIWrite position to keep track of\&. \fP"
.ti -1c
.RI "quint64 \fBuncompressedSize\fP"
.br
.RI "\fIUncompressed size to write along with a raw file\&. \fP"
.ti -1c
.RI "quint32 \fBcrc\fP"
.br
.RI "\fICRC to write along with a raw file\&. \fP"
.ti -1c
.RI "bool \fBinternal\fP"
.br
.RI "\fIWhether \fBzip\fP points to an internal \fBQuaZip\fP instance\&. \fP"
.ti -1c
.RI "int \fBzipError\fP"
.br
.RI "\fIThe last error\&. \fP"
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBQuaZipFile\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class contains all the private stuff for the \fBQuaZipFile\fP class, thus allowing to preserve binary compatibility between releases, the technique known as the Pimpl (private implementation) idiom\&. 
.PP
Definition at line 37 of file quazipfile\&.cpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QuaZipFilePrivate::QuaZipFilePrivate (\fBQuaZipFile\fP *q)\fC [inline]\fP, \fC [private]\fP"

.PP
Definition at line 78 of file quazipfile\&.cpp\&.
.PP
.nf
78                                            :
79       q(q), zip(NULL), internal(true), zipError(UNZ_OK) {}
.fi
.SS "QuaZipFilePrivate::QuaZipFilePrivate (\fBQuaZipFile\fP *q, const QString &zipName)\fC [inline]\fP, \fC [private]\fP"

.PP
Definition at line 81 of file quazipfile\&.cpp\&.
.PP
.nf
81                                                                    :
82       q(q), internal(true), zipError(UNZ_OK)
83       {
84         zip=new QuaZip(zipName);
85       }
.fi
.SS "QuaZipFilePrivate::QuaZipFilePrivate (\fBQuaZipFile\fP *q, const QString &zipName, const QString &fileName, \fBQuaZip::CaseSensitivity\fPcs)\fC [inline]\fP, \fC [private]\fP"

.PP
Definition at line 87 of file quazipfile\&.cpp\&.
.PP
.nf
88                                  :
89       q(q), internal(true), zipError(UNZ_OK)
90       {
91         zip=new QuaZip(zipName);
92         this->fileName=fileName;
93         if (this->fileName\&.startsWith('/'))
94             this->fileName = this->fileName\&.mid(1);
95         this->caseSensitivity=cs;
96       }
.fi
.SS "QuaZipFilePrivate::QuaZipFilePrivate (\fBQuaZipFile\fP *q, \fBQuaZip\fP *zip)\fC [inline]\fP, \fC [private]\fP"

.PP
Definition at line 98 of file quazipfile\&.cpp\&.
.PP
.nf
98                                                         :
99       q(q), zip(zip), internal(false), zipError(UNZ_OK) {}
.fi
.SS "QuaZipFilePrivate::~QuaZipFilePrivate ()\fC [inline]\fP, \fC [private]\fP"

.PP
Definition at line 101 of file quazipfile\&.cpp\&.
.PP
.nf
102     {
103       if (internal)
104         delete zip;
105     }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void QuaZipFilePrivate::resetZipError () const\fC [inline]\fP, \fC [private]\fP"

.PP
Definition at line 69 of file quazipfile\&.cpp\&.
.PP
References UNZ_OK\&.
.PP
Referenced by QuaZipFile::close(), and QuaZipFile::open()\&.
.PP
.nf
69 {setZipError(UNZ_OK);}
.fi
.SS "void QuaZipFilePrivate::setZipError (intzipError) const\fC [private]\fP"
This function is marked as const although it changes one field\&. This allows to call it from const functions that don't change anything by themselves\&. 
.PP
Definition at line 211 of file quazipfile\&.cpp\&.
.PP
References q, UNZ_OK, and zipError\&.
.PP
Referenced by QuaZipFile::close(), QuaZipFile::csize(), QuaZipFile::getActualFileName(), QuaZipFile::getFileInfo(), QuaZipFile::open(), QuaZipFile::readData(), QuaZipFile::usize(), and QuaZipFile::writeData()\&.
.PP
.nf
212 {
213   QuaZipFilePrivate *fakeThis = const_cast<QuaZipFilePrivate*>(this); // non-const
214   fakeThis->zipError=zipError;
215   if(zipError==UNZ_OK)
216     q->setErrorString(QString());
217   else
218     q->setErrorString(QuaZipFile::tr("ZIP/UNZIP API error %1")\&.arg(zipError));
219 }
.fi
.SH "Friends And Related Function Documentation"
.PP 
.SS "friend class \fBQuaZipFile\fP\fC [friend]\fP"

.PP
Definition at line 38 of file quazipfile\&.cpp\&.
.SH "Field Documentation"
.PP 
.SS "\fBQuaZip::CaseSensitivity\fP QuaZipFilePrivate::caseSensitivity\fC [private]\fP"

.PP
Definition at line 47 of file quazipfile\&.cpp\&.
.PP
Referenced by QuaZipFile::getCaseSensitivity(), QuaZipFile::open(), and QuaZipFile::setFileName()\&.
.SS "quint32 QuaZipFilePrivate::crc\fC [private]\fP"

.PP
Definition at line 59 of file quazipfile\&.cpp\&.
.PP
Referenced by QuaZipFile::close(), and QuaZipFile::open()\&.
.SS "QString QuaZipFilePrivate::fileName\fC [private]\fP"

.PP
Definition at line 45 of file quazipfile\&.cpp\&.
.PP
Referenced by QuaZipFile::getFileName(), QuaZipFile::open(), QuaZipFile::setFileName(), and QuaZipFile::setZip()\&.
.SS "bool QuaZipFilePrivate::internal\fC [private]\fP"
This is true if the archive was opened by name, rather than by supplying an existing \fBQuaZip\fP instance\&. 
.PP
Definition at line 65 of file quazipfile\&.cpp\&.
.PP
Referenced by QuaZipFile::close(), QuaZipFile::getZip(), QuaZipFile::open(), QuaZipFile::setFileName(), QuaZipFile::setZip(), and QuaZipFile::setZipName()\&.
.SS "\fBQuaZipFile\fP* QuaZipFilePrivate::q\fC [private]\fP"

.PP
Definition at line 41 of file quazipfile\&.cpp\&.
.PP
Referenced by setZipError()\&.
.SS "bool QuaZipFilePrivate::raw\fC [private]\fP"

.PP
Definition at line 49 of file quazipfile\&.cpp\&.
.PP
Referenced by QuaZipFile::isRaw(), QuaZipFile::open(), and QuaZipFile::size()\&.
.SS "quint64 QuaZipFilePrivate::uncompressedSize\fC [private]\fP"

.PP
Definition at line 57 of file quazipfile\&.cpp\&.
.PP
Referenced by QuaZipFile::close(), and QuaZipFile::open()\&.
.SS "qint64 QuaZipFilePrivate::writePos\fC [private]\fP"
QIODevice::pos() is broken for non-seekable devices, so we need our own position\&. 
.PP
Definition at line 55 of file quazipfile\&.cpp\&.
.PP
Referenced by QuaZipFile::open(), QuaZipFile::pos(), QuaZipFile::size(), and QuaZipFile::writeData()\&.
.SS "\fBQuaZip\fP* QuaZipFilePrivate::zip\fC [private]\fP"

.PP
Definition at line 43 of file quazipfile\&.cpp\&.
.PP
Referenced by QuaZipFile::atEnd(), QuaZipFile::close(), QuaZipFile::csize(), QuaZipFile::getActualFileName(), QuaZipFile::getFileInfo(), QuaZipFile::getZip(), QuaZipFile::getZipName(), QuaZipFile::open(), QuaZipFile::pos(), QuaZipFile::readData(), QuaZipFile::setFileName(), QuaZipFile::setZip(), QuaZipFile::setZipName(), QuaZipFile::usize(), and QuaZipFile::writeData()\&.
.SS "int QuaZipFilePrivate::zipError\fC [private]\fP"

.PP
Definition at line 67 of file quazipfile\&.cpp\&.
.PP
Referenced by QuaZipFile::close(), QuaZipFile::csize(), QuaZipFile::getFileInfo(), QuaZipFile::getZipError(), QuaZipFile::open(), setZipError(), QuaZipFile::usize(), and QuaZipFile::writeData()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for ckb-next from the source code\&.
