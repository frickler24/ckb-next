.TH "KbAnimWidget" 3 "Tue Jun 6 2017" "Version beta-v0.2.8+testing at branch macrotime.0.2" "ckb-next" \" -*- nroff -*-
.ad l
.nh
.SH NAME
KbAnimWidget \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <src/ckb/kbanimwidget\&.h>\fP
.PP
Inherits \fBQWidget\fP\&.
.SS "Signals"

.in +1c
.ti -1c
.RI "void \fBanimChanged\fP (\fBKbAnim\fP *selection)"
.br
.ti -1c
.RI "void \fBdidUpdateSelection\fP (QStringList keys)"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBKbAnimWidget\fP (\fBQWidget\fP *parent=0)"
.br
.ti -1c
.RI "\fB~KbAnimWidget\fP ()"
.br
.ti -1c
.RI "void \fBsetLight\fP (\fBKbLight\fP *newLight)"
.br
.ti -1c
.RI "void \fBaddAnim\fP (const \fBAnimScript\fP *base, const QStringList &keyList, const QString &name, const QMap< QString, QVariant > &preset)"
.br
.ti -1c
.RI "void \fBduplicateAnim\fP (\fBKbAnim\fP *old)"
.br
.ti -1c
.RI "void \fBclearSelection\fP ()"
.br
.ti -1c
.RI "void \fBsetSelectedKeys\fP (const QStringList &keys)"
.br
.in -1c
.SS "Private Slots"

.in +1c
.ti -1c
.RI "void \fBon_animList_currentItemChanged\fP (QListWidgetItem *\fBcurrent\fP, QListWidgetItem *previous)"
.br
.ti -1c
.RI "void \fBon_animList_itemChanged\fP (QListWidgetItem *item)"
.br
.ti -1c
.RI "void \fBon_animList_customContextMenuRequested\fP (const QPoint &pos)"
.br
.ti -1c
.RI "void \fBon_nameBox_textEdited\fP (const QString &arg1)"
.br
.ti -1c
.RI "void \fBon_opacityBox_valueChanged\fP (double arg1)"
.br
.ti -1c
.RI "void \fBon_blendBox_activated\fP (int index)"
.br
.ti -1c
.RI "void \fBon_keyButton_clicked\fP ()"
.br
.ti -1c
.RI "void \fBon_deleteButton_clicked\fP ()"
.br
.ti -1c
.RI "void \fBrefreshList\fP ()"
.br
.ti -1c
.RI "void \fBreorderAnims\fP ()"
.br
.ti -1c
.RI "void \fBon_propertyButton_clicked\fP ()"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBsetCurrent\fP (\fBKbAnim\fP *newCurrent)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBKbLight\fP * \fBlight\fP"
.br
.ti -1c
.RI "QHash< QUuid, \fBKbAnim\fP * > \fBanimations\fP"
.br
.ti -1c
.RI "\fBKbAnim\fP * \fBcurrent\fP"
.br
.ti -1c
.RI "QStringList \fBselectedKeys\fP"
.br
.ti -1c
.RI "bool \fBnoReorder\fP"
.br
.ti -1c
.RI "\fBUi::KbAnimWidget\fP * \fBui\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 15 of file kbanimwidget\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "KbAnimWidget::KbAnimWidget (\fBQWidget\fP *parent = \fC0\fP)\fC [explicit]\fP"

.PP
Definition at line 7 of file kbanimwidget\&.cpp\&.
.PP
References Ui_KbAnimWidget::animList, reorderAnims(), setCurrent(), Ui_KbAnimWidget::setupUi(), and ui\&.
.PP
.nf
7                                           :
8     QWidget(parent), light(0), current(0), noReorder(false),
9     ui(new Ui::KbAnimWidget)
10 {
11     ui->setupUi(this);
12     ui->animList->setVisible(false);
13     setCurrent(0);
14     connect(ui->animList, SIGNAL(orderChanged()), this, SLOT(reorderAnims()));
15 }
.fi
.SS "KbAnimWidget::~KbAnimWidget ()"

.PP
Definition at line 17 of file kbanimwidget\&.cpp\&.
.PP
References ui\&.
.PP
.nf
17                            {
18     delete ui;
19 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void KbAnimWidget::addAnim (const \fBAnimScript\fP *base, const QStringList &keyList, const QString &name, const QMap< QString, QVariant > &preset)"

.PP
Definition at line 82 of file kbanimwidget\&.cpp\&.
.PP
References KbLight::addAnim(), animations, Ui_KbAnimWidget::animList, KbAnim::guid(), light, KbAnim::name(), Ui_KbAnimWidget::noAnimLabel, noReorder, on_propertyButton_clicked(), setCurrent(), and ui\&.
.PP
Referenced by KbLightWidget::on_animButton_clicked()\&.
.PP
.nf
82                                                                                                                                         {
83     if(!light)
84         return;
85     noReorder = true;
86     KbAnim* animation = light->addAnim(base, keyList, name, preset);
87     QListWidgetItem* item = new QListWidgetItem(animation->name(), ui->animList);
88     item->setData(Qt::UserRole, animation->guid());
89     item->setFlags(item->flags() | Qt::ItemIsEditable);
90     animations[animation->guid()] = animation;
91     ui->animList->addItem(item);
92     ui->animList->setCurrentItem(item);
93     ui->animList->setVisible(true);
94     ui->noAnimLabel->setVisible(false);
95 
96     setCurrent(animation);
97     noReorder = false;
98 
99     // Activate settings dialog
100     on_propertyButton_clicked();
101 }
.fi
.SS "void KbAnimWidget::animChanged (\fBKbAnim\fP *selection)\fC [signal]\fP"

.PP
Definition at line 213 of file moc_kbanimwidget\&.cpp\&.
.PP
Referenced by setCurrent()\&.
.PP
.nf
214 {
215     void *_a[] = { Q_NULLPTR, const_cast<void*>(reinterpret_cast<const void*>(&_t1)) };
216     QMetaObject::activate(this, &staticMetaObject, 0, _a);
217 }
.fi
.SS "void KbAnimWidget::clearSelection ()"

.PP
Definition at line 77 of file kbanimwidget\&.cpp\&.
.PP
References Ui_KbAnimWidget::animList, setCurrent(), and ui\&.
.PP
Referenced by KbLightWidget::setLight()\&.
.PP
.nf
77                                  {
78     ui->animList->setCurrentItem(0);
79     setCurrent(0);
80 }
.fi
.SS "void KbAnimWidget::didUpdateSelection (QStringListkeys)\fC [signal]\fP"

.PP
Definition at line 220 of file moc_kbanimwidget\&.cpp\&.
.PP
Referenced by on_keyButton_clicked()\&.
.PP
.nf
221 {
222     void *_a[] = { Q_NULLPTR, const_cast<void*>(reinterpret_cast<const void*>(&_t1)) };
223     QMetaObject::activate(this, &staticMetaObject, 1, _a);
224 }
.fi
.SS "void KbAnimWidget::duplicateAnim (\fBKbAnim\fP *old)"

.PP
Definition at line 103 of file kbanimwidget\&.cpp\&.
.PP
References KbLight::animList(), Ui_KbAnimWidget::animList, KbLight::duplicateAnim(), light, Ui_KbAnimWidget::noAnimLabel, noReorder, refreshList(), setCurrent(), and ui\&.
.PP
Referenced by on_animList_customContextMenuRequested()\&.
.PP
.nf
103                                            {
104     if(!light)
105         return;
106     noReorder = true;
107     KbAnim* animation = light->duplicateAnim(old);
108     // Refresh the list\&. insertItem doesn't seem to place the item in the correct position on its own\&.\&.\&.
109     refreshList();
110     ui->animList->setCurrentRow(light->animList()\&.indexOf(animation));
111     ui->animList->setVisible(true);
112     ui->noAnimLabel->setVisible(false);
113 
114     setCurrent(animation);
115     noReorder = false;
116 }
.fi
.SS "void KbAnimWidget::on_animList_currentItemChanged (QListWidgetItem *current, QListWidgetItem *previous)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 151 of file kbanimwidget\&.cpp\&.
.PP
References animations, and setCurrent()\&.
.PP
.nf
151                                                                                                     {
152     if(!current)
153         setCurrent(0);
154     else
155         setCurrent(animations[current->data(Qt::UserRole)\&.toUuid()]);
156 }
.fi
.SS "void KbAnimWidget::on_animList_customContextMenuRequested (const QPoint &pos)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 169 of file kbanimwidget\&.cpp\&.
.PP
References animations, Ui_KbAnimWidget::animList, current, duplicateAnim(), on_deleteButton_clicked(), setCurrent(), and ui\&.
.PP
.nf
169                                                                           {
170     QListWidgetItem* item = ui->animList->itemAt(pos);
171     if(!item)
172         return;
173     setCurrent(animations[item->data(Qt::UserRole)\&.toUuid()]);
174 
175     QMenu menu(this);
176     QAction* rename = new QAction("Rename\&.\&.\&.", this);
177     QAction* duplicate = new QAction("Duplicate", this);
178     QAction* del = new QAction("Delete", this);
179     menu\&.addAction(rename);
180     menu\&.addAction(duplicate);
181     menu\&.addAction(del);
182     QAction* result = menu\&.exec(QCursor::pos());
183     if(result == rename)
184         ui->animList->editItem(item);
185     else if(result == duplicate)
186         duplicateAnim(current);
187     else if(result == del)
188         on_deleteButton_clicked();
189 }
.fi
.SS "void KbAnimWidget::on_animList_itemChanged (QListWidgetItem *item)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 158 of file kbanimwidget\&.cpp\&.
.PP
References anim, animations, current, KbAnim::name(), Ui_KbAnimWidget::nameBox, noReorder, and ui\&.
.PP
.nf
158                                                                {
159     if(item){
160         KbAnim* anim = animations[item->data(Qt::UserRole)\&.toUuid()];
161         if(anim){
162             anim->name(item->text()\&.trimmed());
163             if(anim == current && !noReorder)
164                 ui->nameBox->setText(anim->name());
165         }
166     }
167 }
.fi
.SS "void KbAnimWidget::on_blendBox_activated (intindex)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 205 of file kbanimwidget\&.cpp\&.
.PP
References current, and KbAnim::mode()\&.
.PP
.nf
205                                                  {
206     if(current)
207         current->mode((KbAnim::Mode)index);
208 }
.fi
.SS "void KbAnimWidget::on_deleteButton_clicked ()\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 226 of file kbanimwidget\&.cpp\&.
.PP
References animations, KbLight::animList(), Ui_KbAnimWidget::animList, current, KbAnim::guid(), light, Ui_KbAnimWidget::noAnimLabel, KbLight::restartAnimation(), setCurrent(), and ui\&.
.PP
Referenced by on_animList_customContextMenuRequested()\&.
.PP
.nf
226                                           {
227     if(current){
228         animations\&.remove(current->guid());
229         QList<KbAnim*> animList = light->animList();
230         animList\&.removeAll(current);
231         light->animList(animList);
232         current->deleteLater();
233         setCurrent(0);
234         delete ui->animList->currentItem();
235         if(animations\&.count() == 0){
236             ui->animList->setVisible(false);
237             ui->noAnimLabel->setVisible(true);
238         }
239     }
240     light->restartAnimation();
241 }
.fi
.SS "void KbAnimWidget::on_keyButton_clicked ()\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 210 of file kbanimwidget\&.cpp\&.
.PP
References KeyMap::contains(), current, didUpdateSelection(), KbAnim::keys(), light, KbLight::map(), KbLight::restartAnimation(), and selectedKeys\&.
.PP
.nf
210                                        {
211     if(current){
212         QStringList keys = selectedKeys;
213         // If any keys were selected previously that aren't in the keymap now, leave them in
214         // This is important for layout compatibility - e\&.g\&. being able to select both bslash_iso and bslash, because no single layout contains both
215         const KeyMap& map = light->map();
216         foreach(const QString& key, current->keys()){
217             if(!map\&.contains(key))
218                 keys << key;
219         }
220         current->keys(keys);
221         emit didUpdateSelection(selectedKeys);
222     }
223     light->restartAnimation();
224 }
.fi
.SS "void KbAnimWidget::on_nameBox_textEdited (const QString &arg1)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 191 of file kbanimwidget\&.cpp\&.
.PP
References Ui_KbAnimWidget::animList, current, KbAnim::name(), noReorder, and ui\&.
.PP
Referenced by on_propertyButton_clicked()\&.
.PP
.nf
191                                                            {
192     if(current){
193         noReorder = true;
194         current->name(arg1\&.trimmed());
195         ui->animList->currentItem()->setText(current->name());
196         noReorder = false;
197     }
198 }
.fi
.SS "void KbAnimWidget::on_opacityBox_valueChanged (doublearg1)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 200 of file kbanimwidget\&.cpp\&.
.PP
References current, and KbAnim::opacity()\&.
.PP
.nf
200                                                         {
201     if(current)
202         current->opacity(arg1 / 100\&.);
203 }
.fi
.SS "void KbAnimWidget::on_propertyButton_clicked ()\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 243 of file kbanimwidget\&.cpp\&.
.PP
References KbAnim::commitParams(), current, light, AnimSettingDialog::name(), Ui_KbAnimWidget::nameBox, on_nameBox_textEdited(), KbAnim::reInit(), KbAnim::resetParams(), KbLight::restartAnimation(), and ui\&.
.PP
Referenced by addAnim()\&.
.PP
.nf
243                                             {
244     if(!current)
245         return;
246     // Present animation property popup
247     AnimSettingDialog dialog(this, current);
248     dialog\&.exec();
249     if(dialog\&.result() != QDialog::Accepted){
250         current->resetParams();
251         return;
252     }
253     // Apply settings and restart all animations
254     current->commitParams();
255     current->reInit();
256     light->restartAnimation();
257     // Update name
258     ui->nameBox->setText(dialog\&.name());
259     on_nameBox_textEdited(dialog\&.name());
260 }
.fi
.SS "void KbAnimWidget::refreshList ()\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 32 of file kbanimwidget\&.cpp\&.
.PP
References anim, animations, KbLight::animList(), Ui_KbAnimWidget::animList, KbAnim::guid(), light, KbAnim::name(), Ui_KbAnimWidget::noAnimLabel, noReorder, setCurrent(), and ui\&.
.PP
Referenced by duplicateAnim(), and setLight()\&.
.PP
.nf
32                               {
33     noReorder = true;
34     setCurrent(0);
35     ui->animList->clear();
36     animations\&.clear();
37     // Add the animations from the new lighting mode
38     if(!light){
39         ui->animList->setVisible(false);
40         ui->noAnimLabel->setVisible(true);
41         return;
42     }
43     QList<KbAnim*> newAnimations = light->animList();
44     if(newAnimations\&.count() == 0){
45         ui->animList->setVisible(false);
46         ui->noAnimLabel->setVisible(true);
47         return;
48     }
49     ui->animList->setVisible(true);
50     foreach(KbAnim* anim, newAnimations){
51         QListWidgetItem* item = new QListWidgetItem(anim->name(), ui->animList);
52         item->setData(Qt::UserRole, anim->guid());
53         item->setFlags(item->flags() | Qt::ItemIsEditable);
54         animations[anim->guid()] = anim;
55         ui->animList->addItem(item);
56     }
57     ui->noAnimLabel->setVisible(false);
58     noReorder = false;
59 }
.fi
.SS "void KbAnimWidget::reorderAnims ()\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 61 of file kbanimwidget\&.cpp\&.
.PP
References anim, animations, KbLight::animList(), Ui_KbAnimWidget::animList, light, noReorder, and ui\&.
.PP
Referenced by KbAnimWidget()\&.
.PP
.nf
61                                {
62     if(light && !noReorder){
63         // Clear and rebuild the list of animations in case the animation moved
64         int count = ui->animList->count();
65         QList<KbAnim*> animList;
66         for(int i = 0; i < count; i++){
67             QListWidgetItem* item = ui->animList->item(i);
68             KbAnim* anim = animations[item->data(Qt::UserRole)\&.toUuid()];
69             if(anim && !animList\&.contains(anim))
70                 animList\&.append(anim);
71             item->setFlags(item->flags() | Qt::ItemIsEditable);
72         }
73         light->animList(animList);
74     }
75 }
.fi
.SS "void KbAnimWidget::setCurrent (\fBKbAnim\fP *newCurrent)\fC [private]\fP"

.PP
Definition at line 118 of file kbanimwidget\&.cpp\&.
.PP
References Ui_KbAnimWidget::aCopyLabel, Ui_KbAnimWidget::aMissingLabel, Ui_KbAnimWidget::aNameLabel, animChanged(), Ui_KbAnimWidget::aVerLabel, Ui_KbAnimWidget::blendBox, AnimScript::copyright(), current, KbAnim::keys(), KbAnim::mode(), AnimScript::name(), KbAnim::name(), Ui_KbAnimWidget::nameBox, KbAnim::opacity(), Ui_KbAnimWidget::opacityBox, KbAnim::script(), KbAnim::scriptName(), selectedKeys, Ui_KbAnimWidget::selectionStack, ui, and AnimScript::version()\&.
.PP
Referenced by addAnim(), clearSelection(), duplicateAnim(), KbAnimWidget(), on_animList_currentItemChanged(), on_animList_customContextMenuRequested(), on_deleteButton_clicked(), and refreshList()\&.
.PP
.nf
118                                                {
119     if(newCurrent != current)
120         emit animChanged(current = newCurrent);
121     if(!current){
122         selectedKeys\&.clear();
123         ui->selectionStack->setCurrentIndex(0);
124         return;
125     }
126     selectedKeys = current->keys();
127     const AnimScript* script = current->script();
128     if(!script){
129         ui->selectionStack->setCurrentIndex(2);
130         ui->aMissingLabel->setText("The \"" + current->scriptName() + "\" script could not be loaded\&. Please check your animation directory\&.");
131         return;
132     }
133     ui->selectionStack->setCurrentIndex(1);
134     ui->aNameLabel->setText(script->name());
135     ui->aVerLabel->setText("v" + script->version());
136     ui->aCopyLabel->setText(script->copyright());
137 
138     ui->nameBox->setText(current->name());
139     ui->opacityBox->setValue(current->opacity() * 100\&.);
140     ui->blendBox->setCurrentIndex((int)current->mode());
141 }
.fi
.SS "void KbAnimWidget::setLight (\fBKbLight\fP *newLight)"

.PP
Definition at line 21 of file kbanimwidget\&.cpp\&.
.PP
References light, and refreshList()\&.
.PP
Referenced by KbLightWidget::setLight()\&.
.PP
.nf
21                                             {
22     if(light != newLight){
23         if(light)
24             disconnect(light, SIGNAL(didLoad()), this, SLOT(refreshList()));
25         if(newLight)
26             connect(newLight, SIGNAL(didLoad()), this, SLOT(refreshList()));
27         light = newLight;
28     }
29     refreshList();
30 }
.fi
.SS "void KbAnimWidget::setSelectedKeys (const QStringList &keys)"

.PP
Definition at line 143 of file kbanimwidget\&.cpp\&.
.PP
References Ui_KbAnimWidget::keyButton, selectedKeys, and ui\&.
.PP
Referenced by KbLightWidget::newSelection()\&.
.PP
.nf
143                                                          {
144     selectedKeys = keys;
145     if(keys\&.count() == 0)
146         ui->keyButton->setVisible(false);
147     else
148         ui->keyButton->setVisible(true);
149 }
.fi
.SH "Field Documentation"
.PP 
.SS "QHash<QUuid, \fBKbAnim\fP*> KbAnimWidget::animations\fC [private]\fP"

.PP
Definition at line 53 of file kbanimwidget\&.h\&.
.PP
Referenced by addAnim(), on_animList_currentItemChanged(), on_animList_customContextMenuRequested(), on_animList_itemChanged(), on_deleteButton_clicked(), refreshList(), and reorderAnims()\&.
.SS "\fBKbAnim\fP* KbAnimWidget::current\fC [private]\fP"

.PP
Definition at line 55 of file kbanimwidget\&.h\&.
.PP
Referenced by on_animList_customContextMenuRequested(), on_animList_itemChanged(), on_blendBox_activated(), on_deleteButton_clicked(), on_keyButton_clicked(), on_nameBox_textEdited(), on_opacityBox_valueChanged(), on_propertyButton_clicked(), and setCurrent()\&.
.SS "\fBKbLight\fP* KbAnimWidget::light\fC [private]\fP"

.PP
Definition at line 52 of file kbanimwidget\&.h\&.
.PP
Referenced by addAnim(), duplicateAnim(), on_deleteButton_clicked(), on_keyButton_clicked(), on_propertyButton_clicked(), refreshList(), reorderAnims(), and setLight()\&.
.SS "bool KbAnimWidget::noReorder\fC [private]\fP"

.PP
Definition at line 58 of file kbanimwidget\&.h\&.
.PP
Referenced by addAnim(), duplicateAnim(), on_animList_itemChanged(), on_nameBox_textEdited(), refreshList(), and reorderAnims()\&.
.SS "QStringList KbAnimWidget::selectedKeys\fC [private]\fP"

.PP
Definition at line 57 of file kbanimwidget\&.h\&.
.PP
Referenced by on_keyButton_clicked(), setCurrent(), and setSelectedKeys()\&.
.SS "\fBUi::KbAnimWidget\fP* KbAnimWidget::ui\fC [private]\fP"

.PP
Definition at line 60 of file kbanimwidget\&.h\&.
.PP
Referenced by addAnim(), clearSelection(), duplicateAnim(), KbAnimWidget(), on_animList_customContextMenuRequested(), on_animList_itemChanged(), on_deleteButton_clicked(), on_nameBox_textEdited(), on_propertyButton_clicked(), refreshList(), reorderAnims(), setCurrent(), setSelectedKeys(), and ~KbAnimWidget()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for ckb-next from the source code\&.
