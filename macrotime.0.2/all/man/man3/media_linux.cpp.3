.TH "src/ckb/media_linux.cpp" 3 "Tue Jun 6 2017" "Version beta-v0.2.8+testing at branch macrotime.0.2" "ckb-next" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/ckb/media_linux.cpp \- 
.SH SYNOPSIS
.br
.PP
\fC#include <QDateTime>\fP
.br
\fC#include <QProcess>\fP
.br
\fC#include 'media\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "\fBmuteState\fP \fBgetMuteState\fP ()"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "static QProcess \fBmuteProcess\fP"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "\fBmuteState\fP getMuteState ()"

.PP
Definition at line 9 of file media_linux\&.cpp\&.
.PP
References MUTED, muteProcess, UNKNOWN, and UNMUTED\&.
.PP
.nf
9                         {
10     // Get default sink mute state from pulseaudio
11     static muteState lastKnown = UNKNOWN;
12     static quint64 lastTime = 0;
13     // Instead of running a command to check the state and waiting for it to finish, run the command now but wait to check it until the next frame
14     // (locking up the GUI thread is bad)
15     if(lastTime > 0 && muteProcess\&.state() == QProcess::NotRunning){
16         if(muteProcess\&.exitCode() != 0)
17             lastKnown = UNKNOWN;
18         QString output = muteProcess\&.readLine()\&.trimmed();
19         if(output == "yes")
20             lastKnown = MUTED;
21         else if(output == "no")
22             lastKnown = UNMUTED;
23     }
24     quint64 time = QDateTime::currentMSecsSinceEpoch();
25     if(time - lastTime < 33)
26         // Don't run it than 30 times per second
27         return lastKnown;
28     lastTime = time;
29     if(muteProcess\&.state() == QProcess::NotRunning)
30         // Shamelessly taken from pulseaudio-ctl
31         muteProcess\&.start("sh", QStringList() << "-c" << "pacmd list-sinks|grep -A 15 '* index'|awk '/muted:/{ print $2 }'");
32     return lastKnown;
33 }
.fi
.SH "Variable Documentation"
.PP 
.SS "QProcess muteProcess\fC [static]\fP"

.PP
Definition at line 7 of file media_linux\&.cpp\&.
.PP
Referenced by getMuteState()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for ckb-next from the source code\&.
