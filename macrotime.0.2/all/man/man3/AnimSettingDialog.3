.TH "AnimSettingDialog" 3 "Mon Jun 5 2017" "Version beta-v0.2.8+testing at branch macrotime.0.2" "ckb-next" \" -*- nroff -*-
.ad l
.nh
.SH NAME
AnimSettingDialog \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <src/ckb/animsettingdialog\&.h>\fP
.PP
Inherits \fBQDialog\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBAnimSettingDialog\fP (\fBQWidget\fP *parent, \fBKbAnim\fP *\fBanim\fP)"
.br
.ti -1c
.RI "\fB~AnimSettingDialog\fP ()"
.br
.ti -1c
.RI "QString \fBname\fP () const "
.br
.in -1c
.SS "Private Slots"

.in +1c
.ti -1c
.RI "void \fBnewDuration\fP (double duration)"
.br
.ti -1c
.RI "void \fBupdateStops\fP ()"
.br
.ti -1c
.RI "void \fBangleDialChanged\fP (QString \fBname\fP)"
.br
.ti -1c
.RI "void \fBangleSpinnerChanged\fP (QString \fBname\fP)"
.br
.ti -1c
.RI "void \fBupdateParam\fP (QString \fBname\fP)"
.br
.ti -1c
.RI "void \fBon_delayBox_valueChanged\fP (double arg1)"
.br
.ti -1c
.RI "void \fBon_repeatBox_valueChanged\fP (double arg1)"
.br
.ti -1c
.RI "void \fBon_kpDelayBox_valueChanged\fP (double arg1)"
.br
.ti -1c
.RI "void \fBon_kpRepeatBox_valueChanged\fP (double arg1)"
.br
.ti -1c
.RI "void \fBon_kpReleaseBox_stateChanged\fP (int arg1)"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "QFrame * \fBhLine\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBUi::AnimSettingDialog\fP * \fBui\fP"
.br
.ti -1c
.RI "QCheckBox * \fBstopCheck\fP"
.br
.ti -1c
.RI "QCheckBox * \fBkpStopCheck\fP"
.br
.ti -1c
.RI "bool \fBhasRepeat\fP"
.br
.ti -1c
.RI "\fBKbAnim\fP * \fB_anim\fP"
.br
.ti -1c
.RI "double \fBlastDuration\fP"
.br
.ti -1c
.RI "QMap< QString, \fBQWidget\fP * > \fBsettingWidgets\fP"
.br
.ti -1c
.RI "QSignalMapper \fBupdateMapper\fP"
.br
.ti -1c
.RI "QMap< QString, QSpinBox * > \fBangleSpinners\fP"
.br
.ti -1c
.RI "QSignalMapper \fBangleDialMapper\fP"
.br
.ti -1c
.RI "QSignalMapper \fBangleSpinnerMapper\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 15 of file animsettingdialog\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "AnimSettingDialog::AnimSettingDialog (\fBQWidget\fP *parent, \fBKbAnim\fP *anim)\fC [explicit]\fP"

.PP
Definition at line 19 of file animsettingdialog\&.cpp\&.
.PP
References AnimScript::Param::AGRADIENT, AnimScript::Param::ANGLE, angleDialChanged(), angleDialMapper, angleFlip(), angleSpinnerChanged(), angleSpinnerMapper, angleSpinners, Ui_AnimSettingDialog::animName, AnimScript::Param::ARGB, AnimScript::author(), AnimScript::Param::BOOL, Ui_AnimSettingDialog::delayBox, AnimScript::description(), AnimScript::Param::DOUBLE, AnimScript::Param::GRADIENT, AnimScript::hasKeypress(), AnimScript::hasParam(), KbAnim::hasParameter(), hasRepeat, hLine(), Ui_AnimSettingDialog::kpDelayBox, Ui_AnimSettingDialog::kpModeStopBox, Ui_AnimSettingDialog::kpReleaseBox, Ui_AnimSettingDialog::kpRepeatBox, Ui_AnimSettingDialog::kpRepeatLabel, Ui_AnimSettingDialog::kpRepeatLabel_2, kpStopCheck, AnimScript::Param::LABEL, lastDuration, AnimScript::license(), AnimScript::Param::LONG, AnimScript::Param::maximum, AnimScript::Param::minimum, AnimScript::Param::name, AnimScript::name(), KbAnim::name(), newDuration(), KbAnim::parameter(), AnimScript::paramIterator(), AnimScript::Param::postfix, AnimScript::Param::prefix, Ui_AnimSettingDialog::repeatBox, Ui_AnimSettingDialog::repeatLabel, Ui_AnimSettingDialog::repeatLabel_2, AnimScript::Param::RGB, Ui_AnimSettingDialog::sAuthorLabel, KbAnim::script(), KbAnim::scriptName(), Ui_AnimSettingDialog::sDescLabel, Ui_AnimSettingDialog::settingsGrid, settingWidgets, Ui_AnimSettingDialog::setupUi(), Ui_AnimSettingDialog::sLicenseLabel, Ui_AnimSettingDialog::sNameLabel, stopCheck, AnimScript::Param::STRING, Ui_AnimSettingDialog::sVerLabel, Ui_AnimSettingDialog::sYearLabel, Ui_AnimSettingDialog::timeGrid, AnimScript::Param::type, ui, updateMapper, updateParam(), updateStops(), AnimScript::version(), and AnimScript::year()\&.
.PP
.nf
19                                                                   :
20     QDialog(parent),
21     ui(new Ui::AnimSettingDialog), stopCheck(0), kpStopCheck(0),
22     _anim(anim), lastDuration(1\&.0)
23 {
24     ui->setupUi(this);
25     setWindowTitle(anim->scriptName() + " Animation");
26     ui->animName->setText(anim->name());
27     const AnimScript* script = anim->script();
28 
29     connect(&updateMapper, SIGNAL(mapped(QString)), this, SLOT(updateParam(QString)));
30     connect(&angleDialMapper, SIGNAL(mapped(QString)), this, SLOT(angleDialChanged(QString)));
31     connect(&angleSpinnerMapper, SIGNAL(mapped(QString)), this, SLOT(angleSpinnerChanged(QString)));
32 
33     // Build settings UI
34     int row = 1;
35     ui->settingsGrid->addItem(new QSpacerItem(0, 10, QSizePolicy::Fixed, QSizePolicy::Fixed), row++, 6);
36     ui->settingsGrid->addWidget(new QLabel("<b>Animation</b>", this), row++, 0, 1, 7);
37     ui->settingsGrid->addWidget(hLine(), row++, 0, 1, 7);
38     bool rSpacePlaced = false;
39     QListIterator<AnimScript::Param> i(script->paramIterator());
40     while(i\&.hasNext()){
41         const AnimScript::Param& param = i\&.next();
42         // Skip timing/playback params
43         if(param\&.name == "duration"
44                 || param\&.name == "trigger" || param\&.name == "kptrigger"
45                 || param\&.name == "kpmode"
46                 || param\&.name == "delay" || param\&.name == "kpdelay"
47                 || param\&.name == "repeat" || param\&.name == "kprepeat"
48                 || param\&.name == "stop" || param\&.name == "kpstop"
49                 || param\&.name == "kpmodestop" || param\&.name == "kprelease")
50             continue;
51         QVariant value = anim->parameter(param\&.name);
52         // Display prefix label on the left (except for booleans and labels)
53         if(param\&.type != AnimScript::Param::BOOL && param\&.type != AnimScript::Param::LABEL)
54             ui->settingsGrid->addWidget(new QLabel(param\&.prefix, this), row, 1);
55         // Configure and display main widget
56         QWidget* widget = 0;
57         int colSpan = 1;
58         QString postfix = param\&.postfix;
59         switch(param\&.type){
60         case AnimScript::Param::BOOL:
61             widget = new QCheckBox(param\&.prefix, this);
62             ((QCheckBox*)widget)->setChecked(value\&.toBool());
63             colSpan = 4;
64             connect(widget, SIGNAL(stateChanged(int)), &updateMapper, SLOT(map()));
65             break;
66         case AnimScript::Param::LONG:
67             widget = new QSpinBox(this);
68             ((QSpinBox*)widget)->setMinimum(param\&.minimum\&.toInt());
69             ((QSpinBox*)widget)->setMaximum(param\&.maximum\&.toInt());
70             ((QSpinBox*)widget)->setValue(value\&.toInt());
71             if(postfix\&.length() <= 3){
72                 ((QSpinBox*)widget)->setSuffix(postfix);
73                 postfix = "";
74             }
75             connect(widget, SIGNAL(valueChanged(int)), &updateMapper, SLOT(map()));
76             break;
77         case AnimScript::Param::DOUBLE:
78             widget = new QDoubleSpinBox(this);
79             ((QDoubleSpinBox*)widget)->setDecimals(1);
80             ((QDoubleSpinBox*)widget)->setMinimum(param\&.minimum\&.toDouble());
81             ((QDoubleSpinBox*)widget)->setMaximum(param\&.maximum\&.toDouble());
82             ((QDoubleSpinBox*)widget)->setValue(value\&.toDouble());
83             if(postfix\&.length() <= 3){
84                 ((QDoubleSpinBox*)widget)->setSuffix(postfix);
85                 postfix = "";
86             }
87             connect(widget, SIGNAL(valueChanged(double)), &updateMapper, SLOT(map()));
88             break;
89         case AnimScript::Param::RGB:
90             widget = new ColorButton(this);
91             ((ColorButton*)widget)->color(QColor("#" + value\&.toString()));
92             colSpan = 3;
93             connect(widget, SIGNAL(colorChanged(QColor)), &updateMapper, SLOT(map()));
94             break;
95         case AnimScript::Param::ARGB:{
96             widget = new ColorButton(this, true);
97             QString val = value\&.toString();
98             QColor color;
99             if(val\&.length() == 8){
100                 color = "#" + val\&.right(6);
101                 color\&.setAlpha(val\&.left(2)\&.toInt(0, 16));
102             } else
103                 color = "#" + val;
104             ((ColorButton*)widget)->color(color);
105             colSpan = 3;
106             connect(widget, SIGNAL(colorChanged(QColor)), &updateMapper, SLOT(map()));
107             break;
108         }
109         case AnimScript::Param::GRADIENT:
110             widget = new GradientButton(this);
111             ((GradientButton*)widget)->fromString(value\&.toString());
112             colSpan = 3;
113             connect(widget, SIGNAL(gradientChanged()), &updateMapper, SLOT(map()));
114             break;
115         case AnimScript::Param::AGRADIENT:
116             widget = new GradientButton(this, true);
117             ((GradientButton*)widget)->fromString(value\&.toString());
118             colSpan = 3;
119             connect(widget, SIGNAL(gradientChanged()), &updateMapper, SLOT(map()));
120             break;
121         case AnimScript::Param::ANGLE:
122             widget = new QDial(this);
123             ((QDial*)widget)->setFixedSize(60, 60);
124             ((QDial*)widget)->setMinimum(0);
125             ((QDial*)widget)->setMaximum(360);
126             // this is NOT a typo\&.\&.\&.     ^
127             // Even though 360 shouldn't be valid, the wheel/arrow keys will lose 1 degree at the bottom unless 360 is set as max
128             ((QDial*)widget)->setSingleStep(5);
129             ((QDial*)widget)->setPageStep(15);
130             ((QDial*)widget)->setNotchTarget(6);
131             ((QDial*)widget)->setNotchesVisible(true);
132             ((QDial*)widget)->setWrapping(true);
133             ((QDial*)widget)->setInvertedAppearance(true);
134             ((QDial*)widget)->setValue(angleFlip(value\&.toInt()));
135             angleDialMapper\&.setMapping(widget, param\&.name);
136             connect(widget, SIGNAL(valueChanged(int)), &angleDialMapper, SLOT(map()));
137             break;
138         case AnimScript::Param::STRING:
139             widget = new QLineEdit(this);
140             ((QLineEdit*)widget)->setText(value\&.toString());
141             colSpan = 3;
142             connect(widget, SIGNAL(textEdited(const QString&)), &updateMapper, SLOT(map()));
143             break;
144         case AnimScript::Param::LABEL:
145             widget = new QLabel(this);
146             ((QLabel*)widget)->setText(param\&.prefix);
147             colSpan = 4;
148             break;
149         default:
150             break;
151         }
152         if(widget)
153             updateMapper\&.setMapping(widget, param\&.name);
154         if(param\&.type == AnimScript::Param::BOOL || param\&.type == AnimScript::Param::LABEL){
155             // Boolean values are placed on the left with no prefix or postfix
156             settingWidgets[param\&.name] = widget;
157             ui->settingsGrid->addWidget(widget, row, 3, 1, colSpan);
158         } else {
159             // Display the widget
160             if(widget){
161                 settingWidgets[param\&.name] = widget;
162                 ui->settingsGrid->addWidget(widget, row, 3, 1, colSpan);
163             }
164             // Angles additionally have a spin box
165             if(param\&.type == AnimScript::Param::ANGLE){
166                 QSpinBox* spinner = new QSpinBox(this);
167                 spinner->setMinimum(0);
168                 spinner->setMaximum(359);
169                 spinner->setWrapping(true);
170                 spinner->setSuffix("°");
171                 spinner->setValue(value\&.toInt());
172                 angleSpinners[param\&.name] = spinner;
173                 angleSpinnerMapper\&.setMapping(spinner, param\&.name);
174                 connect(spinner, SIGNAL(valueChanged(int)), &angleSpinnerMapper, SLOT(map()));
175                 ui->settingsGrid->addWidget(spinner, row, 4);
176                 colSpan = 2;
177             }
178             // Display postfix label on the right
179             ui->settingsGrid->addWidget(new QLabel(postfix, this), row, 3 + colSpan, 1, 4 - colSpan);
180             if(colSpan < 3 && !rSpacePlaced){
181                 // Add a spacer to compress short elements to the left
182                 ui->settingsGrid->addItem(new QSpacerItem(0, 0, QSizePolicy::Minimum), row, 4 + colSpan);
183                 rSpacePlaced = true;
184             }
185         }
186         row++;
187     }
188     // Add playback info at bottom
189     ui->settingsGrid->addItem(new QSpacerItem(0, 10, QSizePolicy::Fixed, QSizePolicy::Fixed), row++, 6);
190     ui->settingsGrid->addWidget(new QLabel("<b>Playback</b>", this), row++, 0, 1, 7);
191     ui->settingsGrid->addWidget(hLine(), row++, 0, 1, 7);
192     if(script->hasParam("duration")){
193         // Show duration spinner (if allowed)
194         lastDuration = anim->parameter("duration")\&.toDouble();
195         ui->settingsGrid->addWidget(new QLabel("Duration:", this), row, 1);
196         QDoubleSpinBox* spinner = new QDoubleSpinBox(this);
197         spinner->setDecimals(1);
198         spinner->setMinimum(0\&.1);
199         spinner->setValue(lastDuration);
200         connect(spinner, SIGNAL(valueChanged(double)), this, SLOT(newDuration(double)));
201         settingWidgets["duration"] = spinner;
202         ui->settingsGrid->addWidget(spinner, row, 3, 1, 1);
203         ui->settingsGrid->addWidget(new QLabel("seconds", this), row, 4, 1, 2);
204         row++;
205     }
206     // Show boxes for start with mode/with keypress
207     QCheckBox* check = new QCheckBox("Start with mode", this);
208     check->setChecked(anim->parameter("trigger")\&.toBool());
209     ui->settingsGrid->addWidget(check, row, 3, 1, 4);
210     settingWidgets["trigger"] = check;
211     connect(check, SIGNAL(stateChanged(int)), &updateMapper, SLOT(map()));
212     updateMapper\&.setMapping(check, "trigger");
213     row++;
214     check = new QCheckBox("Start with key press", this);
215     check->setChecked(anim->parameter("kptrigger")\&.toBool());
216     ui->settingsGrid->addWidget(check, row, 3, 1, 2);
217     settingWidgets["kptrigger"] = check;
218     connect(check, SIGNAL(stateChanged(int)), &updateMapper, SLOT(map()));
219     updateMapper\&.setMapping(check, "kptrigger");
220     // Add an option allowing the user to select keypress mode
221     QComboBox* combo = new QComboBox(this);
222     int selected = anim->parameter("kpmode")\&.toInt();
223     if(script->hasKeypress()){
224         // If the script supports keypresses, show the option to handle them that way (default)
225         combo->addItem("on pressed key");
226         combo->addItem("on whole keyboard");
227         combo->addItem("on keyboard (once)");
228     } else {
229         selected--;
230         // Otherwise, just show the choice of whether to start it every time or just once
231         combo->addItem("every time");
232         combo->addItem("only once");
233     }
234     if(selected < 0 || selected > combo->count())
235         selected = 0;
236     combo->setCurrentIndex(selected);
237     ui->settingsGrid->addWidget(combo, row, 5, 1, 2);
238     settingWidgets["kpmode"] = combo;
239     connect(combo, SIGNAL(activated(int)), &updateMapper, SLOT(map()));
240     updateMapper\&.setMapping(combo, "kpmode");
241     row++;
242 
243     // Add horizontal spacer to compress content to left
244     ui->settingsGrid->addItem(new QSpacerItem(0, 0, QSizePolicy::Expanding), 0, 6);
245     // Add vertical spacer to compress content to top
246     ui->settingsGrid->addItem(new QSpacerItem(0, 0, QSizePolicy::Minimum, QSizePolicy::Expanding), row, 0);
247 
248     // Add timing fields
249     settingWidgets["delay"] = ui->delayBox;
250     ui->delayBox->setValue(anim->parameter("delay")\&.toDouble());
251     settingWidgets["kpdelay"] = ui->kpDelayBox;
252     ui->kpDelayBox->setValue(anim->parameter("kpdelay")\&.toDouble());
253     settingWidgets["kpmodestop"] = ui->kpModeStopBox;
254     ui->kpModeStopBox->setChecked(anim->parameter("kpmodestop")\&.toBool());
255     connect(ui->kpModeStopBox, SIGNAL(clicked(bool)), &updateMapper, SLOT(map()));
256     updateMapper\&.setMapping(ui->kpModeStopBox, "kpmodestop");
257     settingWidgets["kprelease"] = ui->kpReleaseBox;
258     ui->kpReleaseBox->setChecked(anim->parameter("kprelease")\&.toBool());
259     if(anim->hasParameter("repeat")){
260         hasRepeat = true;
261         settingWidgets["repeat"] = ui->repeatBox;
262         ui->repeatBox->setValue(anim->parameter("repeat")\&.toDouble());
263         settingWidgets["kprepeat"] = ui->kpRepeatBox;
264         ui->kpRepeatBox->setValue(anim->parameter("kprepeat")\&.toDouble());
265         // If repeat is enabled, add repeat counts as integer values
266         // Mode repeat
267         ui->timeGrid->addWidget(new QLabel("Repeat:", this), 4, 1);
268         QSpinBox* spinner = new QSpinBox(this);
269         spinner->setMinimum(0);
270         spinner->setMaximum(1000000);
271         spinner->setValue(anim->parameter("stop")\&.toInt());
272         settingWidgets["stop"] = spinner;
273         connect(spinner, SIGNAL(valueChanged(int)), &updateMapper, SLOT(map()));
274         updateMapper\&.setMapping(spinner, "stop");
275         ui->timeGrid->addWidget(spinner, 4, 3);
276         ui->timeGrid->addWidget(new QLabel("times", this), 4, 4);
277         // KP repeat
278         ui->timeGrid->addWidget(new QLabel("Repeat:", this), 12, 1);
279         spinner = new QSpinBox(this);
280         spinner->setMinimum(0);
281         spinner->setMaximum(1000000);
282         spinner->setValue(anim->parameter("kpstop")\&.toInt());
283         settingWidgets["kpstop"] = spinner;
284         connect(spinner, SIGNAL(valueChanged(int)), &updateMapper, SLOT(map()));
285         updateMapper\&.setMapping(spinner, "kpstop");
286         ui->timeGrid->addWidget(spinner, 12, 3);
287         ui->timeGrid->addWidget(new QLabel("times", this), 12, 4);
288         // Infinite repeat toggles
289         stopCheck = new QCheckBox("Forever", this);
290         stopCheck->setChecked(anim->parameter("stop")\&.toInt() < 0);
291         ui->timeGrid->addWidget(stopCheck, 4, 5);
292         kpStopCheck = new QCheckBox("Forever", this);
293         connect(stopCheck, SIGNAL(clicked()), this, SLOT(updateStops()));
294         kpStopCheck->setChecked(anim->parameter("kpstop")\&.toInt() < 0);
295         ui->timeGrid->addWidget(kpStopCheck, 12, 5);
296         connect(kpStopCheck, SIGNAL(clicked()), this, SLOT(updateStops()));
297     } else {
298         hasRepeat = false;
299         // If repeat is not enabled, hide repeat-related fields
300         ui->repeatBox->setHidden(true);
301         ui->repeatLabel->setHidden(true);
302         ui->repeatLabel_2->setHidden(true);
303         ui->kpRepeatBox->setHidden(true);
304         ui->kpRepeatLabel->setHidden(true);
305         ui->kpRepeatLabel_2->setHidden(true);
306         // Add stop times as double values
307         // Stop time
308         QDoubleSpinBox* spinner = new QDoubleSpinBox(this);
309         spinner->setDecimals(1);
310         spinner->setMinimum(0\&.1);
311         spinner->setMaximum(24\&. * 60\&. * 60\&.);
312         double stop = anim->parameter("stop")\&.toDouble();
313         if(stop <= 0\&.)
314             spinner->setValue(lastDuration);
315         else
316             spinner->setValue(stop);
317         settingWidgets["stop"] = spinner;
318         connect(spinner, SIGNAL(valueChanged(double)), &updateMapper, SLOT(map()));
319         updateMapper\&.setMapping(spinner, "stop");
320         ui->timeGrid->addWidget(spinner, 4, 3);
321         ui->timeGrid->addWidget(new QLabel("seconds", this), 4, 4);
322         // KP stop time
323         spinner = new QDoubleSpinBox(this);
324         spinner->setDecimals(1);
325         spinner->setMinimum(0\&.1);
326         spinner->setMaximum(24\&. * 60\&. * 60\&.);
327         double kpstop = anim->parameter("kpstop")\&.toDouble();
328         if(kpstop <= 0\&.)
329             spinner->setValue(lastDuration);
330         else
331             spinner->setValue(kpstop);
332         settingWidgets["kpstop"] = spinner;
333         connect(spinner, SIGNAL(valueChanged(double)), &updateMapper, SLOT(map()));
334         updateMapper\&.setMapping(spinner, "kpstop");
335         ui->timeGrid->addWidget(spinner, 12, 3);
336         ui->timeGrid->addWidget(new QLabel("seconds", this), 12, 4);
337         // Infinite run toggles
338         stopCheck = new QCheckBox("Stop after:", this);
339         stopCheck->setChecked(stop > 0\&.);
340         ui->timeGrid->addWidget(stopCheck, 4, 1);
341         connect(stopCheck, SIGNAL(clicked()), this, SLOT(updateStops()));
342         kpStopCheck = new QCheckBox("Stop after:", this);
343         kpStopCheck->setChecked(kpstop > 0\&.);
344         ui->timeGrid->addWidget(kpStopCheck, 12, 1);
345         connect(kpStopCheck, SIGNAL(clicked()), this, SLOT(updateStops()));
346     }
347     updateStops();
348 
349     // Set script info UI
350     ui->sNameLabel->setText(script->name());
351     ui->sVerLabel->setText(script->version());
352     ui->sAuthorLabel->setText(script->author());
353     ui->sYearLabel->setText(script->year());
354     ui->sLicenseLabel->setText(script->license());
355     ui->sDescLabel->setText(script->description());
356 
357     // Lock dialog size
358     setFixedSize(minimumSize());
359 }
.fi
.SS "AnimSettingDialog::~AnimSettingDialog ()"

.PP
Definition at line 476 of file animsettingdialog\&.cpp\&.
.PP
References ui\&.
.PP
.nf
476                                      {
477     delete ui;
478 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void AnimSettingDialog::angleDialChanged (QStringname)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 389 of file animsettingdialog\&.cpp\&.
.PP
References angleFlip(), angleSpinners, name(), settingWidgets, and updateParam()\&.
.PP
Referenced by AnimSettingDialog()\&.
.PP
.nf
389                                                     {
390     // Dial changed; update spinner value
391     angleSpinners[name]->setValue(angleFlip(((QDial*)settingWidgets[name])->value()));
392     updateParam(name);
393 }
.fi
.SS "void AnimSettingDialog::angleSpinnerChanged (QStringname)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 395 of file animsettingdialog\&.cpp\&.
.PP
References angleFlip(), angleSpinners, settingWidgets, and updateParam()\&.
.PP
Referenced by AnimSettingDialog()\&.
.PP
.nf
395                                                        {
396     // Spinner changed; update dial value
397     ((QDial*)settingWidgets[name])->setValue(angleFlip(angleSpinners[name]->value()));
398     updateParam(name);
399 }
.fi
.SS "QFrame * AnimSettingDialog::hLine ()\fC [private]\fP"

.PP
Definition at line 480 of file animsettingdialog\&.cpp\&.
.PP
References frame\&.
.PP
Referenced by AnimSettingDialog()\&.
.PP
.nf
480                                 {
481     QFrame* frame = new QFrame(this);
482     frame->setFrameShape(QFrame::HLine);
483     frame->setFrameShadow(QFrame::Sunken);
484     return frame;
485 }
.fi
.SS "QString AnimSettingDialog::name () const"

.PP
Definition at line 472 of file animsettingdialog\&.cpp\&.
.PP
References Ui_AnimSettingDialog::animName, and ui\&.
.PP
Referenced by angleDialChanged(), and KbAnimWidget::on_propertyButton_clicked()\&.
.PP
.nf
472                                       {
473     return ui->animName->text();
474 }
.fi
.SS "void AnimSettingDialog::newDuration (doubleduration)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 361 of file animsettingdialog\&.cpp\&.
.PP
References lastDuration, settingWidgets, and updateParam()\&.
.PP
Referenced by AnimSettingDialog()\&.
.PP
.nf
361                                                   {
362     // Duration changed\&. Automatically fix Repeat and KP Repeat to the same values, if they matched before
363     QDoubleSpinBox* rep = (QDoubleSpinBox*)settingWidgets\&.value("repeat");
364     QDoubleSpinBox* kpRep = (QDoubleSpinBox*)settingWidgets\&.value("kprepeat");
365     if(rep && rep->value() == lastDuration)
366         rep->setValue(duration);
367     if(kpRep && kpRep->value() == lastDuration)
368         kpRep->setValue(duration);
369     lastDuration = duration;
370     updateParam("duration");
371     updateParam("repeat");
372     updateParam("kprepeat");
373 }
.fi
.SS "void AnimSettingDialog::on_delayBox_valueChanged (doublearg1)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 487 of file animsettingdialog\&.cpp\&.
.PP
References updateParam()\&.
.PP
.nf
487                                                            {
488     updateParam("delay");
489 }
.fi
.SS "void AnimSettingDialog::on_kpDelayBox_valueChanged (doublearg1)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 495 of file animsettingdialog\&.cpp\&.
.PP
References updateParam()\&.
.PP
.nf
495                                                              {
496     updateParam("kpdelay");
497 }
.fi
.SS "void AnimSettingDialog::on_kpReleaseBox_stateChanged (intarg1)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 503 of file animsettingdialog\&.cpp\&.
.PP
References updateParam()\&.
.PP
.nf
503                                                             {
504     updateParam("kprelease");
505 }
.fi
.SS "void AnimSettingDialog::on_kpRepeatBox_valueChanged (doublearg1)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 499 of file animsettingdialog\&.cpp\&.
.PP
References updateParam()\&.
.PP
.nf
499                                                               {
500     updateParam("kprepeat");
501 }
.fi
.SS "void AnimSettingDialog::on_repeatBox_valueChanged (doublearg1)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 491 of file animsettingdialog\&.cpp\&.
.PP
References updateParam()\&.
.PP
.nf
491                                                             {
492     updateParam("repeat");
493 }
.fi
.SS "void AnimSettingDialog::updateParam (QStringname)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 401 of file animsettingdialog\&.cpp\&.
.PP
References _anim, AnimScript::Param::AGRADIENT, AnimScript::Param::ANGLE, angleFlip(), AnimScript::Param::ARGB, AnimScript::Param::BOOL, ColorButton::color(), AnimScript::Param::DOUBLE, AnimScript::Param::GRADIENT, AnimScript::hasKeypress(), hasRepeat, kpStopCheck, AnimScript::Param::LONG, AnimScript::param(), KbAnim::parameter(), AnimScript::Param::RGB, KbAnim::script(), settingWidgets, stopCheck, AnimScript::Param::STRING, GradientButton::toString(), and AnimScript::Param::type\&.
.PP
Referenced by angleDialChanged(), angleSpinnerChanged(), AnimSettingDialog(), newDuration(), on_delayBox_valueChanged(), on_kpDelayBox_valueChanged(), on_kpReleaseBox_stateChanged(), on_kpRepeatBox_valueChanged(), on_repeatBox_valueChanged(), and updateStops()\&.
.PP
.nf
401                                                {
402     if(!settingWidgets\&.contains(name))
403         return;
404     // stop and kpstop have defeat switches
405     if((name == "stop" && stopCheck->isChecked() == hasRepeat)
406             || (name == "kpstop" && kpStopCheck->isChecked() == hasRepeat)){
407         _anim->parameter(name, -1);
408         return;
409     } else if(name == "kpmode"){
410         // kpmode uses a drop-down, and selection is inverted
411         QComboBox* widget = (QComboBox*)settingWidgets[name];
412         int selected = widget->currentIndex();
413         if(!_anim->script()->hasKeypress())
414             selected++;
415         _anim->parameter(name, selected);
416         return;
417     }
418     // Read value based on type
419     switch(_anim->script()->param(name)\&.type){
420     case AnimScript::Param::BOOL:{
421         QCheckBox* widget = (QCheckBox*)settingWidgets[name];
422         _anim->parameter(name, (int)widget->isChecked());
423         break;
424     }
425     case AnimScript::Param::LONG:{
426         QSpinBox* widget = (QSpinBox*)settingWidgets[name];
427         _anim->parameter(name, widget->value());
428         break;
429     }
430     case AnimScript::Param::DOUBLE:{
431         QDoubleSpinBox* widget = (QDoubleSpinBox*)settingWidgets[name];
432         _anim->parameter(name, widget->value());
433         break;
434     }
435     case AnimScript::Param::RGB:{
436         ColorButton* widget = (ColorButton*)settingWidgets[name];
437         QColor color = widget->color();
438         char hex[7];
439         snprintf(hex, sizeof(hex), "%02x%02x%02x", color\&.red(), color\&.green(), color\&.blue());
440         _anim->parameter(name, QString(hex));
441         break;
442     }
443     case AnimScript::Param::ARGB:{
444         ColorButton* widget = (ColorButton*)settingWidgets[name];
445         QColor color = widget->color();
446         char hex[9];
447         snprintf(hex, sizeof(hex), "%02x%02x%02x%02x", color\&.alpha(), color\&.red(), color\&.green(), color\&.blue());
448         _anim->parameter(name, QString(hex));
449         break;
450     }
451     case AnimScript::Param::GRADIENT:
452     case AnimScript::Param::AGRADIENT:{
453         GradientButton* widget = (GradientButton*)settingWidgets[name];
454         _anim->parameter(name, widget->toString());
455         break;
456     }
457     case AnimScript::Param::ANGLE:{
458         QDial* widget = (QDial*)settingWidgets[name];
459         _anim->parameter(name, angleFlip(widget->value()));
460         break;
461     }
462     case AnimScript::Param::STRING:{
463         QLineEdit* widget = (QLineEdit*)settingWidgets[name];
464         _anim->parameter(name, widget->text());
465         break;
466     }
467     default:
468         break;
469     }
470 }
.fi
.SS "void AnimSettingDialog::updateStops ()\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 375 of file animsettingdialog\&.cpp\&.
.PP
References hasRepeat, kpStopCheck, settingWidgets, stopCheck, and updateParam()\&.
.PP
Referenced by AnimSettingDialog()\&.
.PP
.nf
375                                    {
376     if(hasRepeat){
377         // When repeat is enabled, the check box is "repeat forever", so disable stop count if checked
378         settingWidgets\&.value("stop")->setDisabled(stopCheck->isChecked());
379         settingWidgets\&.value("kpstop")->setDisabled(kpStopCheck->isChecked());
380     } else {
381         // When repeat is disabled, the check box is "stop after", so disable stop count UNLESS checked
382         settingWidgets\&.value("stop")->setEnabled(stopCheck->isChecked());
383         settingWidgets\&.value("kpstop")->setEnabled(kpStopCheck->isChecked());
384     }
385     updateParam("stop");
386     updateParam("kpstop");
387 }
.fi
.SH "Field Documentation"
.PP 
.SS "\fBKbAnim\fP* AnimSettingDialog::_anim\fC [private]\fP"

.PP
Definition at line 32 of file animsettingdialog\&.h\&.
.PP
Referenced by updateParam()\&.
.SS "QSignalMapper AnimSettingDialog::angleDialMapper\fC [private]\fP"

.PP
Definition at line 38 of file animsettingdialog\&.h\&.
.PP
Referenced by AnimSettingDialog()\&.
.SS "QSignalMapper AnimSettingDialog::angleSpinnerMapper\fC [private]\fP"

.PP
Definition at line 38 of file animsettingdialog\&.h\&.
.PP
Referenced by AnimSettingDialog()\&.
.SS "QMap<QString, QSpinBox*> AnimSettingDialog::angleSpinners\fC [private]\fP"

.PP
Definition at line 37 of file animsettingdialog\&.h\&.
.PP
Referenced by angleDialChanged(), angleSpinnerChanged(), and AnimSettingDialog()\&.
.SS "bool AnimSettingDialog::hasRepeat\fC [private]\fP"

.PP
Definition at line 30 of file animsettingdialog\&.h\&.
.PP
Referenced by AnimSettingDialog(), updateParam(), and updateStops()\&.
.SS "QCheckBox * AnimSettingDialog::kpStopCheck\fC [private]\fP"

.PP
Definition at line 29 of file animsettingdialog\&.h\&.
.PP
Referenced by AnimSettingDialog(), updateParam(), and updateStops()\&.
.SS "double AnimSettingDialog::lastDuration\fC [private]\fP"

.PP
Definition at line 33 of file animsettingdialog\&.h\&.
.PP
Referenced by AnimSettingDialog(), and newDuration()\&.
.SS "QMap<QString, \fBQWidget\fP*> AnimSettingDialog::settingWidgets\fC [private]\fP"

.PP
Definition at line 34 of file animsettingdialog\&.h\&.
.PP
Referenced by angleDialChanged(), angleSpinnerChanged(), AnimSettingDialog(), newDuration(), updateParam(), and updateStops()\&.
.SS "QCheckBox* AnimSettingDialog::stopCheck\fC [private]\fP"

.PP
Definition at line 29 of file animsettingdialog\&.h\&.
.PP
Referenced by AnimSettingDialog(), updateParam(), and updateStops()\&.
.SS "\fBUi::AnimSettingDialog\fP* AnimSettingDialog::ui\fC [private]\fP"

.PP
Definition at line 28 of file animsettingdialog\&.h\&.
.PP
Referenced by AnimSettingDialog(), name(), and ~AnimSettingDialog()\&.
.SS "QSignalMapper AnimSettingDialog::updateMapper\fC [private]\fP"

.PP
Definition at line 35 of file animsettingdialog\&.h\&.
.PP
Referenced by AnimSettingDialog()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for ckb-next from the source code\&.
