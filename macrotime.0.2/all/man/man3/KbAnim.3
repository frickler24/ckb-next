.TH "KbAnim" 3 "Mon Jun 5 2017" "Version beta-v0.2.8+testing at branch macrotime.0.2" "ckb-next" \" -*- nroff -*-
.ad l
.nh
.SH NAME
KbAnim \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <src/ckb/kbanim\&.h>\fP
.PP
Inherits \fBQObject\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBMode\fP { \fBNormal\fP, \fBAdd\fP, \fBSubtract\fP, \fBMultiply\fP, \fBDivide\fP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBKbAnim\fP (\fBQObject\fP *parent, const \fBKeyMap\fP &\fBmap\fP, const QUuid id, \fBCkbSettings\fP &settings)"
.br
.ti -1c
.RI "void \fBsave\fP (\fBCkbSettings\fP &settings)"
.br
.ti -1c
.RI "bool \fBneedsSave\fP () const "
.br
.ti -1c
.RI "\fBKbAnim\fP (\fBQObject\fP *parent, const \fBKeyMap\fP &\fBmap\fP, const QString &\fBname\fP, const QStringList &\fBkeys\fP, const \fBAnimScript\fP *\fBscript\fP)"
.br
.ti -1c
.RI "\fBKbAnim\fP (\fBQObject\fP *parent, const \fBKeyMap\fP &\fBmap\fP, const \fBKbAnim\fP &other)"
.br
.ti -1c
.RI "const \fBKeyMap\fP & \fBmap\fP ()"
.br
.ti -1c
.RI "void \fBmap\fP (const \fBKeyMap\fP &newMap)"
.br
.ti -1c
.RI "const QStringList & \fBkeys\fP ()"
.br
.ti -1c
.RI "void \fBkeys\fP (const QStringList &newKeys)"
.br
.ti -1c
.RI "bool \fBhasParameter\fP (const QString &\fBname\fP) const "
.br
.ti -1c
.RI "QVariant \fBparameter\fP (const QString &\fBname\fP) const "
.br
.ti -1c
.RI "void \fBparameter\fP (const QString &\fBname\fP, const QVariant &value)"
.br
.ti -1c
.RI "void \fBcommitParams\fP ()"
.br
.ti -1c
.RI "void \fBresetParams\fP ()"
.br
.ti -1c
.RI "void \fBreInit\fP ()"
.br
.ti -1c
.RI "void \fBtrigger\fP (quint64 timestamp, bool ignoreParameter=false)"
.br
.ti -1c
.RI "void \fBkeypress\fP (const QString &\fBkey\fP, bool pressed, quint64 timestamp)"
.br
.ti -1c
.RI "void \fBstop\fP ()"
.br
.ti -1c
.RI "bool \fBisActive\fP () const "
.br
.ti -1c
.RI "bool \fBisRunning\fP () const "
.br
.ti -1c
.RI "void \fBblend\fP (\fBColorMap\fP &animMap, quint64 timestamp)"
.br
.ti -1c
.RI "const QUuid & \fBguid\fP () const "
.br
.ti -1c
.RI "void \fBnewId\fP ()"
.br
.ti -1c
.RI "const QString & \fBname\fP () const "
.br
.ti -1c
.RI "void \fBname\fP (const QString &newName)"
.br
.ti -1c
.RI "float \fBopacity\fP () const "
.br
.ti -1c
.RI "void \fBopacity\fP (float newOpacity)"
.br
.ti -1c
.RI "\fBMode\fP \fBmode\fP () const "
.br
.ti -1c
.RI "void \fBmode\fP (\fBMode\fP newMode)"
.br
.ti -1c
.RI "const \fBAnimScript\fP * \fBscript\fP () const "
.br
.ti -1c
.RI "const QString & \fBscriptName\fP () const "
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "QMap< QString, QVariant > \fBeffectiveParams\fP ()"
.br
.ti -1c
.RI "void \fBupdateParams\fP ()"
.br
.ti -1c
.RI "void \fBcatchUp\fP (quint64 timestamp)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBAnimScript\fP * \fB_script\fP"
.br
.ti -1c
.RI "QUuid \fB_scriptGuid\fP"
.br
.ti -1c
.RI "QString \fB_scriptName\fP"
.br
.ti -1c
.RI "\fBKeyMap\fP \fB_map\fP"
.br
.ti -1c
.RI "QStringList \fB_keys\fP"
.br
.ti -1c
.RI "QMap< QString, QVariant > \fB_parameters\fP"
.br
.ti -1c
.RI "QMap< QString, QVariant > \fB_tempParameters\fP"
.br
.ti -1c
.RI "QString \fBrepeatKey\fP"
.br
.ti -1c
.RI "quint64 \fBrepeatTime\fP"
.br
.ti -1c
.RI "quint64 \fBkpRepeatTime\fP"
.br
.ti -1c
.RI "quint64 \fBstopTime\fP"
.br
.ti -1c
.RI "quint64 \fBkpStopTime\fP"
.br
.ti -1c
.RI "int \fBrepeatMsec\fP"
.br
.ti -1c
.RI "int \fBkpRepeatMsec\fP"
.br
.ti -1c
.RI "QUuid \fB_guid\fP"
.br
.ti -1c
.RI "QString \fB_name\fP"
.br
.ti -1c
.RI "float \fB_opacity\fP"
.br
.ti -1c
.RI "\fBMode\fP \fB_mode\fP"
.br
.ti -1c
.RI "bool \fB_isActive\fP"
.br
.ti -1c
.RI "bool \fB_isActiveKp\fP"
.br
.ti -1c
.RI "bool \fB_needsSave\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 11 of file kbanim\&.h\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBKbAnim::Mode\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINormal \fP\fP
.TP
\fB\fIAdd \fP\fP
.TP
\fB\fISubtract \fP\fP
.TP
\fB\fIMultiply \fP\fP
.TP
\fB\fIDivide \fP\fP
.PP
Definition at line 17 of file kbanim\&.h\&.
.PP
.nf
17               {
18         Normal,
19         Add,
20         Subtract,
21         Multiply,
22         Divide
23     };
.fi
.SH "Constructor & Destructor Documentation"
.PP 
.SS "KbAnim::KbAnim (\fBQObject\fP *parent, const \fBKeyMap\fP &map, const QUuidid, \fBCkbSettings\fP &settings)"

.PP
Definition at line 8 of file kbanim\&.cpp\&.
.PP
References _guid, _keys, _map, _mode, _name, _opacity, _parameters, _script, _scriptGuid, _scriptName, CkbSettings::childKeys(), AnimScript::copy(), AnimScript::Param::defaultValue, KeyMap::fromStorage(), AnimScript::Param::INVALID, AnimScript::Param::LABEL, AnimScript::Param::name, AnimScript::name(), name(), Normal, AnimScript::param(), AnimScript::paramIterator(), reInit(), AnimScript::Param::type, and CkbSettings::value()\&.
.PP
.nf
8                                                                                         :
9     QObject(parent), _script(0), _map(map),
10     repeatTime(0), kpRepeatTime(0), stopTime(0), kpStopTime(0), repeatMsec(0), kpRepeatMsec(0),
11     _guid(id), _isActive(false), _isActiveKp(false), _needsSave(false)
12 {
13     SGroup group(settings, _guid\&.toString()\&.toUpper());
14     _keys = settings\&.value("Keys")\&.toStringList();
15     // Convert key list from storage names if needed
16     if(!settings\&.value("UseRealNames")\&.toBool()){
17         QMutableListIterator<QString> i(_keys);
18         while(i\&.hasNext()){
19             i\&.next();
20             QString& key = i\&.value();
21             key = _map\&.fromStorage(key);
22         }
23     }
24     _name = settings\&.value("Name")\&.toString()\&.trimmed();
25     _opacity = settings\&.value("Opacity")\&.toString()\&.toDouble();
26     if(_opacity < 0\&.)
27         _opacity = 0\&.;
28     else if(_opacity > 1\&.)
29         _opacity = 1\&.;
30     bool modeOk = false;
31     _mode = (Mode)metaObject()->enumerator(metaObject()->indexOfEnumerator("Mode"))\&.keysToValue(settings\&.value("BlendMode")\&.toString()\&.toLatin1(), &modeOk);
32     if(!modeOk)
33         _mode = Normal;
34     _scriptName = settings\&.value("ScriptName")\&.toString()\&.trimmed();
35     _scriptGuid = settings\&.value("ScriptGuid")\&.toString();
36     {
37         SGroup group(settings, "Parameters");
38         foreach(const QString& param, settings\&.childKeys())
39             _parameters[param\&.toLower()] = settings\&.value(param);
40     }
41 
42     if(!_scriptGuid\&.isNull()){
43         _script = AnimScript::copy(this, _scriptGuid);
44         if(_script){
45             // Remove nonexistant parameters
46             foreach(const QString& name, _parameters\&.keys()){
47                 AnimScript::Param param = _script->param(name);
48                 if(param\&.type == AnimScript::Param::INVALID || param\&.type == AnimScript::Param::LABEL)
49                     _parameters\&.remove(name);
50             }
51             // Add defaults for unset parameters
52             QListIterator<AnimScript::Param> i = _script->paramIterator();
53             while(i\&.hasNext()){
54                 AnimScript::Param param = i\&.next();
55                 if(!_parameters\&.contains(param\&.name) && param\&.type != AnimScript::Param::LABEL)
56                     _parameters[param\&.name] = param\&.defaultValue;
57             }
58             _scriptName = _script->name();
59             reInit();
60         }
61     }
62 }
.fi
.SS "KbAnim::KbAnim (\fBQObject\fP *parent, const \fBKeyMap\fP &map, const QString &name, const QStringList &keys, const \fBAnimScript\fP *script)"

.PP
Definition at line 84 of file kbanim\&.cpp\&.
.PP
References _parameters, _script, _scriptGuid, _scriptName, AnimScript::Param::defaultValue, AnimScript::guid(), AnimScript::Param::LABEL, AnimScript::Param::name, AnimScript::name(), AnimScript::paramIterator(), reInit(), and AnimScript::Param::type\&.
.PP
.nf
84                                                                                                                          :
85     QObject(parent),
86     _script(AnimScript::copy(this, script->guid())), _map(map), _keys(keys),
87     repeatTime(0), kpRepeatTime(0), stopTime(0), kpStopTime(0), repeatMsec(0), kpRepeatMsec(0),
88     _guid(QUuid::createUuid()), _name(name), _opacity(1\&.), _mode(Normal), _isActive(false), _isActiveKp(false), _needsSave(true)
89 {
90     if(_script){
91         // Set default parameters
92         QListIterator<AnimScript::Param> i = _script->paramIterator();
93         while(i\&.hasNext()){
94             AnimScript::Param param = i\&.next();
95             if(param\&.type != AnimScript::Param::LABEL)
96                 _parameters[param\&.name] = param\&.defaultValue;
97         }
98         _scriptGuid = script->guid();
99         _scriptName = script->name();
100         reInit();
101     }
102 }
.fi
.SS "KbAnim::KbAnim (\fBQObject\fP *parent, const \fBKeyMap\fP &map, const \fBKbAnim\fP &other)"

.PP
Definition at line 104 of file kbanim\&.cpp\&.
.PP
References reInit()\&.
.PP
.nf
104                                                                       :
105     QObject(parent),
106     _script(AnimScript::copy(this, other\&.script()->guid())), _scriptGuid(_script->guid()), _scriptName(_script->name()),
107     _map(map), _keys(other\&._keys), _parameters(other\&._parameters),
108     repeatTime(0), kpRepeatTime(0), stopTime(0), kpStopTime(0), repeatMsec(0), kpRepeatMsec(0),
109     _guid(other\&._guid), _name(other\&._name), _opacity(other\&._opacity), _mode(other\&._mode), _isActive(false), _isActiveKp(false), _needsSave(true)
110 {
111     reInit();
112 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void KbAnim::blend (\fBColorMap\fP &animMap, quint64timestamp)"

.PP
Definition at line 365 of file kbanim\&.cpp\&.
.PP
References _mode, _opacity, _script, catchUp(), ColorMap::colors(), AnimScript::colors(), ColorMap::count(), AnimScript::frame(), and functions\&.
.PP
Referenced by KbLight::frameUpdate()\&.
.PP
.nf
365                                                       {
366     if(!_script)
367         return;
368 
369     // Fetch the next frame from the script
370     catchUp(timestamp);
371     _script->frame(timestamp);
372 
373     // Blend the script's map with the current map
374     int blendMode = (int)_mode;
375     blendFunc blend = functions[blendMode];
376     float fOpacity = _opacity / 255\&.f;  // save some math by pre-dividing the 255 for qAlpha
377 
378     const ColorMap& scriptMap = _script->colors();
379     int count = animMap\&.count();
380     if(scriptMap\&.count() != count){
381         qDebug() << "Script map didn't match base map (" << count << " vs " << scriptMap\&.count() << ")\&. This should never happen\&.";
382         return;
383     }
384     QRgb* background = animMap\&.colors();
385     const QRgb* foreground = scriptMap\&.colors();
386     for(int i = 0; i < count; i++){
387         // Mix the colors in with the color map according to blend mode and alpha
388         QRgb& bg = background[i];
389         QRgb fg = foreground[i];
390         int alpha = qAlpha(fg);
391         if(alpha == 0)
392             continue;
393         if(blendMode == 0){
394             // Blend: normal
395             // This is the most common use case and it requires much less arithmetic
396             if(alpha == 255){
397                 bg = fg;
398             } else {
399                 float r = qRed(bg), g = qGreen(bg), b = qBlue(bg);
400                 float a = alpha * fOpacity;
401                 r = r * (1\&.f - a) + qRed(fg) * a;
402                 g = g * (1\&.f - a) + qGreen(fg) * a;
403                 b = b * (1\&.f - a) + qBlue(fg) * a;
404                 bg = qRgb(round(r), round(g), round(b));
405             }
406         } else {
407             // Use blend function
408             float r = qRed(bg) / 255\&.f, g = qGreen(bg) / 255\&.f, b = qBlue(bg) / 255\&.f;
409             float a = alpha * fOpacity;
410             r = r * (1\&.f - a) + blend(r, qRed(fg) / 255\&.f) * a;
411             g = g * (1\&.f - a) + blend(g, qGreen(fg) / 255\&.f) * a;
412             b = b * (1\&.f - a) + blend(b, qBlue(fg) / 255\&.f) * a;
413             bg = qRgb(round(r * 255\&.f), round(g * 255\&.f), round(b * 255\&.f));
414         }
415     }
416 }
.fi
.SS "void KbAnim::catchUp (quint64timestamp)\fC [private]\fP"

.PP
Definition at line 166 of file kbanim\&.cpp\&.
.PP
References _isActive, _isActiveKp, _script, effectiveParams(), AnimScript::end(), AnimScript::keypress(), kpRepeatMsec, kpRepeatTime, kpStopTime, repeatKey, repeatMsec, repeatTime, AnimScript::retrigger(), and stopTime\&.
.PP
Referenced by blend(), keypress(), and trigger()\&.
.PP
.nf
166                                      {
167     QMap<QString, QVariant> parameters = effectiveParams();
168     // Stop the animation if its time has run out
169     if(stopTime != 0 && timestamp >= stopTime){
170         repeatMsec = repeatTime = 0;
171         if(!parameters\&.contains("repeat")){
172             // If repeats aren't allowed, stop the animation entirely
173             _script->end();
174             _isActive = false;
175             return;
176         } else
177             // Otherwise, simply stop repeating
178             stopTime = 0;
179     }
180     if(kpStopTime != 0 && timestamp >= kpStopTime){
181         kpRepeatMsec = kpRepeatTime = 0;
182         if(!parameters\&.contains("kprepeat")){
183             _script->end();
184             _isActiveKp = false;
185             return;
186         } else
187             kpStopTime = 0;
188     }
189 
190     // Restart (or start, if there was a delay) the animation if its repeat time is up
191     while(repeatTime > 0 && timestamp >= repeatTime){
192         _script->retrigger(repeatTime);
193         if(repeatMsec <= 0){
194             repeatTime = 0;
195             break;
196         }
197         repeatTime += repeatMsec;
198     }
199     while(kpRepeatTime > 0 && timestamp >= kpRepeatTime){
200         _script->keypress(repeatKey, 1, kpRepeatTime);
201         if(kpRepeatMsec <= 0){
202             kpRepeatTime = 0;
203             break;
204         }
205         kpRepeatTime += kpRepeatMsec;
206     }
207 }
.fi
.SS "void KbAnim::commitParams ()"

.PP
Definition at line 121 of file kbanim\&.cpp\&.
.PP
References _needsSave, _parameters, _tempParameters, and effectiveParams()\&.
.PP
Referenced by KbLight::addAnim(), KbAnimWidget::on_propertyButton_clicked(), and KbLight::previewAnim()\&.
.PP
.nf
121                          {
122     _needsSave = true;
123     _parameters = effectiveParams();
124     _tempParameters\&.clear();
125 }
.fi
.SS "QMap< QString, QVariant > KbAnim::effectiveParams ()\fC [private]\fP"

.PP
Definition at line 138 of file kbanim\&.cpp\&.
.PP
References _parameters, and _tempParameters\&.
.PP
Referenced by catchUp(), commitParams(), keypress(), reInit(), trigger(), and updateParams()\&.
.PP
.nf
138                                                {
139     QMap<QString, QVariant> res = _parameters;
140     // Apply all uncommited parameters
141     QMapIterator<QString, QVariant> i(_tempParameters);
142     while(i\&.hasNext()){
143         i\&.next();
144         res[i\&.key()] = i \&.value();
145     }
146     return res;
147 }
.fi
.SS "const QUuid& KbAnim::guid () const\fC [inline]\fP"

.PP
Definition at line 71 of file kbanim\&.h\&.
.PP
References _guid\&.
.PP
Referenced by KbAnimWidget::addAnim(), RebindWidget::applyChanges(), KbLight::findAnim(), KbAnimWidget::on_deleteButton_clicked(), KbAnimWidget::refreshList(), and KbLight::save()\&.
.PP
.nf
71 { return _guid; }
.fi
.SS "bool KbAnim::hasParameter (const QString &name) const\fC [inline]\fP"

.PP
Definition at line 44 of file kbanim\&.h\&.
.PP
References _parameters\&.
.PP
Referenced by AnimSettingDialog::AnimSettingDialog()\&.
.PP
.nf
44 { return _parameters\&.contains(name); }
.fi
.SS "bool KbAnim::isActive () const\fC [inline]\fP"

.PP
Definition at line 63 of file kbanim\&.h\&.
.PP
References _isActive, and _isActiveKp\&.
.PP
Referenced by KeyAction::keyEvent(), and keypress()\&.
.PP
.nf
63 { return _isActive || _isActiveKp; }
.fi
.SS "bool KbAnim::isRunning () const"

.PP
Definition at line 325 of file kbanim\&.cpp\&.
.PP
References _script, and AnimScript::hasFrame()\&.
.PP
Referenced by KbLight::isStarted()\&.
.PP
.nf
325                              {
326     if(!_script)
327         return true;    // If the script wasn't loaded, pretend it's running anyway so it won't lock up
328     return _script->hasFrame();
329 }
.fi
.SS "void KbAnim::keypress (const QString &key, boolpressed, quint64timestamp)"

.PP
Definition at line 250 of file kbanim\&.cpp\&.
.PP
References _isActive, _isActiveKp, _script, catchUp(), effectiveParams(), AnimScript::frame(), isActive(), AnimScript::keypress(), kpRepeatMsec, kpRepeatTime, kpStopTime, repeatKey, repeatMsec, repeatTime, stop(), AnimScript::stop(), and stopTime\&.
.PP
Referenced by KbLight::animKeypress()\&.
.PP
.nf
250                                                                         {
251     if(!_script)
252         return;
253     QMap<QString, QVariant> parameters = effectiveParams();
254     if(pressed && parameters\&.value("kpmodestop")\&.toBool()){
255         // If stop on key press is enabled, stop mode-wide animation
256         catchUp(timestamp);
257         _script->stop(timestamp);
258         stopTime = repeatTime = repeatMsec = 0;
259         _isActive = false;
260     } else {
261         if(!parameters\&.value("kptrigger")\&.toBool())
262             return;
263         catchUp(timestamp);
264     }
265 
266     if(pressed){
267         // Key pressed
268         _isActiveKp = true;
269         if(parameters\&.value("kpmode", 0)\&.toInt() == 2 && isActive())
270             // If mode is start once and a key has already been pressed, do nothing
271             return;
272         int delay = round(parameters\&.value("kpdelay")\&.toDouble() * 1000\&.);
273         if(delay > 0){
274             // If delay is enabled, wait to trigger the event
275             timestamp += delay;
276             kpRepeatTime = timestamp;
277         } else
278             _script->keypress(key, pressed, timestamp);
279 
280         int repeat = round(parameters\&.value("kprepeat")\&.toDouble() * 1000\&.);
281         if(repeat <= 0){
282             // If no repeat allowed, calculate stop time in seconds
283             kpRepeatMsec = -1;
284             double stop = parameters\&.value("kpstop")\&.toDouble();
285             if(stop <= 0\&.)
286                 kpStopTime = 0;
287             else
288                 kpStopTime = timestamp + round(stop * 1000\&.);
289         } else {
290             // If repeat is allowed, calculate stop time in repetitions
291             kpRepeatMsec = repeat;
292             if(delay <= 0)
293                 kpRepeatTime = timestamp + repeat;
294             int stop = parameters\&.value("kpstop")\&.toInt();
295             if(stop < 0)
296                 kpStopTime = 0;
297             else
298                 kpStopTime = timestamp + repeat * (1 + stop);
299         }
300         repeatKey = key;
301     } else {
302         // Key released
303         _isActiveKp = false;
304         _script->keypress(key, pressed, timestamp);
305         if(parameters\&.value("kprelease")\&.toBool())
306             // Stop repeating keypress if "Stop on key release" is enabled
307             kpStopTime = timestamp;
308     }
309     _script->frame(timestamp);
310 }
.fi
.SS "const QStringList& KbAnim::keys ()\fC [inline]\fP"

.PP
Definition at line 40 of file kbanim\&.h\&.
.PP
References _keys\&.
.PP
Referenced by KbLight::animKeypress(), KbLightWidget::changeAnim(), KbAnimWidget::on_keyButton_clicked(), and KbAnimWidget::setCurrent()\&.
.PP
.nf
40 { return _keys; }
.fi
.SS "void KbAnim::keys (const QStringList &newKeys)"

.PP
Definition at line 161 of file kbanim\&.cpp\&.
.PP
References _keys, and reInit()\&.
.PP
.nf
161                                            {
162     _keys = newKeys;
163     reInit();
164 }
.fi
.SS "const \fBKeyMap\fP& KbAnim::map ()\fC [inline]\fP"

.PP
Definition at line 37 of file kbanim\&.h\&.
.PP
References _map\&.
.PP
Referenced by KbLight::map()\&.
.PP
.nf
37 { return _map; }
.fi
.SS "void KbAnim::map (const \fBKeyMap\fP &newMap)"

.PP
Definition at line 156 of file kbanim\&.cpp\&.
.PP
References _map, and reInit()\&.
.PP
.nf
156                                     {
157     _map = newMap;
158     reInit();
159 }
.fi
.SS "\fBMode\fP KbAnim::mode () const\fC [inline]\fP"

.PP
Definition at line 77 of file kbanim\&.h\&.
.PP
References _mode\&.
.PP
Referenced by KbAnimWidget::on_blendBox_activated(), and KbAnimWidget::setCurrent()\&.
.PP
.nf
77 { return _mode; }
.fi
.SS "void KbAnim::mode (\fBMode\fPnewMode)\fC [inline]\fP"

.PP
Definition at line 78 of file kbanim\&.h\&.
.PP
References _mode, and _needsSave\&.
.PP
.nf
78 { _needsSave = true; _mode = newMode; }
.fi
.SS "const QString& KbAnim::name () const\fC [inline]\fP"

.PP
Definition at line 73 of file kbanim\&.h\&.
.PP
References _name\&.
.PP
Referenced by KbAnimWidget::addAnim(), AnimSettingDialog::AnimSettingDialog(), KbAnim(), KbAnimWidget::on_animList_itemChanged(), KbAnimWidget::on_nameBox_textEdited(), parameter(), KbAnimWidget::refreshList(), KbAnimWidget::setCurrent(), and RebindWidget::setSelection()\&.
.PP
.nf
73 { return _name; }
.fi
.SS "void KbAnim::name (const QString &newName)\fC [inline]\fP"

.PP
Definition at line 74 of file kbanim\&.h\&.
.PP
References _name, and _needsSave\&.
.PP
.nf
74 { _needsSave = true; _name = newName; }
.fi
.SS "bool KbAnim::needsSave () const\fC [inline]\fP"

.PP
Definition at line 29 of file kbanim\&.h\&.
.PP
References _needsSave\&.
.PP
Referenced by KbLight::needsSave()\&.
.PP
.nf
29 { return _needsSave; }
.fi
.SS "void KbAnim::newId ()\fC [inline]\fP"

.PP
Definition at line 72 of file kbanim\&.h\&.
.PP
References _guid, and _needsSave\&.
.PP
Referenced by KbLight::duplicateAnim(), and KbMode::newId()\&.
.PP
.nf
72 { _needsSave = true; _guid = QUuid::createUuid(); }
.fi
.SS "float KbAnim::opacity () const\fC [inline]\fP"

.PP
Definition at line 75 of file kbanim\&.h\&.
.PP
References _opacity\&.
.PP
Referenced by KbAnimWidget::on_opacityBox_valueChanged(), and KbAnimWidget::setCurrent()\&.
.PP
.nf
75 { return _opacity; }
.fi
.SS "void KbAnim::opacity (floatnewOpacity)\fC [inline]\fP"

.PP
Definition at line 76 of file kbanim\&.h\&.
.PP
References _needsSave, and _opacity\&.
.PP
.nf
76 { _needsSave = true; _opacity = newOpacity; }
.fi
.SS "QVariant KbAnim::parameter (const QString &name) const\fC [inline]\fP"

.PP
Definition at line 45 of file kbanim\&.h\&.
.PP
References _parameters\&.
.PP
Referenced by KbLight::addAnim(), AnimSettingDialog::AnimSettingDialog(), KbLight::previewAnim(), and AnimSettingDialog::updateParam()\&.
.PP
.nf
45 { return _parameters\&.value(name); }
.fi
.SS "void KbAnim::parameter (const QString &name, const QVariant &value)"

.PP
Definition at line 114 of file kbanim\&.cpp\&.
.PP
References _script, _tempParameters, AnimScript::hasParam(), name(), and updateParams()\&.
.PP
.nf
114                                                                 {
115     if(!_script->hasParam(name))
116         return;
117     _tempParameters[name] = value;
118     updateParams();
119 }
.fi
.SS "void KbAnim::reInit ()"

.PP
Definition at line 149 of file kbanim\&.cpp\&.
.PP
References _isActive, _isActiveKp, _keys, _map, _script, effectiveParams(), AnimScript::init(), and repeatKey\&.
.PP
Referenced by KbAnim(), keys(), map(), KbAnimWidget::on_propertyButton_clicked(), and KbLight::previewAnim()\&.
.PP
.nf
149                    {
150     if(_script)
151         _script->init(_map, _keys, effectiveParams());
152     repeatKey = "";
153     _isActive = _isActiveKp = false;
154 }
.fi
.SS "void KbAnim::resetParams ()"

.PP
Definition at line 127 of file kbanim\&.cpp\&.
.PP
References _tempParameters, and updateParams()\&.
.PP
Referenced by KbAnimWidget::on_propertyButton_clicked()\&.
.PP
.nf
127                         {
128     _tempParameters\&.clear();
129     updateParams();
130 }
.fi
.SS "void KbAnim::save (\fBCkbSettings\fP &settings)"

.PP
Definition at line 64 of file kbanim\&.cpp\&.
.PP
References _guid, _keys, _mode, _name, _needsSave, _opacity, _parameters, _scriptGuid, _scriptName, CkbSettings::beginGroup(), CkbSettings::endGroup(), and CkbSettings::setValue()\&.
.PP
Referenced by KbLight::save()\&.
.PP
.nf
64                                       {
65     _needsSave = false;
66     settings\&.beginGroup(_guid\&.toString()\&.toUpper());
67     settings\&.setValue("UseRealNames", true);
68     settings\&.setValue("Keys", _keys);
69     settings\&.setValue("Name", _name);
70     settings\&.setValue("Opacity", QString::number(_opacity));
71     settings\&.setValue("BlendMode", metaObject()->enumerator(metaObject()->indexOfEnumerator("Mode"))\&.valueToKey(_mode));
72     settings\&.setValue("ScriptName", _scriptName);
73     settings\&.setValue("ScriptGuid", _scriptGuid\&.toString()\&.toUpper());
74     settings\&.beginGroup("Parameters");
75     QMapIterator<QString, QVariant> i(_parameters);
76     while(i\&.hasNext()){
77         i\&.next();
78         settings\&.setValue(i\&.key(), i\&.value());
79     }
80     settings\&.endGroup();
81     settings\&.endGroup();
82 }
.fi
.SS "const \fBAnimScript\fP* KbAnim::script () const\fC [inline]\fP"

.PP
Definition at line 81 of file kbanim\&.h\&.
.PP
References _script\&.
.PP
Referenced by AnimSettingDialog::AnimSettingDialog(), KbAnimWidget::setCurrent(), and AnimSettingDialog::updateParam()\&.
.PP
.nf
81 { return _script; }
.fi
.SS "const QString& KbAnim::scriptName () const\fC [inline]\fP"

.PP
Definition at line 82 of file kbanim\&.h\&.
.PP
References _scriptName\&.
.PP
Referenced by AnimSettingDialog::AnimSettingDialog(), and KbAnimWidget::setCurrent()\&.
.PP
.nf
82 { return _scriptName; }
.fi
.SS "void KbAnim::stop ()"

.PP
Definition at line 312 of file kbanim\&.cpp\&.
.PP
References _isActive, _isActiveKp, _script, AnimScript::end(), kpRepeatMsec, kpRepeatTime, kpStopTime, repeatKey, repeatMsec, repeatTime, and stopTime\&.
.PP
Referenced by KbLight::addAnim(), KbLight::close(), KbLight::duplicateAnim(), KeyAction::keyEvent(), keypress(), KbLight::restartAnimation(), and trigger()\&.
.PP
.nf
312                  {
313     if(_script)
314         _script->end();
315     repeatTime = 0;
316     kpRepeatTime = 0;
317     repeatMsec = 0;
318     kpRepeatMsec = 0;
319     stopTime = 0;
320     kpStopTime = 0;
321     repeatKey = "";
322     _isActive = _isActiveKp = false;
323 }
.fi
.SS "void KbAnim::trigger (quint64timestamp, boolignoreParameter = \fCfalse\fP)"

.PP
Definition at line 209 of file kbanim\&.cpp\&.
.PP
References _isActive, _script, catchUp(), effectiveParams(), AnimScript::frame(), repeatMsec, repeatTime, AnimScript::retrigger(), stop(), and stopTime\&.
.PP
Referenced by KbLight::addAnim(), KbLight::duplicateAnim(), KeyAction::keyEvent(), KbLight::open(), KbLight::previewAnim(), and KbLight::restartAnimation()\&.
.PP
.nf
209                                                            {
210     if(!_script)
211         return;
212     QMap<QString, QVariant> parameters = effectiveParams();
213 
214     catchUp(timestamp);
215     if(parameters\&.value("trigger")\&.toBool() || ignoreParameter){
216         _isActive = true;
217         int delay = round(parameters\&.value("delay")\&.toDouble() * 1000\&.);
218         if(delay > 0){
219             // If delay is enabled, wait to trigger the event
220             timestamp += delay;
221             repeatTime = timestamp;
222         } else
223             _script->retrigger(timestamp, true);
224 
225         int repeat = round(parameters\&.value("repeat")\&.toDouble() * 1000\&.);
226         if(repeat <= 0){
227             // If no repeat allowed, calculate stop time in seconds
228             repeatMsec = -1;
229             double stop = parameters\&.value("stop")\&.toDouble();
230             if(stop <= 0)
231                 stopTime = 0;
232             else
233                 stopTime = timestamp + round(stop * 1000\&.);
234         } else {
235             // If repeat is allowed, calculate stop time in repetitions
236             repeatMsec = repeat;
237             if(delay <= 0)
238                 repeatTime = timestamp + repeat;
239             int stop = parameters\&.value("stop")\&.toInt();
240             if(stop < 0)
241                 stopTime = 0;
242             else
243                 stopTime = timestamp + repeat * (1 + stop);
244         }
245     }
246     // Ask the script for a frame even if we didn't do anything here\&. This way ckb knows the script is responding\&.
247     _script->frame(timestamp);
248 }
.fi
.SS "void KbAnim::updateParams ()\fC [private]\fP"

.PP
Definition at line 132 of file kbanim\&.cpp\&.
.PP
References _script, effectiveParams(), AnimScript::parameters(), and repeatKey\&.
.PP
Referenced by parameter(), and resetParams()\&.
.PP
.nf
132                          {
133     if(_script)
134         _script->parameters(effectiveParams());
135     repeatKey = "";
136 }
.fi
.SH "Field Documentation"
.PP 
.SS "QUuid KbAnim::_guid\fC [private]\fP"

.PP
Definition at line 110 of file kbanim\&.h\&.
.PP
Referenced by guid(), KbAnim(), newId(), and save()\&.
.SS "bool KbAnim::_isActive\fC [private]\fP"

.PP
Definition at line 114 of file kbanim\&.h\&.
.PP
Referenced by catchUp(), isActive(), keypress(), reInit(), stop(), and trigger()\&.
.SS "bool KbAnim::_isActiveKp\fC [private]\fP"

.PP
Definition at line 114 of file kbanim\&.h\&.
.PP
Referenced by catchUp(), isActive(), keypress(), reInit(), and stop()\&.
.SS "QStringList KbAnim::_keys\fC [private]\fP"

.PP
Definition at line 92 of file kbanim\&.h\&.
.PP
Referenced by KbAnim(), keys(), reInit(), and save()\&.
.SS "\fBKeyMap\fP KbAnim::_map\fC [private]\fP"

.PP
Definition at line 91 of file kbanim\&.h\&.
.PP
Referenced by KbAnim(), map(), and reInit()\&.
.SS "\fBMode\fP KbAnim::_mode\fC [private]\fP"

.PP
Definition at line 113 of file kbanim\&.h\&.
.PP
Referenced by blend(), KbAnim(), mode(), and save()\&.
.SS "QString KbAnim::_name\fC [private]\fP"

.PP
Definition at line 111 of file kbanim\&.h\&.
.PP
Referenced by KbAnim(), name(), and save()\&.
.SS "bool KbAnim::_needsSave\fC [private]\fP"

.PP
Definition at line 115 of file kbanim\&.h\&.
.PP
Referenced by commitParams(), mode(), name(), needsSave(), newId(), opacity(), and save()\&.
.SS "float KbAnim::_opacity\fC [private]\fP"

.PP
Definition at line 112 of file kbanim\&.h\&.
.PP
Referenced by blend(), KbAnim(), opacity(), and save()\&.
.SS "QMap<QString, QVariant> KbAnim::_parameters\fC [private]\fP"

.PP
Definition at line 94 of file kbanim\&.h\&.
.PP
Referenced by commitParams(), effectiveParams(), hasParameter(), KbAnim(), parameter(), and save()\&.
.SS "\fBAnimScript\fP* KbAnim::_script\fC [private]\fP"

.PP
Definition at line 86 of file kbanim\&.h\&.
.PP
Referenced by blend(), catchUp(), isRunning(), KbAnim(), keypress(), parameter(), reInit(), script(), stop(), trigger(), and updateParams()\&.
.SS "QUuid KbAnim::_scriptGuid\fC [private]\fP"

.PP
Definition at line 88 of file kbanim\&.h\&.
.PP
Referenced by KbAnim(), and save()\&.
.SS "QString KbAnim::_scriptName\fC [private]\fP"

.PP
Definition at line 89 of file kbanim\&.h\&.
.PP
Referenced by KbAnim(), save(), and scriptName()\&.
.SS "QMap<QString, QVariant> KbAnim::_tempParameters\fC [private]\fP"

.PP
Definition at line 96 of file kbanim\&.h\&.
.PP
Referenced by commitParams(), effectiveParams(), parameter(), and resetParams()\&.
.SS "int KbAnim::kpRepeatMsec\fC [private]\fP"

.PP
Definition at line 106 of file kbanim\&.h\&.
.PP
Referenced by catchUp(), keypress(), and stop()\&.
.SS "quint64 KbAnim::kpRepeatTime\fC [private]\fP"

.PP
Definition at line 105 of file kbanim\&.h\&.
.PP
Referenced by catchUp(), keypress(), and stop()\&.
.SS "quint64 KbAnim::kpStopTime\fC [private]\fP"

.PP
Definition at line 105 of file kbanim\&.h\&.
.PP
Referenced by catchUp(), keypress(), and stop()\&.
.SS "QString KbAnim::repeatKey\fC [private]\fP"

.PP
Definition at line 104 of file kbanim\&.h\&.
.PP
Referenced by catchUp(), keypress(), reInit(), stop(), and updateParams()\&.
.SS "int KbAnim::repeatMsec\fC [private]\fP"

.PP
Definition at line 106 of file kbanim\&.h\&.
.PP
Referenced by catchUp(), keypress(), stop(), and trigger()\&.
.SS "quint64 KbAnim::repeatTime\fC [private]\fP"

.PP
Definition at line 105 of file kbanim\&.h\&.
.PP
Referenced by catchUp(), keypress(), stop(), and trigger()\&.
.SS "quint64 KbAnim::stopTime\fC [private]\fP"

.PP
Definition at line 105 of file kbanim\&.h\&.
.PP
Referenced by catchUp(), keypress(), stop(), and trigger()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for ckb-next from the source code\&.
