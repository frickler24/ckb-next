.TH "src/ckb-daemon/input.h" 3 "Wed May 24 2017" "Version v0.2.8 at branch master" "ckb-next" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/ckb-daemon/input.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'includes\&.h'\fP
.br
\fC#include 'usb\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBIS_MOD\fP(s)   ((s) == KEY_CAPSLOCK || (s) == KEY_NUMLOCK || (s) == KEY_SCROLLLOCK || (s) == KEY_LEFTSHIFT || (s) == KEY_RIGHTSHIFT || (s) == KEY_LEFTCTRL || (s) == KEY_RIGHTCTRL || (s) == KEY_LEFTMETA || (s) == KEY_RIGHTMETA || (s) == KEY_LEFTALT || (s) == KEY_RIGHTALT || (s) == KEY_FN)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBos_inputopen\fP (\fBusbdevice\fP *kb)"
.br
.ti -1c
.RI "void \fBos_inputclose\fP (\fBusbdevice\fP *kb)"
.br
.ti -1c
.RI "void \fBinputupdate\fP (\fBusbdevice\fP *kb)"
.br
.ti -1c
.RI "void \fBupdateindicators_kb\fP (\fBusbdevice\fP *kb, int force)"
.br
.ti -1c
.RI "void \fBinitbind\fP (\fBbinding\fP *bind)"
.br
.ti -1c
.RI "void \fBfreebind\fP (\fBbinding\fP *bind)"
.br
.ti -1c
.RI "void \fBcmd_bind\fP (\fBusbdevice\fP *kb, \fBusbmode\fP *mode, int dummy, int keyindex, const char *to)"
.br
.ti -1c
.RI "void \fBcmd_unbind\fP (\fBusbdevice\fP *kb, \fBusbmode\fP *mode, int dummy, int keyindex, const char *ignored)"
.br
.ti -1c
.RI "void \fBcmd_rebind\fP (\fBusbdevice\fP *kb, \fBusbmode\fP *mode, int dummy, int keyindex, const char *ignored)"
.br
.ti -1c
.RI "void \fBcmd_macro\fP (\fBusbdevice\fP *kb, \fBusbmode\fP *mode, const int notifynumber, const char *keys, const char *assignment)"
.br
.ti -1c
.RI "void \fBos_keypress\fP (\fBusbdevice\fP *kb, int scancode, int down)"
.br
.ti -1c
.RI "void \fBos_mousemove\fP (\fBusbdevice\fP *kb, int \fBx\fP, int \fBy\fP)"
.br
.ti -1c
.RI "int \fBos_setupindicators\fP (\fBusbdevice\fP *kb)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define IS_MOD(s)   ((s) == KEY_CAPSLOCK || (s) == KEY_NUMLOCK || (s) == KEY_SCROLLLOCK || (s) == KEY_LEFTSHIFT || (s) == KEY_RIGHTSHIFT || (s) == KEY_LEFTCTRL || (s) == KEY_RIGHTCTRL || (s) == KEY_LEFTMETA || (s) == KEY_RIGHTMETA || (s) == KEY_LEFTALT || (s) == KEY_RIGHTALT || (s) == KEY_FN)"

.PP
Definition at line 34 of file input\&.h\&.
.PP
Referenced by inputupdate_keys()\&.
.SH "Function Documentation"
.PP 
.SS "void cmd_bind (\fBusbdevice\fP *kb, \fBusbmode\fP *mode, intdummy, intkeyindex, const char *to)"

.PP
Definition at line 188 of file input\&.c\&.
.PP
References binding::base, usbmode::bind, imutex, keymap, N_KEYS_INPUT, and key::scan\&.
.PP
.nf
188                                                                                     {
189     if(keyindex >= N_KEYS_INPUT)
190         return;
191     // Find the key to bind to
192     int tocode = 0;
193     if(sscanf(to, "#x%ux", &tocode) != 1 && sscanf(to, "#%u", &tocode) == 1 && tocode < N_KEYS_INPUT){
194         pthread_mutex_lock(imutex(kb));
195         mode->bind\&.base[keyindex] = tocode;
196         pthread_mutex_unlock(imutex(kb));
197         return;
198     }
199     // If not numeric, look it up
200     for(int i = 0; i < N_KEYS_INPUT; i++){
201         if(keymap[i]\&.name && !strcmp(to, keymap[i]\&.name)){
202             pthread_mutex_lock(imutex(kb));
203             mode->bind\&.base[keyindex] = keymap[i]\&.scan;
204             pthread_mutex_unlock(imutex(kb));
205             return;
206         }
207     }
208 }
.fi
.SS "void cmd_macro (\fBusbdevice\fP *kb, \fBusbmode\fP *mode, const intnotifynumber, const char *keys, const char *assignment)"

.PP
Definition at line 332 of file input\&.c\&.
.PP
References _cmd_macro(), and imutex\&.
.PP
.nf
332                                                                                                               {
333     pthread_mutex_lock(imutex(kb));
334     _cmd_macro(mode, keys, assignment);
335     pthread_mutex_unlock(imutex(kb));
336 }
.fi
.SS "void cmd_rebind (\fBusbdevice\fP *kb, \fBusbmode\fP *mode, intdummy, intkeyindex, const char *ignored)"

.PP
Definition at line 218 of file input\&.c\&.
.PP
References binding::base, usbmode::bind, imutex, keymap, N_KEYS_INPUT, and key::scan\&.
.PP
.nf
218                                                                                       {
219     if(keyindex >= N_KEYS_INPUT)
220         return;
221     pthread_mutex_lock(imutex(kb));
222     mode->bind\&.base[keyindex] = keymap[keyindex]\&.scan;
223     pthread_mutex_unlock(imutex(kb));
224 }
.fi
.SS "void cmd_unbind (\fBusbdevice\fP *kb, \fBusbmode\fP *mode, intdummy, intkeyindex, const char *ignored)"

.PP
Definition at line 210 of file input\&.c\&.
.PP
References binding::base, usbmode::bind, imutex, KEY_UNBOUND, and N_KEYS_INPUT\&.
.PP
.nf
210                                                                                       {
211     if(keyindex >= N_KEYS_INPUT)
212         return;
213     pthread_mutex_lock(imutex(kb));
214     mode->bind\&.base[keyindex] = KEY_UNBOUND;
215     pthread_mutex_unlock(imutex(kb));
216 }
.fi
.SS "void freebind (\fBbinding\fP *bind)"

.PP
Definition at line 181 of file input\&.c\&.
.PP
References keymacro::actions, binding::macrocount, and binding::macros\&.
.PP
Referenced by freemode()\&.
.PP
.nf
181                             {
182     for(int i = 0; i < bind->macrocount; i++)
183         free(bind->macros[i]\&.actions);
184     free(bind->macros);
185     memset(bind, 0, sizeof(*bind));
186 }
.fi
.SS "void initbind (\fBbinding\fP *bind)"

.PP
Definition at line 173 of file input\&.c\&.
.PP
References binding::base, keymap, binding::macrocap, binding::macrocount, binding::macros, N_KEYS_INPUT, and key::scan\&.
.PP
Referenced by initmode()\&.
.PP
.nf
173                             {
174     for(int i = 0; i < N_KEYS_INPUT; i++)
175         bind->base[i] = keymap[i]\&.scan;
176     bind->macros = calloc(32, sizeof(keymacro));
177     bind->macrocap = 32;
178     bind->macrocount = 0;
179 }
.fi
.SS "void inputupdate (\fBusbdevice\fP *kb)"

.PP
Definition at line 122 of file input\&.c\&.
.PP
References usbdevice::input, inputupdate_keys(), os_mousemove(), usbdevice::profile, usbinput::rel_x, usbinput::rel_y, usbdevice::uinput_kb, and usbdevice::uinput_mouse\&.
.PP
Referenced by os_inputmain(), setactive_kb(), and setactive_mouse()\&.
.PP
.nf
122                                {
123 #ifdef OS_LINUX
124     if((!kb->uinput_kb || !kb->uinput_mouse)
125 #else
126     if(!kb->event
127 #endif
128             || !kb->profile)
129         return;
130     // Process key/button input
131     inputupdate_keys(kb);
132     // Process mouse movement
133     usbinput* input = &kb->input;
134     if(input->rel_x != 0 || input->rel_y != 0){
135         os_mousemove(kb, input->rel_x, input->rel_y);
136         input->rel_x = input->rel_y = 0;
137     }
138     // Finish up
139     memcpy(input->prevkeys, input->keys, N_KEYBYTES_INPUT);
140 }
.fi
.SS "void os_inputclose (\fBusbdevice\fP *kb)"

.PP
Definition at line 70 of file input_linux\&.c\&.
.PP
References ckb_warn, usbdevice::uinput_kb, and usbdevice::uinput_mouse\&.
.PP
Referenced by closeusb()\&.
.PP
.nf
70                                  {
71     if(kb->uinput_kb <= 0 || kb->uinput_mouse <= 0)
72         return;
73     // Set all keys released
74     struct input_event event;
75     memset(&event, 0, sizeof(event));
76     event\&.type = EV_KEY;
77     for(int key = 0; key < KEY_CNT; key++){
78         event\&.code = key;
79         if(write(kb->uinput_kb - 1, &event, sizeof(event)) <= 0)
80             ckb_warn("uinput write failed: %s\n", strerror(errno));
81         if(write(kb->uinput_mouse - 1, &event, sizeof(event)) <= 0)
82             ckb_warn("uinput write failed: %s\n", strerror(errno));
83     }
84     event\&.type = EV_SYN;
85     event\&.code = SYN_REPORT;
86     if(write(kb->uinput_kb - 1, &event, sizeof(event)) <= 0)
87         ckb_warn("uinput write failed: %s\n", strerror(errno));
88     if(write(kb->uinput_mouse - 1, &event, sizeof(event)) <= 0)
89         ckb_warn("uinput write failed: %s\n", strerror(errno));
90     // Close the keyboard
91     ioctl(kb->uinput_kb - 1, UI_DEV_DESTROY);
92     close(kb->uinput_kb - 1);
93     kb->uinput_kb = 0;
94     // Close the mouse
95     ioctl(kb->uinput_mouse - 1, UI_DEV_DESTROY);
96     close(kb->uinput_mouse - 1);
97     kb->uinput_mouse = 0;
98 }
.fi
.SS "int os_inputopen (\fBusbdevice\fP *kb)"

.PP
Definition at line 49 of file input_linux\&.c\&.
.PP
References usbdevice::fwversion, INDEX_OF, keyboard, usbdevice::name, usbdevice::product, usbdevice::uinput_kb, usbdevice::uinput_mouse, uinputopen(), and usbdevice::vendor\&.
.PP
Referenced by _setupusb()\&.
.PP
.nf
49                                {
50     // Create the new input device
51     int index = INDEX_OF(kb, keyboard);
52     struct uinput_user_dev indev;
53     memset(&indev, 0, sizeof(indev));
54     snprintf(indev\&.name, UINPUT_MAX_NAME_SIZE, "ckb%d: %s", index, kb->name);
55     indev\&.id\&.bustype = BUS_USB;
56     indev\&.id\&.vendor = kb->vendor;
57     indev\&.id\&.product = kb->product;
58     indev\&.id\&.version = kb->fwversion;
59     // Open keyboard
60     int fd = uinputopen(&indev, 0);
61     kb->uinput_kb = fd;
62     if(fd <= 0)
63         return 0;
64     // Open mouse
65     fd = uinputopen(&indev, 1);
66     kb->uinput_mouse = fd;
67     return fd <= 0;
68 }
.fi
.SS "void os_keypress (\fBusbdevice\fP *kb, intscancode, intdown)"

.PP
Definition at line 112 of file input_linux\&.c\&.
.PP
References BTN_WHEELDOWN, BTN_WHEELUP, ckb_warn, isync(), SCAN_MOUSE, usbdevice::uinput_kb, and usbdevice::uinput_mouse\&.
.PP
Referenced by inputupdate_keys()\&.
.PP
.nf
112                                                        {
113     struct input_event event;
114     memset(&event, 0, sizeof(event));
115     int is_mouse = 0;
116     if(scancode == BTN_WHEELUP || scancode == BTN_WHEELDOWN){
117         // The mouse wheel is a relative axis
118         if(!down)
119             return;
120         event\&.type = EV_REL;
121         event\&.code = REL_WHEEL;
122         event\&.value = (scancode == BTN_WHEELUP ? 1 : -1);
123         is_mouse = 1;
124     } else {
125         // Mouse buttons and key events are both EV_KEY\&. The scancodes are already correct, just remove the ckb bit
126         event\&.type = EV_KEY;
127         event\&.code = scancode & ~SCAN_MOUSE;
128         event\&.value = down;
129         is_mouse = !!(scancode & SCAN_MOUSE);
130     }
131     if(write((is_mouse ? kb->uinput_mouse : kb->uinput_kb) - 1, &event, sizeof(event)) <= 0)
132         ckb_warn("uinput write failed: %s\n", strerror(errno));
133     else
134         isync(kb);
135 }
.fi
.SS "void os_mousemove (\fBusbdevice\fP *kb, intx, inty)"

.PP
Definition at line 137 of file input_linux\&.c\&.
.PP
References ckb_warn, isync(), usbdevice::uinput_mouse, x, and y\&.
.PP
Referenced by inputupdate(), and inputupdate_keys()\&.
.PP
.nf
137                                               {
138     struct input_event event;
139     memset(&event, 0, sizeof(event));
140     event\&.type = EV_REL;
141     if(x != 0){
142         event\&.code = REL_X;
143         event\&.value = x;
144         if(write(kb->uinput_mouse - 1, &event, sizeof(event)) <= 0)
145             ckb_warn("uinput write failed: %s\n", strerror(errno));
146         else
147             isync(kb);
148     }
149     if(y != 0){
150         event\&.code = REL_Y;
151         event\&.value = y;
152         if(write(kb->uinput_mouse - 1, &event, sizeof(event)) <= 0)
153             ckb_warn("uinput write failed: %s\n", strerror(errno));
154         else
155             isync(kb);
156     }
157 }
.fi
.SS "int os_setupindicators (\fBusbdevice\fP *kb)"

.PP
Definition at line 183 of file input_linux\&.c\&.
.PP
References _ledthread(), usbdevice::hw_ileds, usbdevice::hw_ileds_old, and usbdevice::ileds\&.
.PP
Referenced by _setupusb()\&.
.PP
.nf
183                                      {
184     // Initialize LEDs to all off
185     kb->hw_ileds = kb->hw_ileds_old = kb->ileds = 0;
186     // Create and detach thread to read LED events
187     pthread_t thread;
188     int err = pthread_create(&thread, 0, _ledthread, kb);
189     if(err != 0)
190         return err;
191     pthread_detach(thread);
192     return 0;
193 }
.fi
.SS "void updateindicators_kb (\fBusbdevice\fP *kb, intforce)"

.PP
Definition at line 142 of file input\&.c\&.
.PP
References usbdevice::active, usbprofile::currentmode, DELAY_SHORT, usbdevice::hw_ileds, usbdevice::hw_ileds_old, I_CAPS, I_NUM, I_SCROLL, usbdevice::ileds, usbmode::inotify, usbmode::ioff, usbmode::ion, nprintind(), os_sendindicators(), OUTFIFO_MAX, and usbdevice::profile\&.
.PP
.nf
142                                                   {
143     // Read current hardware indicator state (set externally)
144     uchar old = kb->ileds, hw_old = kb->hw_ileds_old;
145     uchar new = kb->hw_ileds, hw_new = new;
146     // Update them if needed
147     if(kb->active){
148         usbmode* mode = kb->profile->currentmode;
149         new = (new & ~mode->ioff) | mode->ion;
150     }
151     kb->ileds = new;
152     kb->hw_ileds_old = hw_new;
153     if(old != new || force){
154         DELAY_SHORT(kb);
155         os_sendindicators(kb);
156     }
157     // Print notifications if desired
158     if(!kb->active)
159         return;
160     usbmode* mode = kb->profile->currentmode;
161     uchar indicators[] = { I_NUM, I_CAPS, I_SCROLL };
162     for(unsigned i = 0; i < sizeof(indicators) / sizeof(uchar); i++){
163         uchar mask = indicators[i];
164         if((hw_old & mask) == (hw_new & mask))
165             continue;
166         for(int notify = 0; notify < OUTFIFO_MAX; notify++){
167             if(mode->inotify[notify] & mask)
168                 nprintind(kb, notify, mask, hw_new & mask);
169         }
170     }
171 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for ckb-next from the source code\&.
