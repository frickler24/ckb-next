.TH "src/ckb/quazip/crypt.h" 3 "Sat Jan 20 2018" "Version v0.2.8 at branch master" "ckb-next" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/ckb/quazip/crypt.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'quazip_global\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBCRC32\fP(c, b)   ((*(pcrc_32_tab+(((int)(c) ^ (b)) & 0xff))) ^ ((c) >> 8))"
.br
.ti -1c
.RI "#define \fBzdecode\fP(pkeys, pcrc_32_tab, c)   (\fBupdate_keys\fP(pkeys,pcrc_32_tab,c ^= \fBdecrypt_byte\fP(pkeys,pcrc_32_tab)))"
.br
.ti -1c
.RI "#define \fBzencode\fP(pkeys, pcrc_32_tab, c, t)   (t=\fBdecrypt_byte\fP(pkeys,pcrc_32_tab), \fBupdate_keys\fP(pkeys,pcrc_32_tab,c), t^(c))"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "static int \fBdecrypt_byte\fP (unsigned long *pkeys, const \fBz_crc_t\fP FAR *pcrc_32_tab)"
.br
.ti -1c
.RI "static int \fBupdate_keys\fP (unsigned long *pkeys, const \fBz_crc_t\fP FAR *pcrc_32_tab, int c)"
.br
.ti -1c
.RI "static void \fBinit_keys\fP (const char *passwd, unsigned long *pkeys, const \fBz_crc_t\fP FAR *pcrc_32_tab)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define CRC32(c, b)   ((*(pcrc_32_tab+(((int)(c) ^ (b)) & 0xff))) ^ ((c) >> 8))"

.PP
Definition at line 32 of file crypt\&.h\&.
.PP
Referenced by update_keys()\&.
.SS "#define zdecode(pkeys, pcrc_32_tab, c)   (\fBupdate_keys\fP(pkeys,pcrc_32_tab,c ^= \fBdecrypt_byte\fP(pkeys,pcrc_32_tab)))"

.PP
Definition at line 79 of file crypt\&.h\&.
.PP
Referenced by unzOpenCurrentFile3(), and unzReadCurrentFile()\&.
.SS "#define zencode(pkeys, pcrc_32_tab, c, t)   (t=\fBdecrypt_byte\fP(pkeys,pcrc_32_tab), \fBupdate_keys\fP(pkeys,pcrc_32_tab,c), t^(c))"

.PP
Definition at line 82 of file crypt\&.h\&.
.PP
Referenced by zip64FlushWriteBuffer()\&.
.SH "Function Documentation"
.PP 
.SS "static int decrypt_byte (unsigned long *pkeys, const \fBz_crc_t\fP FAR *pcrc_32_tab)\fC [static]\fP"

.PP
Definition at line 37 of file crypt\&.h\&.
.PP
.nf
38 {
39     //(void) pcrc_32_tab; /* avoid "unused parameter" warning */
40     unsigned temp;  /* POTENTIAL BUG:  temp*(temp^1) may overflow in an
41                      * unpredictable manner on 16-bit systems; not a problem
42                      * with any known compiler so far, though */
43 
44     temp = ((unsigned)(*(pkeys+2)) & 0xffff) | 2;
45     return (int)(((temp * (temp ^ 1)) >> 8) & 0xff);
46 }
.fi
.SS "static void init_keys (const char *passwd, unsigned long *pkeys, const \fBz_crc_t\fP FAR *pcrc_32_tab)\fC [static]\fP"

.PP
Definition at line 68 of file crypt\&.h\&.
.PP
References update_keys()\&.
.PP
Referenced by unzOpenCurrentFile3()\&.
.PP
.nf
69 {
70     *(pkeys+0) = 305419896L;
71     *(pkeys+1) = 591751049L;
72     *(pkeys+2) = 878082192L;
73     while (*passwd != '\0') {
74         update_keys(pkeys,pcrc_32_tab,(int)*passwd);
75         passwd++;
76     }
77 }
.fi
.SS "static int update_keys (unsigned long *pkeys, const \fBz_crc_t\fP FAR *pcrc_32_tab, intc)\fC [static]\fP"

.PP
Definition at line 51 of file crypt\&.h\&.
.PP
References CRC32\&.
.PP
Referenced by init_keys()\&.
.PP
.nf
52 {
53     (*(pkeys+0)) = CRC32((*(pkeys+0)), c);
54     (*(pkeys+1)) += (*(pkeys+0)) & 0xff;
55     (*(pkeys+1)) = (*(pkeys+1)) * 134775813L + 1;
56     {
57       register int keyshift = (int)((*(pkeys+1)) >> 24);
58       (*(pkeys+2)) = CRC32((*(pkeys+2)), keyshift);
59     }
60     return c;
61 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for ckb-next from the source code\&.
