.TH "md_README" 3 "Tue May 16 2017" "Version v0.2.8 at branch master" "ckb-next" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_README \- ckb-next: RGB Driver for Linux and OS X 
\fBckb-next\fP is an open-source driver for Corsair keyboards and mice\&. It aims to bring the features of their proprietary CUE software to the Linux and Mac operating systems\&. This project is currently a work in progress, but it already supports much of the same functionality, including full RGB animations\&. More features are coming soon\&. Testing and bug reports are appreciated!
.PP
.PP
\fBDisclaimer:\fP ckb-next is not an official Corsair product\&. It is licensed under the GNU General Public License (version 2) in the hope that it will be useful, but with NO WARRANTY of any kind\&.
.PP
.IP "\(bu" 2
\fCDevice Support\fP
.IP "  \(bu" 4
\fCKeyboards\fP
.IP "  \(bu" 4
\fCMice\fP
.PP

.IP "\(bu" 2
\fCLinux Installation\fP
.IP "  \(bu" 4
\fCPre-made packages\fP
.IP "  \(bu" 4
\fCPreparation\fP
.IP "  \(bu" 4
\fCInstalling\fP
.IP "  \(bu" 4
\fCUpgrading\fP
.IP "  \(bu" 4
\fCUninstalling\fP
.PP

.IP "\(bu" 2
\fCOS X/macOS Installation\fP
.IP "  \(bu" 4
\fCBinary download\fP
.IP "  \(bu" 4
\fCBuilding from source\fP
.IP "  \(bu" 4
\fCUpgrading (binary)\fP
.IP "  \(bu" 4
\fCUpgrading (source)\fP
.IP "  \(bu" 4
\fCUninstalling\fP
.PP

.IP "\(bu" 2
\fCUsage\fP
.IP "  \(bu" 4
\fCMajor features\fP
.IP "  \(bu" 4
\fCRoadmap\fP
.PP

.IP "\(bu" 2
\fCTroubleshooting\fP
.IP "  \(bu" 4
\fCLinux\fP
.IP "  \(bu" 4
\fCOS X/macOS\fP
.IP "  \(bu" 4
\fCGeneral\fP
.IP "  \(bu" 4
\fCReporting issues\fP
.PP

.IP "\(bu" 2
\fCKnown issues\fP
.IP "\(bu" 2
\fCContributing\fP
.IP "\(bu" 2
\fCContact us\fP
.IP "\(bu" 2
\fCWhat happened to the original ckb\fP
.PP
.PP
See also:
.PP
.IP "\(bu" 2
\fBhttps:\fP//github\&.com/mattanger/ckb-next/blob/master/DAEMON\&.md 'Manual for the driver daemon'
.IP "\(bu" 2
\fCckb testing repository\fP (updated more frequently, but may be unstable)
.PP
.PP
.SS "Device Support"
.PP
.SS "Keyboards"
.PP
.IP "\(bu" 2
K65 RGB
.IP "\(bu" 2
K70
.IP "\(bu" 2
K70 RGB
.IP "\(bu" 2
K70 LUX RGB
.IP "\(bu" 2
K95*
.IP "\(bu" 2
K95 RGB
.IP "\(bu" 2
Strafe
.IP "\(bu" 2
Strafe RGB
.IP "\(bu" 2
= hardware playback not supported\&. Settings will be saved to software only\&.
.PP
.PP
.SS "Mice"
.PP
.IP "\(bu" 2
M65 RGB
.IP "\(bu" 2
M65 PRO RGB
.IP "\(bu" 2
Sabre RGB
.IP "\(bu" 2
Scimitar RGB
.PP
.PP
.SS "Linux Installation"
.PP
.SS "Pre-made packages"
.PP
.IP "\(bu" 2
Fedora 24/25, CentOS/RHEL 7 (maintained by \fC\fP):
.IP "  \(bu" 4
\fC`johanh/ckb`\fP - based on \fCmaster\fP branch
.PP

.IP "\(bu" 2
Arch Linux (maintained by \fC\fP, \fC\fP):
.IP "  \(bu" 4
\fC`aur/ckb-next-git`\fP - based on \fCmaster\fP branch (more stable)
.IP "  \(bu" 4
\fC`aur/ckb-next-latest-git`\fP - based on \fCtesting\fP branch (less stable but fresher)
.PP

.PP
.PP
If you are a package maintainer or want to discuss something with package maintainers let us know in \fC#5\fP, so we can have an accountable and centralized communication about this\&. \fIIf you would like to maintain a package for your favorite distro/OS, please let us know as well\&.\fP
.PP
.SS "Preparation"
.PP
ckb-next requires Qt5 (Qt 5\&.8 is recommended), libudev, zlib, gcc, g++, and glibc\&.
.PP
.IP "\(bu" 2
Ubuntu: \fCsudo apt-get install build-essential libudev-dev qt5-default zlib1g-dev libappindicator-dev\fP
.IP "\(bu" 2
Fedora: \fCsudo dnf install zlib-devel qt5-qtbase-devel libgudev-devel libappindicator-devel systemd-devel gcc-c++\fP
.IP "\(bu" 2
Arch: \fCsudo pacman -S base-devel qt5-base zlib\fP
.IP "\(bu" 2
Other distros: Look for \fCqt5\fP or \fClibqt5*-devel\fP
.PP
.PP
Note: If you build your own kernels, ckb-next requires the \fCCONFIG_INPUT_UINPUT\fP flag to be enabled\&. It is located in \fCDevice Drivers -> Input Device Support -> Miscellaneous devices -> User level driver support\fP\&. If you don't know what this means, you can ignore this\&.
.PP
.SS "Installing"
.PP
You can download ckb-next using the 'Download zip' option on the right or clone it using \fCgit clone\fP\&. Extract it and open the ckb-master directory in a terminal\&. Run \fC\&./quickinstall\fP\&. It will attempt to build ckb and then ask if you'd like to install/run the application\&. If the build doesn't succeed, or if you'd like to hand-tune the compilation of ckb, see \fBhttps:\fP//github\&.com/mattanger/ckb-next/blob/master/BUILD\&.md '`BUILD\&.md`' for instructions\&.
.PP
.SS "Upgrading"
.PP
To install a new version of ckb, or to reinstall the same version, first delete the ckb-master directory and the zip file from your previous download\&. Then download the source code again and re-run \fC\&./quickinstall\fP\&. The script will automatically replace the previous installation\&. You may need to reboot afterward\&.
.PP
.SS "Uninstalling"
.PP
First, stop the ckb-daemon service and remove the service file\&.
.IP "\(bu" 2
If you have systemd (Ubuntu versions starting with 15\&.04): ``` sudo systemctl stop ckb-daemon sudo rm -f /usr/lib/systemd/system/ckb-daemon\&.service ```
.IP "\(bu" 2
If you have Upstart (Ubuntu versions earlier than 15\&.04): ``` sudo service ckb-daemon stop sudo rm -f /etc/init/ckb-daemon\&.conf ```
.IP "\(bu" 2
If you have OpenRC: ``` sudo rc-service ckb-daemon stop sudo rc-update del ckb-daemon default sudo rm -f /etc/init\&.d/ckb-daemon ``\fC\fP
.IP "\(bu" 2
\fCIf you're not sure, re-run the\fPquickinstall\fCscript and proceed to the service installation\&. The script will say\fPSystem service: Upstart detected\fCor\fPSystem service: systemd detected`\&. Please be aware that OpenRC is currently not detected automatically\&.
.PP
.PP
Afterward, remove the applications and related files: ``` sudo rm -f /usr/bin/ckb /usr/bin/ckb-daemon /usr/share/applications/ckb\&.desktop /usr/share/icons/hicolor/512x512/apps/ckb\&.png sudo rm -rf /usr/lib/ckb-animations ```
.PP
Before https://github.com/mattanger/ckb-next/commit/f347e60df211c60452f95084b6c46dc4ec5f42ee animations were located elsewhere, try removing them as well: ``` sudo rm -rf /usr/bin/ckb-animations ```
.PP
.SS "OS X/macOS Installation"
.PP
.SS "Binary download"
.PP
macOS \fCpkg\fP can be downloaded from \fCGitHub Releases\fP\&. It is always built with the last available stable Qt version and tagrets 10\&.10 SDK\&. If you run 10\&.9\&.x, you'll need to build the project from source and comment out \fCsrc/ckb-heat\fP (and the backslash above it) inside \fCckb\&.pro\fP\&.
.PP
.SS "Building from source"
.PP
Install the latest version of Xcode from the App Store\&. While it's downloading, open the Terminal and execute \fCxcode-select --install\fP to install Command Line Tools\&. Then open Xcode, accept the license agreement and wait for it to install any additional components (if necessary)\&. When you see the 'Welcome to Xcode' screen, from the top bar choose \fCXcode -> Preferences -> Locations -> Command Line Tools\fP and select an SDK version\&. Afterwards install Qt5 from here: http://www.qt.io/download-open-source/
.PP
The easiest way to build the driver is with the \fCquickinstall\fP script, which is present in the ckb-master folder\&. Double-click on \fCquickinstall\fP and it will compile the app for you, then ask if you'd like to install it system-wide\&. If the build fails for any reason, or if you'd like to compile and install manually, see \fBhttps:\fP//github\&.com/ccMSC/ckb/blob/master/BUILD\&.md '`BUILD\&.md`'\&.
.PP
.SS "Upgrading (binary)"
.PP
Download the latest \fCckb\&.pkg\fP, run the installer, and reboot\&. The newly-installed driver will replace the old one\&.
.PP
.SS "Upgrading (source)"
.PP
Remove the existing ckb-master directory and zip file\&. Re-download the source code and run the \fCquickinstall\fP script again\&. The script will automatically replace the previous installation\&. You may need to reboot afterward\&.
.PP
.SS "Uninstalling"
.PP
Drag \fCckb\&.app\fP into the trash\&. Then stop and remove the agent:
.PP
```sh sudo unload /Library/LaunchDaemons/com\&.ckb\&.daemon\&.plist sudo rm /Library/LaunchDaemons/com\&.ckb\&.daemon\&.plist ```
.PP
.SS "Usage"
.PP
The user interface is still a work in progress\&.
.PP
.SS "Major features"
.PP
.IP "\(bu" 2
Control multiple devices independently
.IP "\(bu" 2
United States and European keyboard layouts
.IP "\(bu" 2
Customizable key bindings
.IP "\(bu" 2
Per-key lighting and animation
.IP "\(bu" 2
Reactive lighting
.IP "\(bu" 2
Multiple profiles/modes with hardware save function
.IP "\(bu" 2
Adjustable mouse DPI with ability to change DPI on button press
.PP
.PP
Closing ckb will actually minimize it to the system tray\&. Use the Quit option from the tray icon or the settings screen to exit the application\&.
.PP
.SS "Roadmap"
.PP
.IP "\(bu" 2
\fBv0\&.3 release:\fP
.IP "\(bu" 2
Ability to store profiles separately from devices, import/export them
.IP "\(bu" 2
More functions for the Win Lock key
.IP "\(bu" 2
\fBKey\fP macros
.IP "\(bu" 2
\fBv0\&.4 release:\fP
.IP "\(bu" 2
Ability to import CUE profiles
.IP "\(bu" 2
Ability to tie profiles to which application has focus
.IP "\(bu" 2
\fBv0\&.5 release:\fP
.IP "\(bu" 2
\fBKey\fP combos
.IP "\(bu" 2
Timers?
.IP "\(bu" 2
\fBv1\&.0 release:\fP
.IP "\(bu" 2
OSD? (Not sure if this can actually be done)
.IP "\(bu" 2
Extra settings?
.IP "\(bu" 2
????
.PP
.PP
.SS "Troubleshooting"
.PP
.SS "Linux"
.PP
If you have problems connecting the device to your system (device doesn't respond, ckb-daemon doesn't recognize or can't connect it) and/or you experience long boot times when using the keyboard, try adding the following to your kernel's \fCcmdline\fP:
.PP
.IP "\(bu" 2
K65 RGB: \fCusbhid\&.quirks=0x1B1C:0x1B17:0x20000408\fP
.IP "\(bu" 2
K70: \fCusbhid\&.quirks=0x1B1C:0x1B09:0x20000408\fP
.IP "\(bu" 2
K70 LUX: \fCusbhid\&.quirks=0x1B1C:0x1B36:0x20000408\fP
.IP "\(bu" 2
K70 RGB: \fCusbhid\&.quirks=0x1B1C:0x1B13:0x20000408\fP
.IP "\(bu" 2
K95: \fCusbhid\&.quirks=0x1B1C:0x1B08:0x20000408\fP
.IP "\(bu" 2
K95 RGB: \fCusbhid\&.quirks=0x1B1C:0x1B11:0x20000408\fP
.IP "\(bu" 2
Strafe: \fCusbhid\&.quirks=0x1B1C:0x1B15:0x20000408\fP
.IP "\(bu" 2
Strafe RGB: \fCusbhid\&.quirks=0x1B1C:0x1B20:0x20000408\fP
.IP "\(bu" 2
M65 RGB: \fCusbhid\&.quirks=0x1B1C:0x1B12:0x20000408\fP
.IP "\(bu" 2
Sabre RGB Optical: \fCusbhid\&.quirks=0x1B1C:0x1B14:0x20000408\fP
.IP "\(bu" 2
Sabre RGB Laser: \fCusbhid\&.quirks=0x1B1C:0x1B19:0x20000408\fP
.IP "\(bu" 2
Scimitar RGB: \fCusbhid\&.quirks=0x1B1C:0x1B1E:0x20000408\fP
.PP
.PP
For instructions on adding \fCcmdline\fP parameters in Ubuntu, see https://wiki.ubuntu.com/Kernel/KernelBootParameters
.PP
If you have multiple devices, combine them with commas, starting after the \fC=\fP\&. For instance, for K70 RGB + M65 RGB: \fCusbhid\&.quirks=0x1B1C:0x1B13:0x20000408,0x1B1C:0x1B12:0x20000408\fP
.PP
If it still doesn't work, try replacing \fC0x20000408\fP with \fC0x4\fP\&. Note that this will cause the kernel driver to ignore the device(s) completely, so you need to ensure ckb-daemon is running at boot or else you'll have no input\&. This will not work if you are using full-disk encryption\&.
.PP
If you see \fBGLib\fP critical errors like ``` GLib-GObject-CRITICAL **: g_type_add_interface_static: assertion 'G_TYPE_IS_INSTANTIATABLE (instance_type)' failed ``` read \fCthis Arch Linux thread\fP and try different combinations from it\&. If it doesn't help, you might want get support from your distribution community and tell them you cannot solve the problem in this thread\&.
.PP
If you're using \fBUnity\fP and the tray icon doesn't appear correctly, run \fCsudo apt-get install libappindicator-dev\fP\&. Then reinstall ckb\&.
.PP
.SS "OS X/macOS"
.PP
.IP "\(bu" 2
**“ckb\&.pkg” can’t be opened because it is from an unidentified developer** Open \fCSystem Preferences > Security & Privacy > General\fP and click \fCOpen Anyway\fP\&.
.IP "\(bu" 2
\fBModifier keys (Shift, Ctrl, etc\&.) are not rebound correctly\fP ckb does not recognize modifier keys rebound from System Preferences\&. You can rebind them again within the application\&.
.IP "\(bu" 2
**\fC~\fP key prints \fC§±\fP** Check your keyboard layout on ckb's Settings screen\&. Choose the layout that matches your physical keyboard\&.
.IP "\(bu" 2
\fBCompile problems\fP Can usually be resolved by rebooting your computer and/or reinstalling Qt\&. Make sure that Xcode works on its own\&. If a compile fails, delete the \fCckb-master\fP directory as well as any automatically generated \fCbuild-ckb\fP folders and try again from a new download\&.
.IP "\(bu" 2
\fBScroll wheel does not scroll\fP As of #c3474d2 it's now possible to \fBdisable scroll acceleration\fP from the GUI\&. You can access it under 'OSX tweaks' in the 'More settings' screen\&. Once disabled, the scroll wheel should behave consistently\&.
.PP
.PP
.SS "General"
.PP
\fBPlease ensure your keyboard firmware is up to date\&. If you've just bought the keyboard, connect it to a Windows computer first and update the firmware from Corsair's official utility\&.\fP
.PP
\fBBefore reporting an issue, connect your keyboard to a Windows computer and see if the problem still occurs\&. If it does, contact Corsair\&.\fP Additionally, please check the Corsair user forums to see if your issue has been reported by other users\&. If so, try their solutions first\&.
.PP
Common issues:
.IP "\(bu" 2
\fBProblem:\fP ckb says 'No devices connected' or 'Driver inactive'
.IP "\(bu" 2
\fBSolution:\fP Try rebooting the computer and/or reinstalling ckb\&. Try removing the keyboard and plugging it back in\&. If the error doesn't go away, try the following:
.IP "\(bu" 2
\fBProblem:\fP Keyboard doesn't work in BIOS, doesn't work at boot
.IP "\(bu" 2
\fBSolution:\fP Some BIOSes have trouble communicating with the keyboard\&. They may prevent the keyboard from working correctly in the operating system as well\&. First, try booting the OS \fIwithout\fP the keyboard attached, and plug the keyboard in after logging in\&. If the keyboard works after the computer is running but does not work at boot, you may need to use the keyboard's BIOS mode option\&.
.IP "\(bu" 2
BIOS mode can be activated using the poll rate switch at the back of the keyboard\&. Slide it all the way to the position marked 'BIOS'\&. You should see the scroll lock light blinking to indicate that it is on\&. (Note: Unfortunately, this has its own problems - see Known Issues\&. You may need to activate BIOS mode when booting the computer and deactivate it after logging in)\&.
.IP "\(bu" 2
\fBProblem:\fP Keyboard isn't detected when plugged in, even if driver is already running
.IP "\(bu" 2
\fBSolution:\fP Try moving to a different USB port\&. Be sure to follow \fCCorsair's USB connection requirements\fP\&. Note that the keyboard does not work with some USB3 controllers - if you have problems with USB3 ports, try USB2 instead\&. If you have any USB hubs on hand, try those as well\&. You may also have success sliding the poll switch back and forth a few times\&.
.PP
.PP
.SS "Reporting issues"
.PP
If you have a problem that you can't solve (and it isn't mentioned in the Known Issues section below), you can report it on \fCthe GitHub issue tracker\fP\&. Before opening a new issue, please check to see if someone else has reported your problem already - if so, feel free to leave a comment there\&.
.PP
.SS "Known issues"
.PP
.IP "\(bu" 2
Using the keyboard in BIOS mode prevents the media keys (including mute and volume wheel), as well as the K95's G-keys from working\&. This is a hardware limitation\&.
.IP "\(bu" 2
The tray icon doesn't appear in some desktop environments\&. This is a known Qt bug\&. If you can't see the icon, reopen ckb to bring the window back\&.
.IP "\(bu" 2
When starting the driver manually, the Terminal window sometimes gets spammed with enter keys\&. You can stop it by unplugging and replugging the keyboard or by moving the poll rate switch\&.
.IP "\(bu" 2
When stopping the driver manually, the keyboard sometimes stops working completely\&. You can reconnect it by moving the poll rate switch\&.
.IP "\(bu" 2
On newer versions of macOS (i\&.e\&. 10\&.12 and up) CMD/Shift+select does not work, yet\&. Stopping the daemon and GUI for \fCckb\fP will fix this issue temporarily\&.
.PP
.PP
.SS "Contributing"
.PP
You can contribute to the project by \fCopening a pull request\fP\&. It's best if you base your changes off of the \fCtesting\fP branch as opposed to the \fCmaster\fP, because the pull request will be merged there first\&. If you'd like to contribute but don't know what you can do, take a look at \fCthe issue tracker\fP and see if any features/problems are still unresolved\&. Feel free to ask if you'd like some ideas\&.
.PP
.SS "Contact us"
.PP
There are multiple ways you can get in touch with us:
.PP
.IP "\(bu" 2
\fCjoin\fP \fCckb-next\fP mailing list
.IP "\(bu" 2
\fCopen\fP a GitHub Issue
.IP "\(bu" 2
hop on \fC#ckb-next\fP to chat \fC\fP
.PP
.PP
.SS "What happened to the original ckb"
.PP
Due to time restrictions, the original author of \fBckb\fP \fCccMSC\fP hasn't been able to further develop the software\&. So the community around it decided to take the project over and continue its development\&. That's how \fBckb-next\fP was created\&. Currently it's not rock solid and not very easy to set up on newer systems but we are actively working on this\&. Nevertheless the project already incorporates a notable amount of fixes and patches in comparison to the original ckb\&. 
