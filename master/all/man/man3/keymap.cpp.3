.TH "src/ckb/keymap.cpp" 3 "Sat Jan 20 2018" "Version v0.2.8 at branch master" "ckb-next" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/ckb/keymap.cpp \- 
.SH SYNOPSIS
.br
.PP
\fC#include <clocale>\fP
.br
\fC#include <QMap>\fP
.br
\fC#include 'keymap\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBKeyPatch\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBNS\fP   12, 12"
.br
.ti -1c
.RI "#define \fBLBS\fP   17, 6"
.br
.ti -1c
.RI "#define \fBKEYCOUNT_K95\fP   (sizeof(\fBK95Keys\fP) / sizeof(\fBKey\fP))"
.br
.ti -1c
.RI "#define \fBANSI_ENTER_X\fP   199"
.br
.ti -1c
.RI "#define \fBANSI_ENTER_Y\fP   51"
.br
.ti -1c
.RI "#define \fBANSI_ENTER_W\fP   26"
.br
.ti -1c
.RI "#define \fBANSI_ENTER_H\fP   12"
.br
.ti -1c
.RI "#define \fBANSI_LSHIFT_X\fP   45"
.br
.ti -1c
.RI "#define \fBANSI_LSHIFT_W\fP   26"
.br
.ti -1c
.RI "#define \fBPATCH_COUNT\fP(\fBpatch\fP)   (sizeof(\fBpatch\fP) / sizeof(\fBKeyPatch\fP))"
.br
.ti -1c
.RI "#define \fBpatch\fP(map, patches)   \fB_patch\fP(map, patches, \fBPATCH_COUNT\fP(patches))"
.br
.ti -1c
.RI "#define \fBK95_WIDTH\fP   298"
.br
.ti -1c
.RI "#define \fBK95_HEIGHT\fP   76"
.br
.ti -1c
.RI "#define \fBK95P_HEIGHT\fP   82"
.br
.ti -1c
.RI "#define \fBK95P_X_START\fP   20"
.br
.ti -1c
.RI "#define \fBK95P_WIDTH\fP   (\fBK95_WIDTH\fP - \fBK95P_X_START\fP + 1)"
.br
.ti -1c
.RI "#define \fBK70_X_START\fP   38"
.br
.ti -1c
.RI "#define \fBK70_WIDTH\fP   (\fBK95_WIDTH\fP - \fBK70_X_START\fP)"
.br
.ti -1c
.RI "#define \fBK70_HEIGHT\fP   \fBK95_HEIGHT\fP"
.br
.ti -1c
.RI "#define \fBK68_WIDTH\fP   \fBK70_WIDTH\fP"
.br
.ti -1c
.RI "#define \fBK68_HEIGHT\fP   \fBK70_HEIGHT\fP"
.br
.ti -1c
.RI "#define \fBK65_WIDTH\fP   209"
.br
.ti -1c
.RI "#define \fBK65_HEIGHT\fP   \fBK70_HEIGHT\fP"
.br
.ti -1c
.RI "#define \fBK63_WIDTH\fP   \fBK65_WIDTH\fP"
.br
.ti -1c
.RI "#define \fBK63_HEIGHT\fP   \fBK65_HEIGHT\fP"
.br
.ti -1c
.RI "#define \fBK68_TOP_COUNT\fP   (sizeof(\fBK68TopRow\fP) / sizeof(\fBKey\fP))"
.br
.ti -1c
.RI "#define \fBK65_TOP_COUNT\fP   (sizeof(\fBK65TopRow\fP) / sizeof(\fBKey\fP))"
.br
.ti -1c
.RI "#define \fBK63_TOP_COUNT\fP   (sizeof(\fBK63TopRow\fP) / sizeof(\fBKey\fP))"
.br
.ti -1c
.RI "#define \fBKSTRAFE_X_START\fP   12"
.br
.ti -1c
.RI "#define \fBKSTRAFE_WIDTH\fP   (\fBK70_WIDTH\fP + (\fBKSTRAFE_X_START\fP * 2))"
.br
.ti -1c
.RI "#define \fBKSTRAFE_HEIGHT\fP   \fBK95_HEIGHT\fP"
.br
.ti -1c
.RI "#define \fBKEYCOUNT_M65\fP   (sizeof(\fBM65Keys\fP) / sizeof(\fBKey\fP))"
.br
.ti -1c
.RI "#define \fBM65_WIDTH\fP   52"
.br
.ti -1c
.RI "#define \fBM65_HEIGHT\fP   67"
.br
.ti -1c
.RI "#define \fBKEYCOUNT_SABRE\fP   (sizeof(\fBSabreKeys\fP) / sizeof(\fBKey\fP))"
.br
.ti -1c
.RI "#define \fBSABRE_WIDTH\fP   \fBM65_WIDTH\fP"
.br
.ti -1c
.RI "#define \fBSABRE_HEIGHT\fP   \fBM65_HEIGHT\fP"
.br
.ti -1c
.RI "#define \fBKEYCOUNT_HARPOON\fP   (sizeof(\fBHarpoonKeys\fP) / sizeof(\fBKey\fP))"
.br
.ti -1c
.RI "#define \fBHARPOON_WIDTH\fP   \fBM65_WIDTH\fP"
.br
.ti -1c
.RI "#define \fBHARPOON_HEIGHT\fP   \fBM65_HEIGHT\fP"
.br
.ti -1c
.RI "#define \fBKEYCOUNT_GLAIVE\fP   (sizeof(\fBGlaiveKeys\fP) / sizeof(\fBKey\fP))"
.br
.ti -1c
.RI "#define \fBGLAIVE_WIDTH\fP   \fBM65_WIDTH\fP"
.br
.ti -1c
.RI "#define \fBGLAIVE_HEIGHT\fP   \fBM65_HEIGHT\fP"
.br
.ti -1c
.RI "#define \fBKEYCOUNT_SCIM\fP   (sizeof(\fBScimKeys\fP) / sizeof(\fBKey\fP))"
.br
.ti -1c
.RI "#define \fBSCIM_WIDTH\fP   \fBM65_WIDTH\fP"
.br
.ti -1c
.RI "#define \fBSCIM_HEIGHT\fP   \fBM65_HEIGHT\fP"
.br
.ti -1c
.RI "#define \fBLBARCOUNT_K95P\fP   (sizeof(\fBK95PLbar\fP) / sizeof(\fBKey\fP))"
.br
.ti -1c
.RI "#define \fBN_MODELS\fP   \fBKeyMap::_MODEL_MAX\fP"
.br
.ti -1c
.RI "#define \fBN_LAYOUTS\fP   \fBKeyMap::_LAYOUT_MAX\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "static void \fB_patch\fP (QHash< QString, \fBKey\fP > &map, const \fBKeyPatch\fP *patches, int patchCount)"
.br
.ti -1c
.RI "static void \fBpatchnonJP106\fP (QHash< QString, \fBKey\fP > &map)"
.br
.ti -1c
.RI "static void \fBpatchISO\fP (QHash< QString, \fBKey\fP > &map)"
.br
.ti -1c
.RI "static void \fBpatchANSI\fP (QHash< QString, \fBKey\fP > &map)"
.br
.ti -1c
.RI "static void \fBpatchJP106\fP (QHash< QString, \fBKey\fP > &map)"
.br
.ti -1c
.RI "static void \fBpatchJP106fn\fP (QHash< QString, \fBKey\fP > &map)"
.br
.ti -1c
.RI "static void \fBpatchABNT2\fP (QHash< QString, \fBKey\fP > &map)"
.br
.ti -1c
.RI "static QHash< QString, \fBKey\fP > \fBgetMap\fP (\fBKeyMap::Model\fP model, \fBKeyMap::Layout\fP layout)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "static const \fBKey\fP \fBK95Keys\fP []"
.br
.ti -1c
.RI "static const \fBKeyPatch\fP \fBpatchDK\fP []"
.br
.ti -1c
.RI "static const \fBKeyPatch\fP \fBpatchEU\fP []"
.br
.ti -1c
.RI "static const \fBKeyPatch\fP \fBpatchFR\fP []"
.br
.ti -1c
.RI "static const \fBKeyPatch\fP \fBpatchDE\fP []"
.br
.ti -1c
.RI "static const \fBKeyPatch\fP \fBpatchIT\fP []"
.br
.ti -1c
.RI "static const \fBKeyPatch\fP \fBpatchNO\fP []"
.br
.ti -1c
.RI "static const \fBKeyPatch\fP \fBpatchMX\fP []"
.br
.ti -1c
.RI "static const \fBKeyPatch\fP \fBpatchPTBR\fP []"
.br
.ti -1c
.RI "static const \fBKeyPatch\fP \fBpatchES\fP []"
.br
.ti -1c
.RI "static const \fBKeyPatch\fP \fBpatchSE\fP []"
.br
.ti -1c
.RI "static const \fBKeyPatch\fP \fBpatchJP\fP []"
.br
.ti -1c
.RI "static const \fBKeyPatch\fP \fBpatchDvorak\fP []"
.br
.ti -1c
.RI "static const \fBKey\fP \fBK68TopRow\fP []"
.br
.ti -1c
.RI "static const \fBKey\fP \fBK65TopRow\fP []"
.br
.ti -1c
.RI "static const \fBKey\fP \fBK63TopRow\fP []"
.br
.ti -1c
.RI "static const \fBKey\fP \fBKStrafeKeys\fP []"
.br
.ti -1c
.RI "static const \fBKey\fP \fBM65Keys\fP []"
.br
.ti -1c
.RI "static const \fBKey\fP \fBSabreKeys\fP []"
.br
.ti -1c
.RI "static const \fBKey\fP \fBHarpoonKeys\fP []"
.br
.ti -1c
.RI "static const \fBKey\fP \fBGlaiveKeys\fP []"
.br
.ti -1c
.RI "static const \fBKey\fP \fBScimKeys\fP []"
.br
.ti -1c
.RI "static const \fBKey\fP \fBK95PLbar\fP []"
.br
.ti -1c
.RI "static QHash< QString, \fBKey\fP > \fBK95BaseMap\fP"
.br
.ti -1c
.RI "static QHash< QString, \fBKey\fP > \fBstandardMaps\fP [\fBKeyMap::_MODEL_MAX\fP][\fBKeyMap::_LAYOUT_MAX\fP]"
.br
.in -1c
.SH "Data Structure Documentation"
.PP 
.SH "struct KeyPatch"
.PP 
Definition at line 32 of file keymap\&.cpp\&.
.PP
\fBData Fields:\fP
.RS 4
const char * \fI_friendlyName\fP 
.br
.PP
const char * \fI_storageName\fP 
.br
.PP
const char * \fIname\fP 
.br
.PP
.RE
.PP
.SH "Macro Definition Documentation"
.PP 
.SS "#define ANSI_ENTER_H   12"

.PP
Definition at line 27 of file keymap\&.cpp\&.
.PP
Referenced by patchANSI()\&.
.SS "#define ANSI_ENTER_W   26"

.PP
Definition at line 26 of file keymap\&.cpp\&.
.PP
Referenced by patchANSI()\&.
.SS "#define ANSI_ENTER_X   199"

.PP
Definition at line 24 of file keymap\&.cpp\&.
.PP
Referenced by patchANSI()\&.
.SS "#define ANSI_ENTER_Y   51"

.PP
Definition at line 25 of file keymap\&.cpp\&.
.PP
Referenced by patchANSI()\&.
.SS "#define ANSI_LSHIFT_W   26"

.PP
Definition at line 29 of file keymap\&.cpp\&.
.PP
Referenced by patchANSI(), and patchJP106()\&.
.SS "#define ANSI_LSHIFT_X   45"

.PP
Definition at line 28 of file keymap\&.cpp\&.
.PP
Referenced by patchANSI(), and patchJP106()\&.
.SS "#define GLAIVE_HEIGHT   \fBM65_HEIGHT\fP"

.PP
Definition at line 310 of file keymap\&.cpp\&.
.SS "#define GLAIVE_WIDTH   \fBM65_WIDTH\fP"

.PP
Definition at line 309 of file keymap\&.cpp\&.
.SS "#define HARPOON_HEIGHT   \fBM65_HEIGHT\fP"

.PP
Definition at line 298 of file keymap\&.cpp\&.
.SS "#define HARPOON_WIDTH   \fBM65_WIDTH\fP"

.PP
Definition at line 297 of file keymap\&.cpp\&.
.SS "#define K63_HEIGHT   \fBK65_HEIGHT\fP"

.PP
Definition at line 233 of file keymap\&.cpp\&.
.SS "#define K63_TOP_COUNT   (sizeof(\fBK63TopRow\fP) / sizeof(\fBKey\fP))"

.PP
Definition at line 248 of file keymap\&.cpp\&.
.PP
Referenced by getMap()\&.
.SS "#define K63_WIDTH   \fBK65_WIDTH\fP"

.PP
Definition at line 232 of file keymap\&.cpp\&.
.PP
Referenced by KeyMap::modelWidth()\&.
.SS "#define K65_HEIGHT   \fBK70_HEIGHT\fP"

.PP
Definition at line 229 of file keymap\&.cpp\&.
.SS "#define K65_TOP_COUNT   (sizeof(\fBK65TopRow\fP) / sizeof(\fBKey\fP))"

.PP
Definition at line 243 of file keymap\&.cpp\&.
.PP
Referenced by getMap()\&.
.SS "#define K65_WIDTH   209"

.PP
Definition at line 228 of file keymap\&.cpp\&.
.PP
Referenced by getMap(), and KeyMap::modelWidth()\&.
.SS "#define K68_HEIGHT   \fBK70_HEIGHT\fP"

.PP
Definition at line 225 of file keymap\&.cpp\&.
.SS "#define K68_TOP_COUNT   (sizeof(\fBK68TopRow\fP) / sizeof(\fBKey\fP))"

.PP
Definition at line 238 of file keymap\&.cpp\&.
.PP
Referenced by getMap()\&.
.SS "#define K68_WIDTH   \fBK70_WIDTH\fP"

.PP
Definition at line 224 of file keymap\&.cpp\&.
.PP
Referenced by KeyMap::modelWidth()\&.
.SS "#define K70_HEIGHT   \fBK95_HEIGHT\fP"

.PP
Definition at line 222 of file keymap\&.cpp\&.
.SS "#define K70_WIDTH   (\fBK95_WIDTH\fP - \fBK70_X_START\fP)"

.PP
Definition at line 221 of file keymap\&.cpp\&.
.PP
Referenced by KeyMap::modelWidth()\&.
.SS "#define K70_X_START   38"

.PP
Definition at line 220 of file keymap\&.cpp\&.
.PP
Referenced by getMap()\&.
.SS "#define K95_HEIGHT   76"

.PP
Definition at line 213 of file keymap\&.cpp\&.
.PP
Referenced by KeyMap::modelHeight()\&.
.SS "#define K95_WIDTH   298"

.PP
Definition at line 212 of file keymap\&.cpp\&.
.PP
Referenced by KeyMap::modelWidth()\&.
.SS "#define K95P_HEIGHT   82"

.PP
Definition at line 215 of file keymap\&.cpp\&.
.PP
Referenced by KeyMap::modelHeight()\&.
.SS "#define K95P_WIDTH   (\fBK95_WIDTH\fP - \fBK95P_X_START\fP + 1)"

.PP
Definition at line 217 of file keymap\&.cpp\&.
.PP
Referenced by KeyMap::modelWidth()\&.
.SS "#define K95P_X_START   20"

.PP
Definition at line 216 of file keymap\&.cpp\&.
.PP
Referenced by getMap()\&.
.SS "#define KEYCOUNT_GLAIVE   (sizeof(\fBGlaiveKeys\fP) / sizeof(\fBKey\fP))"

.PP
Definition at line 307 of file keymap\&.cpp\&.
.PP
Referenced by getMap()\&.
.SS "#define KEYCOUNT_HARPOON   (sizeof(\fBHarpoonKeys\fP) / sizeof(\fBKey\fP))"

.PP
Definition at line 295 of file keymap\&.cpp\&.
.PP
Referenced by getMap()\&.
.SS "#define KEYCOUNT_K95   (sizeof(\fBK95Keys\fP) / sizeof(\fBKey\fP))"

.PP
Definition at line 21 of file keymap\&.cpp\&.
.PP
Referenced by getMap()\&.
.SS "#define KEYCOUNT_M65   (sizeof(\fBM65Keys\fP) / sizeof(\fBKey\fP))"

.PP
Definition at line 270 of file keymap\&.cpp\&.
.PP
Referenced by getMap()\&.
.SS "#define KEYCOUNT_SABRE   (sizeof(\fBSabreKeys\fP) / sizeof(\fBKey\fP))"

.PP
Definition at line 283 of file keymap\&.cpp\&.
.PP
Referenced by getMap()\&.
.SS "#define KEYCOUNT_SCIM   (sizeof(\fBScimKeys\fP) / sizeof(\fBKey\fP))"

.PP
Definition at line 324 of file keymap\&.cpp\&.
.PP
Referenced by getMap()\&.
.SS "#define KSTRAFE_HEIGHT   \fBK95_HEIGHT\fP"

.PP
Definition at line 253 of file keymap\&.cpp\&.
.SS "#define KSTRAFE_WIDTH   (\fBK70_WIDTH\fP + (\fBKSTRAFE_X_START\fP * 2))"

.PP
Definition at line 252 of file keymap\&.cpp\&.
.PP
Referenced by KeyMap::modelWidth()\&.
.SS "#define KSTRAFE_X_START   12"

.PP
Definition at line 251 of file keymap\&.cpp\&.
.PP
Referenced by getMap()\&.
.SS "#define LBARCOUNT_K95P   (sizeof(\fBK95PLbar\fP) / sizeof(\fBKey\fP))"

.PP
Definition at line 336 of file keymap\&.cpp\&.
.PP
Referenced by getMap()\&.
.SS "#define LBS   17, 6"

.PP
Definition at line 9 of file keymap\&.cpp\&.
.SS "#define M65_HEIGHT   67"

.PP
Definition at line 273 of file keymap\&.cpp\&.
.PP
Referenced by KeyMap::modelHeight()\&.
.SS "#define M65_WIDTH   52"

.PP
Definition at line 272 of file keymap\&.cpp\&.
.PP
Referenced by KeyMap::modelWidth()\&.
.SS "#define N_LAYOUTS   \fBKeyMap::_LAYOUT_MAX\fP"

.PP
Definition at line 341 of file keymap\&.cpp\&.
.PP
Referenced by getMap()\&.
.SS "#define N_MODELS   \fBKeyMap::_MODEL_MAX\fP"

.PP
Definition at line 340 of file keymap\&.cpp\&.
.PP
Referenced by getMap()\&.
.SS "#define NS   12, 12"

.PP
Definition at line 6 of file keymap\&.cpp\&.
.SS "#define patch(map, patches)   \fB_patch\fP(map, patches, \fBPATCH_COUNT\fP(patches))"

.PP
Definition at line 120 of file keymap\&.cpp\&.
.PP
Referenced by getMap()\&.
.SS "#define PATCH_COUNT(\fBpatch\fP)   (sizeof(\fBpatch\fP) / sizeof(\fBKeyPatch\fP))"

.PP
Definition at line 119 of file keymap\&.cpp\&.
.SS "#define SABRE_HEIGHT   \fBM65_HEIGHT\fP"

.PP
Definition at line 286 of file keymap\&.cpp\&.
.SS "#define SABRE_WIDTH   \fBM65_WIDTH\fP"

.PP
Definition at line 285 of file keymap\&.cpp\&.
.SS "#define SCIM_HEIGHT   \fBM65_HEIGHT\fP"

.PP
Definition at line 327 of file keymap\&.cpp\&.
.SS "#define SCIM_WIDTH   \fBM65_WIDTH\fP"

.PP
Definition at line 326 of file keymap\&.cpp\&.
.SH "Function Documentation"
.PP 
.SS "static void _patch (QHash< QString, \fBKey\fP > &map, const \fBKeyPatch\fP *patches, intpatchCount)\fC [static]\fP"

.PP
Definition at line 121 of file keymap\&.cpp\&.
.PP
References Key::_friendlyName, and Key::_storageName\&.
.PP
.nf
121                                                                                      {
122     for(const KeyPatch* p = patches; p < patches + patchCount; p++){
123         Key& key = map[p->name];
124         key\&._storageName = p->_storageName;
125         key\&._friendlyName = p->_friendlyName;
126     }
127 }
.fi
.SS "static QHash<QString, \fBKey\fP> getMap (\fBKeyMap::Model\fPmodel, \fBKeyMap::Layout\fPlayout)\fC [static]\fP"

.PP
Definition at line 344 of file keymap\&.cpp\&.
.PP
References KeyMap::DE, KeyMap::DK, KeyMap::ES, KeyMap::EU, KeyMap::EU_DVORAK, KeyMap::FR, KeyMap::GB_DVORAK, KeyMap::GLAIVE, KeyMap::HARPOON, Key::height, KeyMap::isISO(), KeyMap::isJP(), KeyMap::isPTBR(), KeyMap::IT, KeyMap::JP, KeyMap::K63, K63_TOP_COUNT, KeyMap::K65, K65_TOP_COUNT, K65_WIDTH, KeyMap::K68, K68_TOP_COUNT, KeyMap::K70, K70_X_START, KeyMap::K95, K95BaseMap, KeyMap::K95P, K95P_X_START, KEYCOUNT_GLAIVE, KEYCOUNT_HARPOON, KEYCOUNT_K95, KEYCOUNT_M65, KEYCOUNT_SABRE, KEYCOUNT_SCIM, KSTRAFE_X_START, LBARCOUNT_K95P, KeyMap::M65, KeyMap::MX, N_LAYOUTS, N_MODELS, key::name, KeyMap::NO, patch, patchABNT2(), patchANSI(), patchISO(), patchJP106(), patchJP106fn(), KeyMap::PT_BR, KeyMap::SABRE, KeyMap::SCIMITAR, KeyMap::SE, standardMaps, KeyMap::STRAFE, KeyMap::US_DVORAK, Key::width, Key::x, and Key::y\&.
.PP
.nf
344                                                                          {
345     if(model < 0 || layout < 0 || model >= N_MODELS || layout >= N_LAYOUTS)
346         return QHash<QString, Key>();
347     // Return the map if it's already filled out
348     QHash<QString, Key>& map = standardMaps[model][layout];
349     if(!map\&.empty())
350         return map;
351     // Otherwise, create it
352     switch(model){
353     case KeyMap::K95:{
354         // The K95 maps serve as bases for all the other keyboards
355         // Fetch the master map, or create it if not yet done
356         if(K95BaseMap\&.empty()){
357             for(const Key* key = K95Keys; key < K95Keys + KEYCOUNT_K95; key++)
358                 K95BaseMap[key->name] = *key;
359         }
360         map = K95BaseMap;
361         // Patch the map for the layout
362         switch(layout){
363         case KeyMap::DK:
364             patch(map, patchDK);
365             break;
366         case KeyMap::EU_DVORAK:
367             patch(map, patchDvorak);    // fall through
368         case KeyMap::EU:
369             patch(map, patchEU);
370             break;
371         case KeyMap::GB_DVORAK:
372         case KeyMap::US_DVORAK:
373             patch(map, patchDvorak);
374             break;
375         case KeyMap::FR:
376             patch(map, patchFR);
377             break;
378         case KeyMap::DE:
379             patch(map, patchDE);
380             break;
381         case KeyMap::IT:
382             patch(map, patchIT);
383             break;
384         case KeyMap::NO:
385             patch(map, patchNO);
386             break;
387         case KeyMap::MX:
388             patch(map, patchMX);
389             break;
390         case KeyMap::PT_BR:
391             patch(map, patchPTBR);
392             break;
393         case KeyMap::ES:
394             patch(map, patchES);
395             break;
396         case KeyMap::SE:
397             patch(map, patchSE);
398             break;
399         case KeyMap::JP:
400             patch(map, patchJP);
401             break;
402         default:;
403             // English QWERTY - no patch needed
404         }
405         if(KeyMap::isJP(layout))
406             patchJP106(map);
407         else if(KeyMap::isPTBR(layout))
408             patchABNT2(map);
409         else if(KeyMap::isISO(layout))
410             patchISO(map);
411         else
412             patchANSI(map);
413         // Done! return the map
414         break;
415     }
416     case KeyMap::K95P:{
417         // The K95 Platinum map is based on the K95
418         map = getMap(KeyMap::K95, layout);
419         // Remove excess G keys
420         map\&.remove("g7");
421         map\&.remove("g8");
422         map\&.remove("g9");
423         map\&.remove("g10");
424         map\&.remove("g11");
425         map\&.remove("g12");
426         map\&.remove("g13");
427         map\&.remove("g14");
428         map\&.remove("g15");
429         map\&.remove("g16");
430         map\&.remove("g17");
431         map\&.remove("g18");
432         // Place the remaining G keys vertically
433         map["g1"]\&.x = 22;
434         map["g2"]\&.x = 22;
435         map["g3"]\&.x = 22;
436         map["g4"]\&.x = 22;
437         map["g5"]\&.x = 22;
438         map["g6"]\&.x = 22;
439         //map["g1"]\&.y = 14+(12*0);
440         map["g2"]\&.y = 26; //14+(12*1)
441         map["g3"]\&.y = 38; //14+(12*2)
442         map["g4"]\&.y = 50; //14+(12*3)
443         map["g5"]\&.y = 62; //14+(12*4)
444         map["g6"]\&.y = 74; //14+(12*5)
445         // Remove M keys
446         map\&.remove("m1");
447         map\&.remove("m2");
448         map\&.remove("m3");
449         // Centre MR/Brightness/Winlock between F1 and F4
450         map["mr"]\&.x = 64;
451         map["light"]\&.x = 75;
452         map["lock"]\&.x = 86;
453         // Resize them
454         map["mr"]\&.height = 8;
455         map["light"]\&.height = 8;
456         map["lock"]\&.height = 8;
457         map["mr"]\&.width = 11;
458         map["light"]\&.width = 11;
459         map["lock"]\&.width = 11;
460         // Mute is above Stop
461         map["mute"]\&.x -= 11;
462         map["voldn"]\&.x -= 11;
463         map["volup"]\&.x -= 11;
464         // Move the buttons on the top a bit further down to centre them
465         map["mr"]\&.y += 1;
466         map["light"]\&.y += 1;
467         map["lock"]\&.y += 1;
468         map["mute"]\&.y += 1;
469         map["voldn"]\&.y += 1;
470         map["volup"]\&.y += 1;
471         // Shift all keys down (to make room for the lightbar), and to the left
472         QMutableHashIterator<QString, Key> i(map);
473         while(i\&.hasNext()){
474             i\&.next();
475             i\&.value()\&.x -= K95P_X_START;
476             i\&.value()\&.y += 6;
477         }
478         // Add lightbar
479         for(const Key* key = K95PLbar; key < K95PLbar + LBARCOUNT_K95P; key++)
480                 map\&.insert(key->name, *key);
481 
482         break;
483     }
484     case KeyMap::K70:{
485         // The K70 maps are based on the K95 maps\&. However all the keys are shifted left and the G keys are removed
486         map = getMap(KeyMap::K95, layout);
487         QMutableHashIterator<QString, Key> i(map);
488         while(i\&.hasNext()){
489             i\&.next();
490             // Move key to left\&. Remove it if it fell off the edge
491             if((i\&.value()\&.x -= K70_X_START) < 0)
492                 i\&.remove();
493         }
494         // Remove the M buttons as well
495         map\&.remove("mr");
496         map\&.remove("m1");
497         map\&.remove("m2");
498         map\&.remove("m3");
499         // Done!
500         break;
501     }
502     case KeyMap::K68:{
503         // Same as the K70, except volume up and down keys
504         map = getMap(KeyMap::K70, layout);
505         for(const Key* key = K68TopRow; key < K68TopRow + K68_TOP_COUNT; key++)
506             map[key->name] = *key;
507 
508         break;
509     }
510     case KeyMap::K65:{
511         // The K65 maps additionally remove the numpad and have a modified top row
512         map = getMap(KeyMap::K70, layout);
513         QMutableHashIterator<QString, Key> i(map);
514         while(i\&.hasNext()){
515             i\&.next();
516             if(i\&.value()\&.x >= K65_WIDTH)
517                 i\&.remove();
518         }
519         for(const Key* key = K65TopRow; key < K65TopRow + K65_TOP_COUNT; key++)
520             map[key->name] = *key;
521 
522         map\&.remove("rwin");
523         map["fn"] = KStrafeKeys[3];
524         map["fn"]\&.x -= 12;
525 
526         if(KeyMap::isJP(layout))
527             patchJP106fn(map);
528 
529         // Done!
530         break;
531     }
532     case KeyMap::K63:{
533         // Same as the K65 but without the Fn key
534         map = getMap(KeyMap::K70, layout);
535         QMutableHashIterator<QString, Key> i(map);
536         while(i\&.hasNext()){
537             i\&.next();
538             if(i\&.value()\&.x >= K65_WIDTH)
539                 i\&.remove();
540         }
541         for(const Key* key = K63TopRow; key < K63TopRow + K63_TOP_COUNT; key++)
542             map[key->name] = *key;
543 
544         break;
545     }
546     case KeyMap::STRAFE:{
547         // The Strafe RGB maps are based on the K70 map minus the media keys
548         map = getMap(KeyMap::K70, layout);
549         //move light and lock right
550         map["light"]\&.x=285 - K70_X_START;
551         //map["light"]\&.hasLed=false;
552         map["lock"]\&.x=297 - K70_X_START;
553         //map["lock"]\&.hasLed=false;
554         // move everything right to make the space for the left sidelight
555         QMutableHashIterator<QString, Key> i(map);
556         while(i\&.hasNext()){
557             i\&.next();
558             i\&.value()\&.x += KSTRAFE_X_START;
559         }
560         // Add Strafe lights and keys
561         map["lsidel"] = KStrafeKeys[0];
562         map["rsidel"] = KStrafeKeys[1];
563         map["logo"] = KStrafeKeys[2];
564         map["fn"] = KStrafeKeys[3];
565         map\&.remove("rwin");
566         // remove media controls
567         map\&.remove("mute");
568         map\&.remove("volup");
569         map\&.remove("voldn");
570         map\&.remove("stop");
571         map\&.remove("prev");
572         map\&.remove("play");
573         map\&.remove("next");
574 
575         if(KeyMap::isJP(layout))
576             patchJP106fn(map);
577 
578         // Done!
579         break;
580     }
581     case KeyMap::M65:{
582         // M65 isn't a keyboard; all mouse maps are unique\&.
583         for(const Key* key = M65Keys; key < M65Keys + KEYCOUNT_M65; key++){
584             // Keyboard keys are written from the center because that's where the LEDs are, but the mouse buttons are odd shapes so they're
585             // written from the upper left
586             Key translatedKey = *key;
587             translatedKey\&.x += translatedKey\&.width / 2;
588             translatedKey\&.y += translatedKey\&.height / 2;
589             map[key->name] = translatedKey;
590         }
591         // Mice also have no layout patches - no other changes necessary
592         break;
593     }
594     case KeyMap::SABRE:{
595         // Sabre mouse
596         for(const Key* key = SabreKeys; key < SabreKeys + KEYCOUNT_SABRE; key++){
597             // Like the M65, the keys are upper-left justified
598             Key translatedKey = *key;
599             translatedKey\&.x += translatedKey\&.width / 2;
600             translatedKey\&.y += translatedKey\&.height / 2;
601             map[key->name] = translatedKey;
602         }
603         break;
604     }
605     case KeyMap::SCIMITAR:{
606         // Scimitar mouse
607         for(const Key* key = ScimKeys; key < ScimKeys + KEYCOUNT_SCIM; key++){
608             Key translatedKey = *key;
609             translatedKey\&.x += translatedKey\&.width / 2;
610             translatedKey\&.y += translatedKey\&.height / 2;
611             map[key->name] = translatedKey;
612         }
613         break;
614     }
615     case KeyMap::HARPOON:{
616         // Harpoon mouse
617         for(const Key* key = HarpoonKeys; key < HarpoonKeys + KEYCOUNT_HARPOON; key++){
618             Key translatedKey = *key;
619             translatedKey\&.x += translatedKey\&.width / 2;
620             translatedKey\&.y += translatedKey\&.height / 2;
621             map[key->name] = translatedKey;
622         }
623         break;
624     }
625     case KeyMap::GLAIVE:{
626         // Glaive mouse
627         for(const Key* key = GlaiveKeys; key < GlaiveKeys + KEYCOUNT_GLAIVE; key++){
628             Key translatedKey = *key;
629             translatedKey\&.x += translatedKey\&.width / 2;
630             translatedKey\&.y += translatedKey\&.height / 2;
631             map[key->name] = translatedKey;
632         }
633         break;
634     }
635     default:;    // <- stop GCC from complaining
636     }
637     // Map is finished, return result
638     return map;
639 }
.fi
.SS "static void patchABNT2 (QHash< QString, \fBKey\fP > &map)\fC [static]\fP"

.PP
Definition at line 198 of file keymap\&.cpp\&.
.PP
References Key::width, and Key::x\&.
.PP
Referenced by getMap()\&.
.PP
.nf
198                                                 {
199     map\&.remove("yen");
200     map\&.remove("henkan");
201     map\&.remove("muhenkan");
202     map\&.remove("katahira");
203     map\&.remove("bslash");
204 
205     // Resize RShift
206     Key& rshift = map["rshift"];
207     rshift\&.width -= 12;
208     rshift\&.x += 6;
209 }
.fi
.SS "static void patchANSI (QHash< QString, \fBKey\fP > &map)\fC [static]\fP"

.PP
Definition at line 141 of file keymap\&.cpp\&.
.PP
References ANSI_ENTER_H, ANSI_ENTER_W, ANSI_ENTER_X, ANSI_ENTER_Y, ANSI_LSHIFT_W, ANSI_LSHIFT_X, Key::height, patchnonJP106(), Key::width, Key::x, and Key::y\&.
.PP
Referenced by getMap()\&.
.PP
.nf
141                                                {
142     patchnonJP106(map);
143     map\&.remove("bslash_iso");
144     map\&.remove("hash");
145     Key& enter = map["enter"];
146     enter\&.x = ANSI_ENTER_X;
147     enter\&.y = ANSI_ENTER_Y;
148     enter\&.width = ANSI_ENTER_W;
149     enter\&.height = ANSI_ENTER_H;
150     Key& lshift = map["lshift"];
151     lshift\&.x = ANSI_LSHIFT_X;
152     lshift\&.width = ANSI_LSHIFT_W;
153 }
.fi
.SS "static void patchISO (QHash< QString, \fBKey\fP > &map)\fC [static]\fP"

.PP
Definition at line 137 of file keymap\&.cpp\&.
.PP
References patchnonJP106()\&.
.PP
Referenced by getMap()\&.
.PP
.nf
137                                               {
138     patchnonJP106(map);
139     map\&.remove("bslash");
140 }
.fi
.SS "static void patchJP106 (QHash< QString, \fBKey\fP > &map)\fC [static]\fP"

.PP
Definition at line 154 of file keymap\&.cpp\&.
.PP
References ANSI_LSHIFT_W, ANSI_LSHIFT_X, Key::width, and Key::x\&.
.PP
Referenced by getMap()\&.
.PP
.nf
154                                                 {
155     // First apply the ISO patch
156     map\&.remove("bslash");
157 
158     // Resize Backspace
159     Key& bspace = map["bspace"];
160     bspace\&.width -= 12;
161     bspace\&.x = 206;
162 
163     // Resize RShift
164     Key& rshift = map["rshift"];
165     rshift\&.width -= 12;
166     rshift\&.x += 6;
167 
168     // Resize Spacebar
169     Key& space = map["space"];
170     space\&.width -= 26;
171     space\&.x -= 1;
172 
173     // Left shift
174     Key& lshift = map["lshift"];
175     lshift\&.x = ANSI_LSHIFT_X;
176     lshift\&.width = ANSI_LSHIFT_W;
177 
178     map\&.remove("bslash_iso");
179 
180     // Resize and move ralt to make space for the extra keys
181     Key& ralt = map["ralt"];
182     ralt\&.x += 11;
183     ralt\&.width += 2;
184 
185     // None of these layouts have rwin
186     map\&.remove("rwin");
187 }
.fi
.SS "static void patchJP106fn (QHash< QString, \fBKey\fP > &map)\fC [static]\fP"

.PP
Definition at line 189 of file keymap\&.cpp\&.
.PP
References Key::width, and Key::x\&.
.PP
Referenced by getMap()\&.
.PP
.nf
189                                                   {
190     if(map\&.contains("fn")){
191         map\&.remove("ralt");
192         Key& fn = map["fn"];
193         fn\&.width += 4;
194         fn\&.x -= 2;
195     }
196 }
.fi
.SS "static void patchnonJP106 (QHash< QString, \fBKey\fP > &map)\fC [static]\fP"

.PP
Definition at line 130 of file keymap\&.cpp\&.
.PP
Referenced by patchANSI(), and patchISO()\&.
.PP
.nf
130                                                    {
131     map\&.remove("yen");
132     map\&.remove("henkan");
133     map\&.remove("muhenkan");
134     map\&.remove("katahira");
135     map\&.remove("ro");
136 }
.fi
.SH "Variable Documentation"
.PP 
.SS "const \fBKey\fP GlaiveKeys[]\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    {0, "Left Mouse", "mouse1", 17, 3, 14, 18, false, true}, {0, "Right Mouse", "mouse2", 37, 3, 14, 18, false, true}, {0, "Middle Mouse", "mouse3", 31, 9, 7, 7, false, true}, {0, "Front light", "front", 16, -5, 36, 8, true, false },
    {0, "Wheel Up", "wheelup", 31, 5, 7, 5, false, true}, {0, "Wheel Down", "wheeldn", 31, 15, 7, 5, false, true}, {0, "Side Lights", "side", 22, 24, 7, 20, true, false},
    {0, "DPI Cycle", "dpiup", 31, 19, 6, 12, false, true}, {0, "Logo Light", "back", 24, 43, 20, 20, true, false},
    {0, "Forward", "mouse5", 15, 22, 5, 11, false, true}, {0, "Back", "mouse4", 15, 32, 5, 11, false, true}
    }
.fi
.PP
Definition at line 301 of file keymap\&.cpp\&.
.SS "const \fBKey\fP HarpoonKeys[]\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    {0, "Left Mouse", "mouse1", 10, 5, 14, 26, false, true}, {0, "Right Mouse", "mouse2", 30, 5, 14, 26, false, true}, {0, "Middle Mouse", "mouse3", 25, 11, 6, 7, false, true},
    {0, "Wheel Up", "wheelup", 25, 7, 6, 5, false, true}, {0, "Wheel Down", "wheeldn", 25, 17, 6, 5, false, true},
    {0, "DPI Cycle", "dpiup", 25, 23, 6, 10, false, true}, {0, "Logo Light", "dpi", 17, 40, 20, 20, true, false},
    {0, "Forward", "mouse5", 3, 24, 5, 10, false, true}, {0, "Back", "mouse4", 3, 33, 5, 10, false, true}
    }
.fi
.PP
Definition at line 289 of file keymap\&.cpp\&.
.SS "const \fBKey\fP K63TopRow[]\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    {0, "Stop", "stop",  38  - 37, 0, 12, 8, true, true}, {0, "Previous", "prev",  38  - 26, 0, 12, 8, true, true}, {0, "Play/Pause", "play",  38  - 15, 0, 12, 8, true, true}, {0, "Next", "next",  38  - 4, 0, 12, 8, true, true}, {0, "Brightness", "light", 170 -  38 , 0, 12, 12, true, true}, {0, "Windows Lock", "lock", 180 -  38 , 0, 12, 12, true, true}, {0, "Mute", "mute", 222 -  38 , 0, 13, 8, true, true}, {0, "Volume Down", "voldn", 234 -  38 , 0, 13, 8, true, true}, {0, "Volume Up", "volup", 246 -  38 , 0, 13, 8, true, true}
}
.fi
.PP
Definition at line 245 of file keymap\&.cpp\&.
.SS "const \fBKey\fP K65TopRow[]\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    {0, "Brightness", "light", 164 -  38 , 0, 12, 12, true, true}, {0, "Mute", "mute", 176 -  38 , 0, 12, 12, true, true}, {0, "Volume Down", "voldn", 192 -  38 , 0, 14, 8, true, true}, {0, "Volume Up", "volup", 205 -  38 , 0, 14, 8, true, true}, {0, "Windows Lock", "lock", 222 -  38 , 0, 12, 12, true, true}
}
.fi
.PP
Definition at line 240 of file keymap\&.cpp\&.
.SS "const \fBKey\fP K68TopRow[]\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    {0, "Volume Down", "voldn", 285 -  38 , 0, 13, 8, true, true}, {0, "Volume Up", "volup", 297 -  38 , 0, 13, 8, true, true},
}
.fi
.PP
Definition at line 235 of file keymap\&.cpp\&.
.SS "QHash<QString, \fBKey\fP> K95BaseMap\fC [static]\fP"

.PP
Definition at line 342 of file keymap\&.cpp\&.
.PP
Referenced by getMap()\&.
.SS "const \fBKey\fP K95Keys[]\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    {0, 0, "mr", 38, 0,  12, 12 , true, true}, {0, 0, "m1", 50, 0,  12, 12 , true, true}, {0, 0, "m2", 62, 0,  12, 12 , true, true}, {0, 0, "m3", 74, 0,  12, 12 , true, true}, {0, "Brightness", "light", 222, 0,  12, 12 , true, true}, {0, "Windows Lock", "lock", 234, 0,  12, 12 , true, true}, {0, "Mute", "mute", 273, 0, 13, 8, true, true}, {0, "Volume Up", "volup", 290, -2, 18, 6, false, true}, {0, "Volume down", "voldn", 290, 2, 18, 6, false, true},
    {0, 0, "g1", 0, 14,  12, 12 , true, true}, {0, 0, "g2", 11, 14,  12, 12 , true, true}, {0, 0, "g3", 22, 14,  12, 12 , true, true}, {0, "Esc", "esc", 38, 14,  12, 12 , true, true}, {0, 0, "f1", 58, 14,  12, 12 , true, true}, {0, 0, "f2", 70, 14,  12, 12 , true, true}, {0, 0, "f3", 82, 14,  12, 12 , true, true}, {0, 0, "f4", 94, 14,  12, 12 , true, true}, {0, 0, "f5", 114, 14,  12, 12 , true, true}, {0, 0, "f6", 126, 14,  12, 12 , true, true}, {0, 0, "f7", 138, 14,  12, 12 , true, true}, {0, 0, "f8", 150, 14,  12, 12 , true, true}, {0, 0, "f9", 170, 14,  12, 12 , true, true}, {0, 0, "f10", 182, 14,  12, 12 , true, true}, {0, 0, "f11", 194, 14,  12, 12 , true, true}, {0, 0, "f12", 206, 14,  12, 12 , true, true}, {0, "Print Screen\nSysRq", "prtscn", 222, 14,  12, 12 , true, true}, {0, "Scroll Lock", "scroll", 234, 14,  12, 12 , true, true}, {0, "Pause\nBreak", "pause", 246, 14,  12, 12 , true, true}, {0, "Stop", "stop", 262, 14, 12, 8, true, true}, {0, "Previous", "prev", 273, 14, 13, 8, true, true}, {0, "Play/Pause", "play", 285, 14, 13, 8, true, true}, {0, "Next", "next", 296, 14, 12, 8, true, true},
    {0, 0, "g4", 0, 25,  12, 12 , true, true}, {0, 0, "g5", 11, 25,  12, 12 , true, true}, {0, 0, "g6", 22, 25,  12, 12 , true, true}, {0, "`", "grave", 38, 27,  12, 12 , true, true}, {0, 0, "1", 50, 27,  12, 12 , true, true}, {0, 0, "2", 62, 27,  12, 12 , true, true}, {0, 0, "3", 74, 27,  12, 12 , true, true}, {0, 0, "4", 86, 27,  12, 12 , true, true}, {0, 0, "5", 98, 27,  12, 12 , true, true}, {0, 0, "6", 110, 27,  12, 12 , true, true}, {0, 0, "7", 122, 27,  12, 12 , true, true}, {0, 0, "8", 134, 27,  12, 12 , true, true}, {0, 0, "9", 146, 27,  12, 12 , true, true}, {0, 0, "0", 158, 27,  12, 12 , true, true}, {0, "-", "minus", 170, 27,  12, 12 , true, true}, {0, "=", "equal", 182, 27,  12, 12 , true, true}, {0, "¥", "yen", 194, 27,  12, 12 , true, true}, {0, "Backspace", "bspace", 200, 27, 24, 12, true, true}, {0, "Insert", "ins", 222, 27,  12, 12 , true, true}, {0, "Home", "home", 234, 27,  12, 12 , true, true}, {0, "Page Up", "pgup", 246, 27,  12, 12 , true, true}, {0, "Num Lock", "numlock", 261, 27,  12, 12 , true, true}, {0, "NumPad /", "numslash", 273, 27,  12, 12 , true, true}, {0, "NumPad *", "numstar", 285, 27,  12, 12 , true, true}, {0, "NumPad -", "numminus", 297, 27,  12, 12 , true, true},
    {0, 0, "g7", 0, 39,  12, 12 , true, true}, {0, 0, "g8", 11, 39,  12, 12 , true, true}, {0, 0, "g9", 22, 39,  12, 12 , true, true}, {0, "Tab", "tab", 41, 39, 18, 12, true, true}, {0, 0, "q", 56, 39,  12, 12 , true, true}, {0, 0, "w", 68, 39,  12, 12 , true, true}, {0, 0, "e", 80, 39,  12, 12 , true, true}, {0, 0, "r", 92, 39,  12, 12 , true, true}, {0, 0, "t", 104, 39,  12, 12 , true, true}, {0, 0, "y", 116, 39,  12, 12 , true, true}, {0, 0, "u", 128, 39,  12, 12 , true, true}, {0, 0, "i", 140, 39,  12, 12 , true, true}, {0, 0, "o", 152, 39,  12, 12 , true, true}, {0, 0, "p", 164, 39,  12, 12 , true, true}, {0, "[", "lbrace", 176, 39,  12, 12 , true, true}, {0, "]", "rbrace", 188, 39,  12, 12 , true, true}, {0, "\\", "bslash", 203, 39, 18, 12, true, true}, {0, "Enter", "enter", 203, 39, 18, 24, true, true}, {0, "Delete", "del", 222, 39,  12, 12 , true, true}, {0, "End", "end", 234, 39,  12, 12 , true, true}, {0, "Page Down", "pgdn", 246, 39,  12, 12 , true, true}, {0, "NumPad 7", "num7", 261, 39,  12, 12 , true, true}, {0, "NumPad 8", "num8", 273, 39,  12, 12 , true, true}, {0, "NumPad 9", "num9", 285, 39,  12, 12 , true, true}, {0, "NumPad +", "numplus", 297, 45, 12, 24, true, true},
    {0, 0, "g10", 0, 50,  12, 12 , true, true}, {0, 0, "g11", 11, 50,  12, 12 , true, true}, {0, 0, "g12", 22, 50,  12, 12 , true, true}, {0, "Caps Lock", "caps", 42, 51, 20, 12, true, true}, {0, 0, "a", 59, 51,  12, 12 , true, true}, {0, 0, "s", 71, 51,  12, 12 , true, true}, {0, 0, "d", 83, 51,  12, 12 , true, true}, {0, 0, "f", 95, 51,  12, 12 , true, true}, {0, 0, "g", 107, 51,  12, 12 , true, true}, {0, 0, "h", 119, 51,  12, 12 , true, true}, {0, 0, "j", 131, 51,  12, 12 , true, true}, {0, 0, "k", 143, 51,  12, 12 , true, true}, {0, 0, "l", 155, 51,  12, 12 , true, true}, {0, ";", "colon", 167, 51,  12, 12 , true, true}, {0, "'", "quote", 179, 51,  12, 12 , true, true}, {0, "#", "hash", 191, 51,  12, 12 , true, true}, {0, "NumPad 4", "num4", 261, 51,  12, 12 , true, true}, {0, "NumPad 5", "num5", 273, 51,  12, 12 , true, true}, {0, "NumPad 6", "num6", 285, 51,  12, 12 , true, true},
    {0, 0, "g13", 0, 64,  12, 12 , true, true}, {0, 0, "g14", 11, 64,  12, 12 , true, true}, {0, 0, "g15", 22, 64,  12, 12 , true, true}, {0, "Left Shift", "lshift", 39, 63, 14, 12, true, true}, {"bslash", "\\", "bslash_iso", 53, 63,  12, 12 , true, true}, {0, 0, "z", 65, 63,  12, 12 , true, true}, {0, 0, "x", 77, 63,  12, 12 , true, true}, {0, 0, "c", 89, 63,  12, 12 , true, true}, {0, 0, "v", 101, 63,  12, 12 , true, true}, {0, 0, "b", 113, 63,  12, 12 , true, true}, {0, 0, "n", 125, 63,  12, 12 , true, true}, {0, 0, "m", 137, 63,  12, 12 , true, true}, {0, ",", "comma", 149, 63,  12, 12 , true, true}, {0, "\&.", "dot", 161, 63,  12, 12 , true, true}, {0, "/", "slash", 173, 63,  12, 12 , true, true}, {0, "_", "ro", 185, 63,  12, 12 , true, true}, {0, "Right Shift", "rshift", 196, 63, 32, 12, true, true}, {0, "Up", "up", 234, 63,  12, 12 , true, true}, {0, "NumPad 1", "num1", 261, 63,  12, 12 , true, true}, {0, "NumPad 2", "num2", 273, 63,  12, 12 , true, true}, {0, "NumPad 3", "num3", 285, 63,  12, 12 , true, true}, {0, "NumPad Enter", "numenter", 297, 69, 12, 24, true, true},
    {0, 0, "g16", 0, 75,  12, 12 , true, true}, {0, 0, "g17", 11, 75,  12, 12 , true, true}, {0, 0, "g18", 22, 75,  12, 12 , true, true}, {0, "Left Ctrl", "lctrl", 40, 75, 16, 12, true, true}, {0, "Left Windows", "lwin", 54, 75,  12, 12 , true, true}, {0, "Left Alt", "lalt", 67, 75, 14, 12, true, true}, {0, "無変換", "muhenkan", 80, 75,  12, 12 , true, true}, {0, "Space", "space", 116, 75, 84, 12, true, true}, {0, "変換", "henkan", 150, 75,  12, 12 , true, true}, {0, "ひらがな カタカナ ローマ字", "katahira", 162, 75,  12, 12 , true, true}, {0, "Right Alt", "ralt", 165, 75, 14, 12, true, true}, {0, "Right Windows", "rwin", 178, 75,  12, 12 , true, true}, {0, "Menu", "rmenu", 190, 75,  12, 12 , true, true}, {0, "Right Ctrl", "rctrl", 204, 75, 16, 12, true, true}, {0, "Left", "left", 222, 75,  12, 12 , true, true}, {0, "Down", "down", 234, 75,  12, 12 , true, true}, {0, "Right", "right", 246, 75,  12, 12 , true, true}, {0, "NumPad 0", "num0", 267, 75, 24, 12, true, true}, {0, "NumPad \&.", "numdot", 285, 75,  12, 12 , true, true}
}
.fi
.PP
Definition at line 12 of file keymap\&.cpp\&.
.SS "const \fBKey\fP K95PLbar[]\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    {0, 0, "topbar1", 4, -3,  17, 6 , true, false}, {0, 0, "topbar2", 19, -3,  17, 6 , true, false}, {0, 0, "topbar3", 34, -3,  17, 6 , true, false}, {0, 0, "topbar4", 49, -3,  17, 6 , true, false}, {0, 0, "topbar5", 64, -3,  17, 6 , true, false}, {0, 0, "topbar6", 79, -3,  17, 6 , true, false},
    {0, 0, "topbar7", 94, -3,  17, 6 , true, false}, {0, 0, "topbar8", 109, -3,  17, 6 , true, false}, {0, 0, "topbar9", 124, -3,  17, 6 , true, false}, {0, 0, "topbar10", 139, -3,  17, 6 , true, false}, {0, 0, "topbar11", 154, -3,  17, 6 , true, false}, {0, 0, "topbar12", 169, -3,  17, 6 , true, false},
    {0, 0, "topbar13", 184, -3,  17, 6 , true, false}, {0, 0, "topbar14", 199, -3,  17, 6 , true, false}, {0, 0, "topbar15", 214, -3,  17, 6 , true, false}, {0, 0, "topbar16", 229, -3,  17, 6 , true, false}, {0, 0, "topbar17", 244, -3,  17, 6 , true, false}, {0, 0, "topbar18", 259, -3,  17, 6 , true, false},
    {0, 0, "topbar19", 274, -3,  17, 6 , true, false},
}
.fi
.PP
Definition at line 330 of file keymap\&.cpp\&.
.SS "const \fBKey\fP KStrafeKeys[]\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    {0, "Sidelight", "lsidel", 0,   76  /2,  12 ,   76  , true, false},
    {0, "Sidelight", "rsidel",  ( ( 298  -  38 )  + ( 12  * 2)) ,   76  /2,  12 ,   76  , true, false},
    {0, "Logo", "logo",  12 , 0,  12, 12 , true, false},
    {0, "Function", "fn", 152, 75,  12, 12 , true, true}
}
.fi
.PP
Definition at line 255 of file keymap\&.cpp\&.
.SS "const \fBKey\fP M65Keys[]\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    {0, "Left Mouse", "mouse1", 8, 0, 14, 32, false, true}, {0, "Right Mouse", "mouse2", 30, 0, 14, 32, false, true}, {0, "Middle Mouse", "mouse3", 22, 8, 8, 7, false, true},
    {0, "Wheel Up", "wheelup", 22, 4, 8, 5, false, true}, {0, "Wheel Down", "wheeldn", 22, 14, 8, 5, false, true}, {0, "Wheel Light", "front", 22, 15, 8, 8, true, false},
    {0, "DPI Up", "dpiup", 22, 19, 8, 6, false, true}, {0, "DPI Light", "dpi", 22, 24, 8, 8, true, false}, {0, "DPI Down", "dpidn", 22, 31, 8, 6, false, true},
    {0, "Forward", "mouse5", 5, 24, 5, 9, false, true}, {0, "Back", "mouse4", 5, 33, 5, 10, false, true}, {0, "Sniper", "sniper", 0, 25, 5, 15, false, true},
    {0, "Logo", "back", 14, 55, 24, 12, true, false}
}
.fi
.PP
Definition at line 263 of file keymap\&.cpp\&.
.SS "const \fBKeyPatch\fP patchDE[]\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    {"caret", "^", "grave"}, {"ss", "ß", "minus"}, {"grave", "´", "equal"},
    {"z", "Z", "y"}, {"ue", "Ü", "lbrace"}, {"plus", "+", "rbrace"},
    {"oe", "Ö", "colon"}, {"ae", "Ä", "quote"},
    {"angle", "<", "bslash_iso"}, {"y", "Y", "z"}, {"minus", "-", "slash"}
}
.fi
.PP
Definition at line 57 of file keymap\&.cpp\&.
.SS "const \fBKeyPatch\fP patchDK[]\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    {0, "§", "grave"}, {0, "+", "minus"}, {0, "´", "equal"},
    {0, "Å", "lbrace"}, {0, "¨", "rbrace"},
    {0, "Æ", "colon"}, {0, "Ø", "quote"}, {0, "'", "hash"},
    {0, "<", "bslash_iso"}, {0, "-", "slash"},
}
.fi
.PP
Definition at line 38 of file keymap\&.cpp\&.
.SS "const \fBKeyPatch\fP patchDvorak[]\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    {0, "[", "minus"}, {0, "]", "equal"},
    {0, "'", "q"}, {0, ",", "w"}, {0, "\&.", "e"}, {0, "P", "r"}, {0, "Y", "t"}, {0, "F", "y"}, {0, "G", "u"}, {0, "C", "i"}, {0, "R", "o"}, {0, "L", "p"}, {0, "/", "lbrace"}, {0, "=", "rbrace"},
    {0, "O", "s"}, {0, "E", "d"}, {0, "U", "f"}, {0, "I", "g"}, {0, "D", "h"}, {0, "H", "j"}, {0, "T", "k"}, {0, "N", "l"}, {0, "S", "colon"}, {0, "-", "quote"},
    {0, ";", "z"}, {0, "Q", "x"}, {0, "J", "c"}, {0, "K", "v"}, {0, "X", "b"}, {0, "B", "n"}, {0, "W", "comma"}, {0, "V", "dot"}, {0, "Z", "slash"},
}
.fi
.PP
Definition at line 111 of file keymap\&.cpp\&.
.SS "const \fBKeyPatch\fP patchES[]\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    {"oa", "º", "grave"}, {"quote", "'", "minus"}, {"lexclam", "¡", "equal"},
    {"grave", "`", "lbrace"}, {"plus", "+", "rbrace"},
    {"nn", "Ñ", "colon"}, {"accent", "´", "quote"}, {"cc", "Ç", "hash"},
    {"angle", "<", "bslash_iso"}, {"minus", "-", "slash"},
}
.fi
.PP
Definition at line 92 of file keymap\&.cpp\&.
.SS "const \fBKeyPatch\fP patchEU[]\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    {0, "\\ (R)", "hash"},
    {0, "\\ (L)", "bslash_iso"},
}
.fi
.PP
Definition at line 45 of file keymap\&.cpp\&.
.SS "const \fBKeyPatch\fP patchFR[]\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    {"sup2", "²", "grave"}, {0, "&", "1"}, {0, "É", "2"}, {0, "\"", "3"}, {0, "'", "4"}, {0, "(", "5"}, {0, "-", "6"}, {0, "È", "7"}, {0, "_", "8"}, {0, "Ç", "9"}, {0, "À", "0"}, {"rparen", ")", "minus"},
    {"a", "A", "q"}, {"z", "Z", "w"}, {"caret", "^", "lbrace"}, {"dollar", "$", "rbrace"},
    {"q", "Q", "a"}, {"m", "M", "colon"}, {"percent", "Ù", "quote"}, {"star", "*", "hash"},
    {"angle", "<", "bslash_iso"}, {"w", "W", "z"}, {"comma", ",", "m"}, {"semicolon", ";", "comma"}, {"colon", ":", "dot"}, {"exclam", "!", "slash"},
}
.fi
.PP
Definition at line 50 of file keymap\&.cpp\&.
.SS "const \fBKeyPatch\fP patchIT[]\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    {0, "\\", "grave"}, {0, "'", "minus"}, {0, "Ì", "equal"},
    {0, "È", "lbrace"}, {0, "+", "rbrace"},
    {0, "Ò", "colon"}, {0, "À", "quote"}, {0, "Ù", "hash"},
    {0, "<", "bslash_iso"}, {0, "-", "slash"},
}
.fi
.PP
Definition at line 64 of file keymap\&.cpp\&.
.SS "const \fBKeyPatch\fP patchJP[]\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    
}
.fi
.PP
Definition at line 106 of file keymap\&.cpp\&.
.SS "const \fBKeyPatch\fP patchMX[]\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    {0, "|", "grave"}, {0, "'", "minus"}, {0, "¿", "equal"},
    {0, "´", "lbrace"}, {0, "+", "rbrace"},
    {0, "Ñ", "colon"}, {0, "{", "quote"}, {0, "}", "hash"},
    {0, "<", "bslash_iso"}, {0, "-", "slash"},
}
.fi
.PP
Definition at line 78 of file keymap\&.cpp\&.
.SS "const \fBKeyPatch\fP patchNO[]\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    {0, "§", "grave"}, {0, "+", "minus"}, {0, "´", "equal"},
    {0, "Å", "lbrace"}, {0, "¨", "rbrace"},
    {0, "Ø", "colon"}, {0, "Æ", "quote"}, {0, "'", "hash"},
    {0, "<", "bslash_iso"}, {0, "-", "slash"},
}
.fi
.PP
Definition at line 71 of file keymap\&.cpp\&.
.SS "const \fBKeyPatch\fP patchPTBR[]\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    {"quote", "'", "grave"},
    {"accent", "´", "lbrace"}, {"lbrace", "[", "rbrace"},
    {"cc", "Ç", "colon"}, {"tilde", "~", "quote"}, {"rbrace", "]", "hash"},
    {"colon", ";", "slash"}, {"slash", "/", "ro"}, {"numcomma", ",", "numdot"},
}
.fi
.PP
Definition at line 85 of file keymap\&.cpp\&.
.SS "const \fBKeyPatch\fP patchSE[]\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    {"section", "§", "grave"}, {"plus", "+", "minus"}, {"grave", "´", "equal"},
    {"aa", "Å", "lbrace"}, {"umlaut", "¨", "rbrace"},
    {"oe", "Ö", "colon"}, {"ae", "Ä", "quote"}, {"quote", "'", "hash"},
    {"angle", "<", "bslash_iso"}, {"minus", "-", "slash"},
}
.fi
.PP
Definition at line 99 of file keymap\&.cpp\&.
.SS "const \fBKey\fP SabreKeys[]\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    {0, "Left Mouse", "mouse1", 8, 0, 14, 32, false, true}, {0, "Right Mouse", "mouse2", 30, 0, 14, 32, false, true}, {0, "Middle Mouse", "mouse3", 22, 9, 8, 7, false, true}, {0, "Front light", "front", 8, -2, 14, 8, true, false },
    {0, "Wheel Up", "wheelup", 22, 5, 8, 5, false, true}, {0, "Wheel Down", "wheeldn", 22, 15, 8, 5, false, true}, {0, "Wheel Light", "wheel", 22, 5, 8, 15, true, false}, {0, "Extra button", "thumb1", 22, 20, 8, 18, false, true},
    {0, "DPI Up", "dpiup", 5, 3, 5, 7, false, true}, {0, "DPI Down", "dpidn", 5, 10, 5, 7, false, true}, {0, "DPI Light", "dpi", 5, 4, 5, 12, true, false},
    {0, "Forward", "mouse5", 5, 24, 5, 9, false, true}, {0, "Back", "mouse4", 5, 33, 5, 10, false, true},
    {0, "Logo", "back", 14, 50, 24, 12, true, false}
}
.fi
.PP
Definition at line 276 of file keymap\&.cpp\&.
.SS "const \fBKey\fP ScimKeys[]\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    {0, "Left Mouse", "mouse1", 8, 0, 14, 32, false, true}, {0, "Right Mouse", "mouse2", 30, 0, 12, 32, false, true}, {0, "Middle Mouse", "mouse3", 22, 9, 8, 6, false, true}, {0, "Front light", "front", 30, 0, 12, 8, true, false },
    {0, "Wheel Up", "wheelup", 22, 3, 8, 6, false, true}, {0, "Wheel Down", "wheeldn", 22, 14, 8, 6, false, true}, {0, "Wheel Light", "wheel", 22, 3, 8, 17, true, false},
    {0, "DPI Up", "dpiup", 22, 19, 8, 9, false, true}, {0, "DPI Light", "dpi", 1, 12, 8, 4, true, false}, {0, "DPI Down", "dpidn", 22, 28, 8, 9, false, true},
    {0, "Thumb light", "thumb", 0, 21, 10, 24, true, false},
    {0, "1", "thumb1", -13, 18, 7, 7, false, true}, {0, "2", "thumb2", -6, 18, 7, 7, false, true}, {0, "3", "thumb3", 1, 18, 7, 7, false, true},
    {0, "4", "thumb4", -13, 25, 7, 7, false, true}, {0, "5", "thumb5", -6, 25, 7, 7, false, true}, {0, "6", "thumb6", 1, 25, 7, 7, false, true},
    {0, "7", "thumb7", -13, 32, 7, 7, false, true}, {0, "8", "thumb8", -6, 32, 7, 7, false, true}, {0, "9", "thumb9", 1, 32, 7, 7, false, true},
    {0, "10", "thumb10", -13, 39, 7, 7, false, true}, {0, "11", "thumb11", -6, 39, 7, 7, false, true}, {0, "12", "thumb12", 1, 39, 7, 7, false, true},
    {0, "Logo", "back", 14, 50, 24, 16, true, false}
}
.fi
.PP
Definition at line 313 of file keymap\&.cpp\&.
.SS "QHash<QString, \fBKey\fP> standardMaps[\fBKeyMap::_MODEL_MAX\fP][\fBKeyMap::_LAYOUT_MAX\fP]\fC [static]\fP"

.PP
Definition at line 343 of file keymap\&.cpp\&.
.PP
Referenced by getMap()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for ckb-next from the source code\&.
