.TH "KeyMap" 3 "Tue May 16 2017" "Version v0.2.8 at branch master" "ckb-next" \" -*- nroff -*-
.ad l
.nh
.SH NAME
KeyMap \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <src/ckb/keymap\&.h>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBModel\fP { \fBNO_MODEL\fP = -1, \fBK65\fP, \fBK70\fP, \fBK95\fP, \fBSTRAFE\fP, \fBM65\fP, \fBSABRE\fP, \fBSCIMITAR\fP, \fB_MODEL_MAX\fP }"
.br
.ti -1c
.RI "enum \fBLayout\fP { \fBNO_LAYOUT\fP = -1, \fBDK\fP, \fBEU\fP, \fBEU_DVORAK\fP, \fBGB\fP, \fBGB_DVORAK\fP, \fBUS\fP, \fBUS_DVORAK\fP, \fBFR\fP, \fBDE\fP, \fBIT\fP, \fBNO\fP, \fBPL\fP, \fBMX\fP, \fBES\fP, \fBSE\fP, \fB_LAYOUT_MAX\fP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "bool \fBisISO\fP () const "
.br
.ti -1c
.RI "bool \fBisKeyboard\fP () const "
.br
.ti -1c
.RI "bool \fBisMouse\fP () const "
.br
.ti -1c
.RI "\fBKeyMap\fP ()"
.br
.ti -1c
.RI "\fBKeyMap\fP (\fBModel\fP _keyModel, \fBLayout\fP _keyLayout)"
.br
.ti -1c
.RI "QString \fBstrLayout\fP () const "
.br
.ti -1c
.RI "QString \fBstrModel\fP () const "
.br
.ti -1c
.RI "\fBModel\fP \fBmodel\fP () const "
.br
.ti -1c
.RI "\fBLayout\fP \fBlayout\fP () const "
.br
.ti -1c
.RI "QString \fBname\fP () const "
.br
.ti -1c
.RI "uint \fBcount\fP () const "
.br
.ti -1c
.RI "uint \fBwidth\fP () const "
.br
.ti -1c
.RI "uint \fBheight\fP () const "
.br
.ti -1c
.RI "\fBKey\fP \fBkey\fP (const QString &\fBname\fP) const "
.br
.ti -1c
.RI "\fBKey\fP \fBoperator[]\fP (const QString &\fBname\fP) const "
.br
.ti -1c
.RI "bool \fBcontains\fP (const QString &\fBname\fP) const "
.br
.ti -1c
.RI "const QHash< QString, \fBKey\fP > & \fBmap\fP () const "
.br
.ti -1c
.RI "\fBoperator const QHash< QString, Key > &\fP () const "
.br
.ti -1c
.RI "QStringList \fBkeys\fP () const "
.br
.ti -1c
.RI "QList< \fBKey\fP > \fBpositions\fP () const "
.br
.ti -1c
.RI "QString \fBtoStorage\fP (const QString &\fBname\fP)"
.br
.ti -1c
.RI "QString \fBfromStorage\fP (const QString &storage)"
.br
.ti -1c
.RI "QStringList \fBbyPosition\fP () const "
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static QStringList \fBlayoutNames\fP ()"
.br
.ti -1c
.RI "static bool \fBisISO\fP (\fBLayout\fP \fBlayout\fP)"
.br
.ti -1c
.RI "static \fBLayout\fP \fBlocale\fP ()"
.br
.ti -1c
.RI "static bool \fBisKeyboard\fP (\fBModel\fP \fBmodel\fP)"
.br
.ti -1c
.RI "static bool \fBisMouse\fP (\fBModel\fP \fBmodel\fP)"
.br
.ti -1c
.RI "static \fBKeyMap\fP \fBfromName\fP (const QString &\fBname\fP)"
.br
.ti -1c
.RI "static \fBLayout\fP \fBgetLayout\fP (const QString &\fBname\fP)"
.br
.ti -1c
.RI "static QString \fBgetLayout\fP (\fBLayout\fP \fBlayout\fP)"
.br
.ti -1c
.RI "static \fBModel\fP \fBgetModel\fP (const QString &\fBname\fP)"
.br
.ti -1c
.RI "static QString \fBgetModel\fP (\fBModel\fP \fBmodel\fP)"
.br
.ti -1c
.RI "static QString \fBfriendlyName\fP (const QString &\fBkey\fP, \fBLayout\fP \fBlayout\fP=\fBUS\fP)"
.br
.in -1c
.SS "Static Private Member Functions"

.in +1c
.ti -1c
.RI "static int \fBmodelWidth\fP (\fBModel\fP \fBmodel\fP)"
.br
.ti -1c
.RI "static int \fBmodelHeight\fP (\fBModel\fP \fBmodel\fP)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "QHash< QString, \fBKey\fP > \fB_keys\fP"
.br
.ti -1c
.RI "short \fBkeyWidth\fP"
.br
.ti -1c
.RI "short \fBkeyHeight\fP"
.br
.ti -1c
.RI "\fBModel\fP \fBkeyModel\fP:8"
.br
.ti -1c
.RI "\fBLayout\fP \fBkeyLayout\fP:8"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 49 of file keymap\&.h\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBKeyMap::Layout\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINO_LAYOUT \fP\fP
.TP
\fB\fIDK \fP\fP
.TP
\fB\fIEU \fP\fP
.TP
\fB\fIEU_DVORAK \fP\fP
.TP
\fB\fIGB \fP\fP
.TP
\fB\fIGB_DVORAK \fP\fP
.TP
\fB\fIUS \fP\fP
.TP
\fB\fIUS_DVORAK \fP\fP
.TP
\fB\fIFR \fP\fP
.TP
\fB\fIDE \fP\fP
.TP
\fB\fIIT \fP\fP
.TP
\fB\fINO \fP\fP
.TP
\fB\fIPL \fP\fP
.TP
\fB\fIMX \fP\fP
.TP
\fB\fIES \fP\fP
.TP
\fB\fISE \fP\fP
.TP
\fB\fI_LAYOUT_MAX \fP\fP
.PP
Definition at line 65 of file keymap\&.h\&.
.PP
.nf
65                 {
66         NO_LAYOUT = -1,
67         DK,                 // Danish
68         EU,                 // English (EU)
69         EU_DVORAK,
70         GB,                 // English (UK)
71         GB_DVORAK,
72         US,                 // English (US)
73         US_DVORAK,
74         FR,                 // French
75         DE,                 // German
76         IT,                 // Italian
77         NO,                 // Norwegian
78         PL,                 // Polish (identical to US)
79         MX,                 // Spanish (Mexico/Latin America)
80         ES,                 // Spanish (Spain)
81         SE,                 // Swedish
82         _LAYOUT_MAX
83     };
.fi
.SS "enum \fBKeyMap::Model\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINO_MODEL \fP\fP
.TP
\fB\fIK65 \fP\fP
.TP
\fB\fIK70 \fP\fP
.TP
\fB\fIK95 \fP\fP
.TP
\fB\fISTRAFE \fP\fP
.TP
\fB\fIM65 \fP\fP
.TP
\fB\fISABRE \fP\fP
.TP
\fB\fISCIMITAR \fP\fP
.TP
\fB\fI_MODEL_MAX \fP\fP
.PP
Definition at line 51 of file keymap\&.h\&.
.PP
.nf
51                {
52         NO_MODEL = -1,
53         // Keyboard models
54         K65,
55         K70,
56         K95,
57         STRAFE,
58         // Mouse models
59         M65,
60         SABRE,
61         SCIMITAR,
62         _MODEL_MAX
63     };
.fi
.SH "Constructor & Destructor Documentation"
.PP 
.SS "KeyMap::KeyMap ()"

.PP
Definition at line 583 of file keymap\&.cpp\&.
.PP
Referenced by friendlyName(), and fromName()\&.
.PP
.nf
583                :
584      keyWidth(0), keyHeight(0),
585      keyModel(NO_MODEL), keyLayout(NO_LAYOUT)
586 {}
.fi
.SS "KeyMap::KeyMap (\fBModel\fP_keyModel, \fBLayout\fP_keyLayout)"

.PP
Definition at line 577 of file keymap\&.cpp\&.
.PP
.nf
577                                                  :
578     _keys(getMap(_keyModel, _keyLayout)),
579     keyWidth(modelWidth(_keyModel)), keyHeight(modelHeight(_keyModel)),
580     keyModel(_keyModel), keyLayout(_keyLayout)
581 {}
.fi
.SH "Member Function Documentation"
.PP 
.SS "QStringList KeyMap::byPosition () const"

.PP
Definition at line 588 of file keymap\&.cpp\&.
.PP
References Key::x, x, Key::y, and y\&.
.PP
Referenced by RebindWidget::setBind()\&.
.PP
.nf
588                                      {
589     // Use QMaps to order the keys
590     QMap<int, QMap<int, QString> > ordered;
591     QHashIterator<QString, Key> i(*this);
592     while(i\&.hasNext()){
593         i\&.next();
594         const Key& key = i\&.value();
595         ordered[key\&.y][key\&.x] = i\&.key();
596     }
597     // Merge them into a single list
598     QStringList result;
599     QMapIterator<int, QMap<int, QString> > y(ordered);
600     while(y\&.hasNext()){
601         y\&.next();
602         QMapIterator<int, QString> x(y\&.value());
603         while(x\&.hasNext()){
604             x\&.next();
605             result << x\&.value();
606         }
607     }
608     return result;
609 }
.fi
.SS "bool KeyMap::contains (const QString &name) const\fC [inline]\fP"

.PP
Definition at line 127 of file keymap\&.h\&.
.PP
References _keys\&.
.PP
Referenced by friendlyName(), and KbAnimWidget::on_keyButton_clicked()\&.
.PP
.nf
127 { return _keys\&.contains(name); }
.fi
.SS "uint KeyMap::count () const\fC [inline]\fP"

.PP
Definition at line 118 of file keymap\&.h\&.
.PP
References _keys\&.
.PP
Referenced by KeyWidget::map(), KbBindWidget::on_copyButton_clicked(), and KbBindWidget::on_resetButton_clicked()\&.
.PP
.nf
118 { return _keys\&.count(); }
.fi
.SS "QString KeyMap::friendlyName (const QString &key, \fBLayout\fPlayout = \fC\fBUS\fP\fP)\fC [static]\fP"

.PP
Definition at line 611 of file keymap\&.cpp\&.
.PP
References contains(), K95, KeyMap(), M65, map(), SCIMITAR, and STRAFE\&.
.PP
Referenced by KeyAction::friendlyName(), and RebindWidget::RebindWidget()\&.
.PP
.nf
611                                                              {
612     // Try K95 map first
613     // FIXME: This is an odd function and probably should be refactored
614     // it would probably be best to remove the friendly names from the maps and have a completely separate name->friendlyName store
615     KeyMap map(K95, layout);
616     if(map\&.contains(key))
617         return map[key]\&.friendlyName();
618 
619     // The only key missing from it should be Fn, which is found on STRAFE
620     map = KeyMap(STRAFE, layout);
621     if(map\&.contains(key))
622         return map[key]\&.friendlyName();
623 
624     // Additionally, there are a handful of keys not present on any physical keyboard, but we need names for them
625     if(key == "f13" || key == "f14" || key == "f15" || key == "f16" || key == "f17" || key == "f18" || key == "f19" || key == "f20")
626         return key\&.toUpper();
627     else if(key == "lightup")
628         return "Screen Brightness Up";
629     else if(key == "lightdn")
630         return "Screen Brightness Down";
631     else if(key == "eject" || key == "power")
632         return key[0]\&.toUpper() + key\&.mid(1);   // capitalize first letter
633 
634     // All other names are found on mice
635     map = KeyMap(SCIMITAR, layout);
636     if(map\&.contains(key))
637         return map[key]\&.friendlyName();
638     map = KeyMap(M65, layout);
639     if(map\&.contains(key))
640         return map[key]\&.friendlyName();
641 
642     // Not found at all
643     return "";
644 }
.fi
.SS "\fBKeyMap\fP KeyMap::fromName (const QString &name)\fC [static]\fP"

.PP
Definition at line 535 of file keymap\&.cpp\&.
.PP
References getLayout(), getModel(), and KeyMap()\&.
.PP
Referenced by KbBind::load(), and KbLight::load()\&.
.PP
.nf
535                                           {
536     QStringList list = name\&.trimmed()\&.split(" ");
537     if(list\&.length() != 2)
538         return KeyMap();
539     return KeyMap(getModel(list[0]), getLayout(list[1]));
540 }
.fi
.SS "QString KeyMap::fromStorage (const QString &storage)\fC [inline]\fP"

.PP
Definition at line 135 of file keymap\&.h\&.
.PP
Referenced by KbAnim::KbAnim(), KbBind::load(), and KbLight::load()\&.
.PP
.nf
135 { QHashIterator<QString, Key> i(*this); while(i\&.hasNext()) { i\&.next(); const char* s = i\&.value()\&.storageName(); if(s == storage) return i\&.value()\&.name; } return storage; }
.fi
.SS "\fBKeyMap::Layout\fP KeyMap::getLayout (const QString &name)\fC [static]\fP"

.PP
Definition at line 407 of file keymap\&.cpp\&.
.PP
References DE, DK, ES, EU, EU_DVORAK, FR, GB, GB_DVORAK, IT, MX, NO, NO_LAYOUT, PL, SE, US, and US_DVORAK\&.
.PP
Referenced by fromName(), SettingsWidget::on_layoutBox_activated(), SettingsWidget::SettingsWidget(), and strLayout()\&.
.PP
.nf
407                                                  {
408     QString lower = name\&.toLower();
409     if(lower == "dk")
410         return DK;
411     if(lower == "eu")
412         return EU;
413     if(lower == "eu_dvorak")
414         return EU_DVORAK;
415     if(lower == "gb_dvorak")
416         return GB_DVORAK;
417     if(lower == "us")
418         return US;
419     if(lower == "us_dvorak")
420         return US_DVORAK;
421     if(lower == "fr")
422         return FR;
423     if(lower == "de")
424         return DE;
425     if(lower == "it")
426         return IT;
427     if(lower == "no")
428         return NO;
429     if(lower == "pl")
430         return PL;
431     if(lower == "mx")
432         return MX;
433     if(lower == "es")
434         return ES;
435     if(lower == "se")
436         return SE;
437     if(lower == "gb")
438         return GB;
439     return NO_LAYOUT;
440 }
.fi
.SS "QString KeyMap::getLayout (\fBKeyMap::Layout\fPlayout)\fC [static]\fP"

.PP
Definition at line 442 of file keymap\&.cpp\&.
.PP
References DE, DK, ES, EU, EU_DVORAK, FR, GB, GB_DVORAK, IT, MX, NO, PL, SE, US, and US_DVORAK\&.
.PP
.nf
442                                             {
443     switch(layout){
444     case DK:
445         return "dk";
446     case EU:
447         return "eu";
448     case EU_DVORAK:
449         return "eu_dvorak";
450     case GB:
451         return "gb";
452     case GB_DVORAK:
453         return "gb_dvorak";
454     case US:
455         return "us";
456     case US_DVORAK:
457         return "us_dvorak";
458     case FR:
459         return "fr";
460     case DE:
461         return "de";
462     case IT:
463         return "it";
464     case NO:
465         return "no";
466     case PL:
467         return "pl";
468     case MX:
469         return "mx";
470     case ES:
471         return "es";
472     case SE:
473         return "se";
474     default:
475         return "";
476     }
477 }
.fi
.SS "\fBKeyMap::Model\fP KeyMap::getModel (const QString &name)\fC [static]\fP"

.PP
Definition at line 495 of file keymap\&.cpp\&.
.PP
References K65, K70, K95, M65, NO_MODEL, SABRE, SCIMITAR, and STRAFE\&.
.PP
Referenced by fromName(), Kb::Kb(), and strModel()\&.
.PP
.nf
495                                                {
496     QString lower = name\&.toLower();
497     if(lower == "k65")
498         return K65;
499     if(lower == "k70")
500         return K70;
501     if(lower == "k95")
502         return K95;
503     if(lower == "strafe")
504         return STRAFE;
505     if(lower == "m65")
506         return M65;
507     if(lower == "sabre")
508         return SABRE;
509     if(lower == "scimitar")
510         return SCIMITAR;
511     return NO_MODEL;
512 }
.fi
.SS "QString KeyMap::getModel (\fBKeyMap::Model\fPmodel)\fC [static]\fP"

.PP
Definition at line 514 of file keymap\&.cpp\&.
.PP
References K65, K70, K95, M65, SABRE, SCIMITAR, and STRAFE\&.
.PP
.nf
514                                          {
515     switch(model){
516     case K65:
517         return "k65";
518     case K70:
519         return "k70";
520     case K95:
521         return "k95";
522     case STRAFE:
523         return "strafe";
524     case M65:
525         return "m65";
526     case SABRE:
527         return "sabre";
528     case SCIMITAR:
529         return "scimitar";
530     default:
531         return "";
532     }
533 }
.fi
.SS "uint KeyMap::height () const\fC [inline]\fP"

.PP
Definition at line 122 of file keymap\&.h\&.
.PP
References keyHeight\&.
.PP
Referenced by KeyWidget::drawInfo(), and KeyWidget::map()\&.
.PP
.nf
122 { return keyHeight; }
.fi
.SS "static bool KeyMap::isISO (\fBLayout\fPlayout)\fC [inline]\fP, \fC [static]\fP"

.PP
Definition at line 87 of file keymap\&.h\&.
.PP
References PL, US, and US_DVORAK\&.
.PP
Referenced by KbBind::isISO(), and RebindWidget::setBind()\&.
.PP
.nf
87 { return layout != US && layout != US_DVORAK && layout != PL; }
.fi
.SS "bool KeyMap::isISO () const\fC [inline]\fP"

.PP
Definition at line 88 of file keymap\&.h\&.
.PP
References isISO(), and keyLayout\&.
.PP
Referenced by getMap(), isISO(), Kb::Kb(), and Kb::updateLayout()\&.
.PP
.nf
88 { return isISO(keyLayout); }
.fi
.SS "static bool KeyMap::isKeyboard (\fBModel\fPmodel)\fC [inline]\fP, \fC [static]\fP"

.PP
Definition at line 93 of file keymap\&.h\&.
.PP
References isMouse(), and NO_MODEL\&.
.PP
Referenced by KbBind::isKeyboard()\&.
.PP
.nf
93 { return !isMouse(model) && model != NO_MODEL; }
.fi
.SS "bool KeyMap::isKeyboard () const\fC [inline]\fP"

.PP
Definition at line 94 of file keymap\&.h\&.
.PP
References isKeyboard(), and keyModel\&.
.PP
Referenced by Kb::isKeyboard(), and isKeyboard()\&.
.PP
.nf
94 { return isKeyboard(keyModel); }
.fi
.SS "static bool KeyMap::isMouse (\fBModel\fPmodel)\fC [inline]\fP, \fC [static]\fP"

.PP
Definition at line 95 of file keymap\&.h\&.
.PP
References M65, SABRE, and SCIMITAR\&.
.PP
Referenced by KbBind::isMouse(), KeyWidget::map(), KbLightWidget::newSelection(), and KeyWidget::paintEvent()\&.
.PP
.nf
95 { return model == M65 || model == SABRE || model == SCIMITAR; }
.fi
.SS "bool KeyMap::isMouse () const\fC [inline]\fP"

.PP
Definition at line 96 of file keymap\&.h\&.
.PP
References isMouse(), and keyModel\&.
.PP
Referenced by isKeyboard(), Kb::isMouse(), isMouse(), and KeyWidget::paintEvent()\&.
.PP
.nf
96 { return isMouse(keyModel); }
.fi
.SS "\fBKey\fP KeyMap::key (const QString &name) const\fC [inline]\fP"

.PP
Definition at line 125 of file keymap\&.h\&.
.PP
References _keys\&.
.PP
Referenced by AnimScript::begin(), AnimScript::keypress(), KbBind::noAction(), operator[](), KbBind::setAction(), and toStorage()\&.
.PP
.nf
125 { Key empty = {0,0,0,0,0,0,0,0,0}; return _keys\&.value(name, empty); }
.fi
.SS "QStringList KeyMap::keys () const\fC [inline]\fP"

.PP
Definition at line 131 of file keymap\&.h\&.
.PP
References _keys\&.
.PP
Referenced by KeyWidget::mouseReleaseEvent(), KbBindWidget::on_copyButton_clicked(), KbBindWidget::on_resetButton_clicked(), KeyWidget::setAnimation(), KeyWidget::setSelection(), and KbBindWidget::updateBind()\&.
.PP
.nf
131 { return _keys\&.keys(); }
.fi
.SS "\fBLayout\fP KeyMap::layout () const\fC [inline]\fP"

.PP
Definition at line 114 of file keymap\&.h\&.
.PP
References keyLayout\&.
.PP
Referenced by KeyAction::friendlyName(), KeyWidget::paintEvent(), and RebindWidget::setBind()\&.
.PP
.nf
114 { return keyLayout; }
.fi
.SS "QStringList KeyMap::layoutNames ()\fC [static]\fP"

.PP
Definition at line 479 of file keymap\&.cpp\&.
.PP
Referenced by LayoutDialog::LayoutDialog(), and SettingsWidget::SettingsWidget()\&.
.PP
.nf
479                                {
480     return QStringList()
481             << "Danish"
482             << "English (ISO/European)" << "English (ISO/European, Dvorak)"
483             << "English (United Kingdom)" << "English (United Kingdom, Dvorak)"
484             << "English (United States)" << "English (United States, Dvorak)"
485             << "French"
486             << "German"
487             << "Italian"
488             << "Norwegian"
489             << "Polish"
490             << "Spanish (Latin America)"
491             << "Spanish (Spain)"
492             << "Swedish";
493 }
.fi
.SS "\fBKeyMap::Layout\fP KeyMap::locale ()\fC [static]\fP"

.PP
Definition at line 375 of file keymap\&.cpp\&.
.PP
References DE, DK, ES, FR, GB, IT, MX, NO, PL, SE, and US\&.
.PP
Referenced by SettingsWidget::SettingsWidget()\&.
.PP
.nf
375                            {
376     setlocale(LC_ALL, "");
377     QString loc = setlocale(LC_CTYPE, 0);
378     loc = loc\&.toLower()\&.replace('_', '-');
379     if(loc\&.startsWith("dk-"))
380         return KeyMap::DK;
381     else if(loc\&.startsWith("fr-"))
382         return KeyMap::FR;
383     else if(loc\&.startsWith("de-"))
384         return KeyMap::DE;
385     else if(loc\&.startsWith("it-"))
386         return KeyMap::IT;
387     else if(loc\&.startsWith("pl-"))
388         return KeyMap::PL;
389     else if(loc\&.startsWith("no-"))
390         return KeyMap::NO;
391     else if(loc\&.startsWith("es-es"))
392         // Spain uses the ES layout
393         return KeyMap::ES;
394     else if(loc\&.startsWith("es-"))
395         // Other Spanish locales use MX
396         return KeyMap::MX;
397     else if(loc\&.startsWith("se-"))
398         return KeyMap::SE;
399     else if(loc\&.startsWith("en-us") || loc\&.startsWith("en-au") || loc\&.startsWith("en-ca") || loc\&.startsWith("en-hk") || loc\&.startsWith("en-in") || loc\&.startsWith("en-nz") || loc\&.startsWith("en-ph") || loc\&.startsWith("en-sg") || loc\&.startsWith("en-za"))
400         // Most English locales use US
401         return KeyMap::US;
402     else
403         // Default to GB
404         return KeyMap::GB;
405 }
.fi
.SS "const QHash<QString, \fBKey\fP>& KeyMap::map () const\fC [inline]\fP"

.PP
Definition at line 129 of file keymap\&.h\&.
.PP
References _keys\&.
.PP
Referenced by friendlyName()\&.
.PP
.nf
129 { return _keys; }
.fi
.SS "\fBModel\fP KeyMap::model () const\fC [inline]\fP"

.PP
Definition at line 113 of file keymap\&.h\&.
.PP
References keyModel\&.
.PP
Referenced by KeyWidget::mouseMoveEvent(), KeyWidget::paintEvent(), and KPerfWidget::setPerf()\&.
.PP
.nf
113 { return keyModel; }
.fi
.SS "int KeyMap::modelHeight (\fBModel\fPmodel)\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 561 of file keymap\&.cpp\&.
.PP
References K65, K70, K95, K95_HEIGHT, M65, M65_HEIGHT, SABRE, SCIMITAR, and STRAFE\&.
.PP
.nf
561                                   {
562     switch(model){
563     case K65:
564     case K70:
565     case K95:
566     case STRAFE:
567         return K95_HEIGHT;
568     case M65:
569     case SABRE:
570     case SCIMITAR:
571         return M65_HEIGHT;
572     default:
573         return 0;
574     }
575 }
.fi
.SS "int KeyMap::modelWidth (\fBModel\fPmodel)\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 542 of file keymap\&.cpp\&.
.PP
References K65, K65_WIDTH, K70, K70_WIDTH, K95, K95_WIDTH, KSTRAFE_WIDTH, M65, M65_WIDTH, SABRE, SCIMITAR, and STRAFE\&.
.PP
.nf
542                                  {
543     switch(model){
544     case K65:
545         return K65_WIDTH;
546     case K70:
547         return K70_WIDTH;
548     case K95:
549         return K95_WIDTH;
550     case STRAFE:
551         return KSTRAFE_WIDTH;
552     case M65:
553     case SABRE:
554     case SCIMITAR:
555         return M65_WIDTH;
556     default:
557         return 0;
558     }
559 }
.fi
.SS "QString KeyMap::name () const\fC [inline]\fP"

.PP
Definition at line 115 of file keymap\&.h\&.
.PP
References strLayout(), and strModel()\&.
.PP
Referenced by KbBind::save(), KbLight::save(), and toStorage()\&.
.PP
.nf
115 { return (strModel() + " " + strLayout())\&.toUpper(); }
.fi
.SS "KeyMap::operator const QHash< QString, \fBKey\fP > & () const\fC [inline]\fP"

.PP
Definition at line 130 of file keymap\&.h\&.
.PP
References _keys\&.
.PP
.nf
130 { return _keys; }
.fi
.SS "\fBKey\fP KeyMap::operator[] (const QString &name) const\fC [inline]\fP"

.PP
Definition at line 126 of file keymap\&.h\&.
.PP
References key()\&.
.PP
.nf
126 { return key(name); }
.fi
.SS "QList<\fBKey\fP> KeyMap::positions () const\fC [inline]\fP"

.PP
Definition at line 132 of file keymap\&.h\&.
.PP
References _keys\&.
.PP
Referenced by ColorMap::init(), and KeyWidget::selectAll()\&.
.PP
.nf
132 { return _keys\&.values(); }
.fi
.SS "QString KeyMap::strLayout () const\fC [inline]\fP"

.PP
Definition at line 106 of file keymap\&.h\&.
.PP
References getLayout(), and keyLayout\&.
.PP
Referenced by name()\&.
.PP
.nf
106 { return getLayout(keyLayout); }
.fi
.SS "QString KeyMap::strModel () const\fC [inline]\fP"

.PP
Definition at line 110 of file keymap\&.h\&.
.PP
References getModel(), and keyModel\&.
.PP
Referenced by name()\&.
.PP
.nf
110 { return getModel(keyModel); }
.fi
.SS "QString KeyMap::toStorage (const QString &name)\fC [inline]\fP"

.PP
Definition at line 134 of file keymap\&.h\&.
.PP
References key(), name(), and Key::storageName()\&.
.PP
.nf
134 { const char* storage = key(name)\&.storageName(); if(!storage) return name; return storage; }
.fi
.SS "uint KeyMap::width () const\fC [inline]\fP"

.PP
Definition at line 120 of file keymap\&.h\&.
.PP
References keyWidth\&.
.PP
Referenced by KeyWidget::drawInfo(), and KeyWidget::map()\&.
.PP
.nf
120 { return keyWidth; }
.fi
.SH "Field Documentation"
.PP 
.SS "QHash<QString, \fBKey\fP> KeyMap::_keys\fC [private]\fP"

.PP
Definition at line 147 of file keymap\&.h\&.
.PP
Referenced by contains(), count(), key(), keys(), map(), operator const QHash< QString, Key > &(), and positions()\&.
.SS "short KeyMap::keyHeight\fC [private]\fP"

.PP
Definition at line 148 of file keymap\&.h\&.
.PP
Referenced by height()\&.
.SS "\fBLayout\fP KeyMap::keyLayout\fC [private]\fP"

.PP
Definition at line 150 of file keymap\&.h\&.
.PP
Referenced by isISO(), layout(), and strLayout()\&.
.SS "\fBModel\fP KeyMap::keyModel\fC [private]\fP"

.PP
Definition at line 149 of file keymap\&.h\&.
.PP
Referenced by isKeyboard(), isMouse(), model(), and strModel()\&.
.SS "short KeyMap::keyWidth\fC [private]\fP"

.PP
Definition at line 148 of file keymap\&.h\&.
.PP
Referenced by width()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for ckb-next from the source code\&.
