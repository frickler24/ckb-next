.TH "src/ckb/media.h" 3 "Fri Nov 3 2017" "Version v0.2.8 at branch master" "ckb-next" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/ckb/media.h \- 
.SH SYNOPSIS
.br
.PP
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBEXTERN_C\fP   extern"
.br
.ti -1c
.RI "#define \fBENUM_C\fP(name)   typedef enum"
.br
.ti -1c
.RI "#define \fBENUM_END_C\fP(name)   name"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBmuteState\fP { \fBUNKNOWN\fP = -1, \fBUNMUTED\fP, \fBMUTED\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBmuteState\fP \fBgetMuteState\fP ()"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define ENUM_C(name)   typedef enum"

.PP
Definition at line 13 of file media\&.h\&.
.SS "#define ENUM_END_C(name)   name"

.PP
Definition at line 14 of file media\&.h\&.
.SS "#define EXTERN_C   extern"

.PP
Definition at line 12 of file media\&.h\&.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBmuteState\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIUNKNOWN \fP\fP
.TP
\fB\fIUNMUTED \fP\fP
.TP
\fB\fIMUTED \fP\fP
.PP
Definition at line 19 of file media\&.h\&.
.PP
.nf
19                   {
20     UNKNOWN = -1,
21     UNMUTED,
22     MUTED
23 } ENUM_END_C(muteState);
.fi
.SH "Function Documentation"
.PP 
.SS "\fBmuteState\fP getMuteState ()"

.PP
Definition at line 102 of file media_linux\&.cpp\&.
.PP
References lastKnown, MUTED, UNKNOWN, and UNMUTED\&.
.PP
Referenced by KbPerf::applyIndicators()\&.
.PP
.nf
102                         {
103 #ifdef USE_LIBPULSE
104     static pa_threaded_mainloop* mainLoop = nullptr;
105 
106     QMutexLocker locker(&mutex);
107 
108     //Setup main loop thread used for communicating with Pulse Audio\&. All
109     //communication is done asynchronously\&.
110     if(mainLoop == nullptr){
111         mainLoop = pa_threaded_mainloop_new();
112         if(mainLoop == nullptr)
113             return lastKnown;
114 
115         if(pa_threaded_mainloop_start(mainLoop) != 0){
116             pa_threaded_mainloop_free(mainLoop);
117             mainLoop = nullptr;
118             return lastKnown;
119         }
120     }
121 
122     //Connect to the local Pulse Audio server\&. It's usually running but a
123     //reconnect is attempted periodically whenever the connection fails or is
124     //terminated\&.
125     if(paContext == nullptr && QDateTime::currentMSecsSinceEpoch() >= reconnectTime){
126         pa_threaded_mainloop_lock(mainLoop);
127         {
128             pa_mainloop_api* api = pa_threaded_mainloop_get_api(mainLoop);
129             Q_ASSERT(api != nullptr);
130 
131             paContext = pa_context_new(api, "QPulse");
132             Q_ASSERT(paContext != nullptr);
133             pa_context_set_state_callback(paContext, &ContextStateCallback, nullptr);
134             pa_context_connect(paContext, nullptr, PA_CONTEXT_NOFAIL, nullptr);
135         }
136         pa_threaded_mainloop_unlock(mainLoop);
137     }
138 #endif
139 
140     return lastKnown;
141 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for ckb-next from the source code\&.
