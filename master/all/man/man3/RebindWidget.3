.TH "RebindWidget" 3 "Tue May 16 2017" "Version v0.2.8 at branch master" "ckb-next" \" -*- nroff -*-
.ad l
.nh
.SH NAME
RebindWidget \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <src/ckb/rebindwidget\&.h>\fP
.PP
Inherits \fBQWidget\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBRebindWidget\fP (\fBQWidget\fP *parent)"
.br
.ti -1c
.RI "\fB~RebindWidget\fP ()"
.br
.ti -1c
.RI "void \fBsetBind\fP (\fBKbBind\fP *newBind, \fBKbProfile\fP *newProfile)"
.br
.ti -1c
.RI "void \fBsetSelection\fP (const QStringList &newSelection, bool applyPrevious=false)"
.br
.in -1c
.SS "Private Slots"

.in +1c
.ti -1c
.RI "void \fBapplyChanges\fP (const QStringList &keys, bool doUnbind)"
.br
.ti -1c
.RI "void \fBon_applyButton_clicked\fP ()"
.br
.ti -1c
.RI "void \fBon_cancelButton_clicked\fP ()"
.br
.ti -1c
.RI "void \fBon_resetButton_clicked\fP ()"
.br
.ti -1c
.RI "void \fBon_unbindButton_clicked\fP ()"
.br
.ti -1c
.RI "void \fBon_typingBox_currentIndexChanged\fP (int index)"
.br
.ti -1c
.RI "void \fBon_modBox_currentIndexChanged\fP (int index)"
.br
.ti -1c
.RI "void \fBon_fnBox_currentIndexChanged\fP (int index)"
.br
.ti -1c
.RI "void \fBon_numBox_currentIndexChanged\fP (int index)"
.br
.ti -1c
.RI "void \fBon_mediaBox_currentIndexChanged\fP (int index)"
.br
.ti -1c
.RI "void \fBon_mbBox_currentIndexChanged\fP (int index)"
.br
.ti -1c
.RI "void \fBon_mb2Box_currentIndexChanged\fP (int index)"
.br
.ti -1c
.RI "void \fBon_wheelBox_currentIndexChanged\fP (int index)"
.br
.ti -1c
.RI "void \fBon_dpiBox_currentIndexChanged\fP (int index)"
.br
.ti -1c
.RI "void \fBon_modeBox_currentIndexChanged\fP (int index)"
.br
.ti -1c
.RI "void \fBon_lightBox_currentIndexChanged\fP (int index)"
.br
.ti -1c
.RI "void \fBon_lockBox_currentIndexChanged\fP (int index)"
.br
.ti -1c
.RI "void \fBon_programKpBox_textChanged\fP (const QString &arg1)"
.br
.ti -1c
.RI "void \fBon_programKrBox_textChanged\fP (const QString &arg1)"
.br
.ti -1c
.RI "void \fBon_animBox_currentIndexChanged\fP (int index)"
.br
.ti -1c
.RI "void \fBon_typingButton_clicked\fP (bool checked)"
.br
.ti -1c
.RI "void \fBon_modButton_clicked\fP (bool checked)"
.br
.ti -1c
.RI "void \fBon_fnButton_clicked\fP (bool checked)"
.br
.ti -1c
.RI "void \fBon_numButton_clicked\fP (bool checked)"
.br
.ti -1c
.RI "void \fBon_mediaButton_clicked\fP (bool checked)"
.br
.ti -1c
.RI "void \fBon_mbButton_clicked\fP (bool checked)"
.br
.ti -1c
.RI "void \fBon_mb2Button_clicked\fP (bool checked)"
.br
.ti -1c
.RI "void \fBon_wheelButton_clicked\fP (bool checked)"
.br
.ti -1c
.RI "void \fBon_dpiButton_clicked\fP (bool checked)"
.br
.ti -1c
.RI "void \fBon_modeButton_clicked\fP (bool checked)"
.br
.ti -1c
.RI "void \fBon_lightButton_clicked\fP (bool checked)"
.br
.ti -1c
.RI "void \fBon_lockButton_clicked\fP (bool checked)"
.br
.ti -1c
.RI "void \fBon_programKpButton_clicked\fP (bool checked)"
.br
.ti -1c
.RI "void \fBon_programKrButton_clicked\fP (bool checked)"
.br
.ti -1c
.RI "void \fBon_programKpSIBox_clicked\fP (bool checked)"
.br
.ti -1c
.RI "void \fBon_programKrSIBox_clicked\fP (bool checked)"
.br
.ti -1c
.RI "void \fBon_animButton_clicked\fP (bool checked)"
.br
.ti -1c
.RI "void \fBon_pteMacroBox_textChanged\fP ()"
.br
.ti -1c
.RI "void \fBon_btnStartMacro_clicked\fP ()"
.br
.RI "\fI\fBRebindWidget::on_btnStartMacro_clicked\fP starts macro recording\&. A new notification channel and \fBMacroReader\fP are created to do the job\&. \fP"
.ti -1c
.RI "void \fBon_btnStopMacro_clicked\fP ()"
.br
.RI "\fI\fBRebindWidget::on_btnStopMacro_clicked\fP ends the macro recording\&. Notify channel ist closed, the ReaderThread is deleted if the notification is really down\&. \fP"
.ti -1c
.RI "void \fBon_btnClearMacro_clicked\fP ()"
.br
.RI "\fI\fBRebindWidget::on_btnClearMacro_clicked\fP changes the help info an the panel\&. The job of clearing the input panels is triggerd with signal/slot via the \fBRebindWidget\&.ui\fP file\&. \fP"
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBsetBox\fP (\fBQWidget\fP *box)"
.br
.ti -1c
.RI "void \fBconvertMacroBox\fP ()"
.br
.RI "\fI\fBRebindWidget::convertMacroBox\fP converts the macroBox content\&. The KB sends each keypress as 'key [+|-]<keyname><newline>'\&. \fP"
.ti -1c
.RI "void \fBhelpStatus\fP (int status)"
.br
.RI "\fI\fBRebindWidget::helpStatus\fP shows a help line in the ui\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBUi::RebindWidget\fP * \fBui\fP"
.br
.ti -1c
.RI "\fBKbBind\fP * \fBbind\fP"
.br
.ti -1c
.RI "\fBKbProfile\fP * \fBprofile\fP"
.br
.ti -1c
.RI "QStringList \fBselection\fP"
.br
.ti -1c
.RI "QStringList \fBtypingKeys\fP"
.br
.ti -1c
.RI "QStringList \fBmodKeys\fP"
.br
.ti -1c
.RI "QStringList \fBfnKeys\fP"
.br
.ti -1c
.RI "QStringList \fBnumKeys\fP"
.br
.ti -1c
.RI "QStringList \fBmediaKeys\fP"
.br
.ti -1c
.RI "QStringList \fBmouseKeys\fP"
.br
.ti -1c
.RI "QStringList \fBmouseExtKeys\fP"
.br
.ti -1c
.RI "QStringList \fBwheelKeys\fP"
.br
.ti -1c
.RI "\fBMacroReader\fP * \fBmacReader\fP"
.br
.RI "\fImacReader holds the \fBMacroReader\fP when macro recording starts\&. \fP"
.in -1c
.SS "Static Private Attributes"

.in +1c
.ti -1c
.RI "static const int \fBTAB_KB\fP = 0"
.br
.ti -1c
.RI "static const int \fBTAB_MOUSE\fP = 1"
.br
.ti -1c
.RI "static const int \fBTAB_ANIM\fP = 2"
.br
.ti -1c
.RI "static const int \fBTAB_SPECIAL\fP = 3"
.br
.ti -1c
.RI "static const int \fBTAB_PROGRAM\fP = 4"
.br
.ti -1c
.RI "static const int \fBTAB_MACRO\fP = 5"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 15 of file rebindwidget\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "RebindWidget::RebindWidget (\fBQWidget\fP *parent)\fC [explicit]\fP"

.PP
Definition at line 9 of file rebindwidget\&.cpp\&.
.PP
References Ui_RebindWidget::fnBox, fnKeys, KeyMap::friendlyName(), Ui_RebindWidget::lightWrapBox, Ui_RebindWidget::mediaBox, mediaKeys, Ui_RebindWidget::modBox, Ui_RebindWidget::modeWrapBox, modKeys, mouseExtKeys, mouseKeys, Ui_RebindWidget::numBox, numKeys, Ui_RebindWidget::programKpExtra, Ui_RebindWidget::programKrExtra, Ui_RebindWidget::progTipLabel, Ui_RebindWidget::setupUi(), ui, and wheelKeys\&.
.PP
.nf
9                                           :
10     QWidget(parent),
11     ui(new Ui::RebindWidget),
12     bind(0), profile(0), macReader(0)
13 {
14     ui->setupUi(this);
15     ui->lightWrapBox->hide();
16     ui->modeWrapBox->hide();
17     ui->programKpExtra->hide();
18     ui->programKrExtra->hide();
19 
20     // Populate key lists
21     modKeys << "caps" << "lshift" << "rshift" << "lctrl" << "rctrl" << "lwin" << "rwin" << "lalt" << "ralt" << "rmenu" << "fn";
22     fnKeys << "esc" << "f1" << "f2" << "f3" << "f4" << "f5" << "f6" << "f7" << "f8" << "f9" << "f10" << "f11" << "f12" << "prtscn" << "scroll" << "pause" << "f13" << "f14" << "f15" << "f16" << "f17" << "f18" << "f19" << "f20" << "ins" << "del" << "home" << "end" << "pgup" << "pgdn" << "power" << "lightup" << "lightdn" << "up" << "down" << "left" << "right";
23     numKeys << "numlock" << "num0" << "num1" << "num2" << "num3" << "num4" << "num5" << "num6" << "num7" << "num8" << "num9" << "numslash" << "numstar" << "numminus" << "numplus" << "numdot" << "numenter";
24     mediaKeys << "stop" << "prev" << "play" << "next" << "volup" << "voldn" << "mute" << "eject";
25     mouseKeys << "mouse1" << "mouse2" << "mouse3";
26     mouseExtKeys << "mouse4" << "mouse5" << "mouse6" << "mouse7" << "mouse8";
27     wheelKeys << "wheelup" << "wheeldn";
28     // Populate boxes
29     foreach(const QString& key, modKeys)
30         ui->modBox->addItem(KeyMap::friendlyName(key));
31     foreach(const QString& key, fnKeys)
32         ui->fnBox->addItem(KeyMap::friendlyName(key)\&.replace("\n", " / "));
33     foreach(const QString& key, numKeys)
34         ui->numBox->addItem(KeyMap::friendlyName(key)\&.remove("NumPad "));
35     foreach(const QString& key, mediaKeys)
36         ui->mediaBox->addItem(KeyMap::friendlyName(key));
37 #ifdef Q_OS_MACX
38     // Replace some OSX keys with their actual meanings
39     ui->modBox->setItemText(modKeys\&.indexOf("lwin") + 1, "Left Cmd");
40     ui->modBox->setItemText(modKeys\&.indexOf("rwin") + 1, "Right Cmd");
41     ui->modBox->setItemText(modKeys\&.indexOf("lalt") + 1, "Left Option");
42     ui->modBox->setItemText(modKeys\&.indexOf("ralt") + 1, "Right Option");
43     ui->fnBox->setItemText(fnKeys\&.indexOf("prtscn") + 1, "F13");
44     ui->fnBox->setItemText(fnKeys\&.indexOf("scroll") + 1, "F14");
45     ui->fnBox->setItemText(fnKeys\&.indexOf("pause") + 1, "F15");
46     ui->fnBox->setItemText(fnKeys\&.indexOf("f13") + 1, "F13 (Windows/Linux)");
47     ui->fnBox->setItemText(fnKeys\&.indexOf("f14") + 1, "F14 (Windows/Linux)");
48     ui->fnBox->setItemText(fnKeys\&.indexOf("f15") + 1, "F15 (Windows/Linux)");
49     ui->fnBox->setItemText(fnKeys\&.indexOf("ins") + 1, "Help");
50     ui->numBox->setItemText(numKeys\&.indexOf("numlock") + 1, "Clear");
51 
52     // Add tip label
53     ui->progTipLabel->setText("<p style=\"line-height:150%\">Tip: use the <font face=\"monospace\">open</font> command to launch a file, directory, or app\&. For instance, to start Safari:<br /><font face=\"monospace\">&nbsp;&nbsp;open /Applications/Safari\&.app</font></p>");
54 #else
55     ui->progTipLabel->setText("<p style=\"line-height:150%\">Tip: use <font face=\"monospace\">xdg-open</font> to launch a file or directory\&. For instance, to open your home folder:<br /><font face=\"monospace\">&nbsp;&nbsp;xdg-open " + QStandardPaths::writableLocation(QStandardPaths::HomeLocation) + "</font></p>");
56 #endif
57 }
.fi
.SS "RebindWidget::~RebindWidget ()"

.PP
Definition at line 59 of file rebindwidget\&.cpp\&.
.PP
References ui\&.
.PP
.nf
59                            {
60     delete ui;
61 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void RebindWidget::applyChanges (const QStringList &keys, booldoUnbind)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 327 of file rebindwidget\&.cpp\&.
.PP
References anim, KeyAction::animAction(), Ui_RebindWidget::animBox, Ui_RebindWidget::animKrBox, KbLight::animList(), Ui_RebindWidget::animOnceBox, bind, DPI_OFFSET, KeyAction::dpiAction(), Ui_RebindWidget::dpiBox, Ui_RebindWidget::dpiCustXBox, Ui_RebindWidget::dpiCustYBox, Ui_RebindWidget::fnBox, fnKeys, KbAnim::guid(), KbBind::light(), KeyAction::lightAction(), Ui_RebindWidget::lightBox, Ui_RebindWidget::lightWrapBox, KeyAction::lockAction(), Ui_RebindWidget::lockBox, KeyAction::macroAction(), Ui_RebindWidget::mb2Box, Ui_RebindWidget::mbBox, Ui_RebindWidget::mediaBox, mediaKeys, Ui_RebindWidget::modBox, KeyAction::modeAction(), Ui_RebindWidget::modeBox, Ui_RebindWidget::modeWrapBox, modKeys, mouseExtKeys, mouseKeys, KbBind::noAction(), Ui_RebindWidget::numBox, numKeys, KeyAction::PROGRAM_PR_MULTI, KeyAction::PROGRAM_RE_INDEF, KeyAction::PROGRAM_RE_KPSTOP, KeyAction::PROGRAM_RE_MULTI, KeyAction::programAction(), Ui_RebindWidget::programKpBox, Ui_RebindWidget::programKpModeBox, Ui_RebindWidget::programKpSIBox, Ui_RebindWidget::programKrBox, Ui_RebindWidget::programKrModeBox, Ui_RebindWidget::programKrSIBox, Ui_RebindWidget::pteMacroBox, Ui_RebindWidget::pteMacroComment, Ui_RebindWidget::pteMacroText, KbBind::setAction(), Ui_RebindWidget::typingBox, typingKeys, ui, Ui_RebindWidget::wheelBox, and wheelKeys\&.
.PP
Referenced by on_applyButton_clicked(), and setSelection()\&.
.PP
.nf
327                                                                      {
328     if(ui->typingBox->currentIndex() > 0)
329         bind->setAction(keys, typingKeys[ui->typingBox->currentIndex() - 1]);
330     else if(ui->modBox->currentIndex() > 0)
331         bind->setAction(keys, modKeys[ui->modBox->currentIndex() - 1]);
332     else if(ui->fnBox->currentIndex() > 0)
333         bind->setAction(keys, fnKeys[ui->fnBox->currentIndex() - 1]);
334     else if(ui->numBox->currentIndex() > 0)
335         bind->setAction(keys, numKeys[ui->numBox->currentIndex() - 1]);
336     else if(ui->mediaBox->currentIndex() > 0)
337         bind->setAction(keys, mediaKeys[ui->mediaBox->currentIndex() - 1]);
338     else if(ui->mbBox->currentIndex() > 0)
339         bind->setAction(keys, mouseKeys[ui->mbBox->currentIndex() - 1]);
340     else if(ui->mb2Box->currentIndex() > 0)
341         bind->setAction(keys, mouseExtKeys[ui->mb2Box->currentIndex() - 1]);
342     else if(ui->wheelBox->currentIndex() > 0)
343         bind->setAction(keys, wheelKeys[ui->wheelBox->currentIndex() - 1]);
344     else if(ui->dpiBox->currentIndex() > 0)
345         bind->setAction(keys, KeyAction::dpiAction(ui->dpiBox->currentIndex() - DPI_OFFSET, ui->dpiCustXBox->value(), ui->dpiCustYBox->value()));
346     else if(ui->modeBox->currentIndex() > 0)
347         bind->setAction(keys, KeyAction::modeAction(ui->modeBox->currentIndex() - 3 - (ui->modeWrapBox->isChecked() && ui->modeBox->currentIndex() < 3 ? 2 : 0)));
348     else if(ui->lightBox->currentIndex() > 0)
349         bind->setAction(keys, KeyAction::lightAction(ui->lightBox->currentIndex() - 1 + (ui->lightWrapBox->isChecked() ? 2 : 0)));
350     else if(ui->lockBox->currentIndex() > 0)
351         bind->setAction(keys, KeyAction::lockAction(ui->lockBox->currentIndex() - 1));
352     else if(ui->animBox->currentIndex() > 0){
353         KbAnim* anim = bind->light()->animList()\&.at(ui->animBox->currentIndex() - 1);
354         bind->setAction(keys, KeyAction::animAction(anim->guid(), !ui->animOnceBox->isChecked(), ui->animKrBox->isChecked()));
355     } else if(!ui->programKpBox->text()\&.isEmpty() || !ui->programKrBox->text()\&.isEmpty()){
356         int kpStop = 0, krStop = 0;
357         if(!ui->programKpBox->text()\&.isEmpty()){
358             if(!ui->programKpSIBox->isChecked())
359                 kpStop = KeyAction::PROGRAM_PR_MULTI;
360             else
361                 kpStop = ui->programKpModeBox->currentIndex();
362         }
363         if(!ui->programKrBox->text()\&.isEmpty()){
364             if(!ui->programKrSIBox->isChecked())
365                 krStop = KeyAction::PROGRAM_RE_MULTI;
366             else if(ui->programKrModeBox->currentIndex() == 0)
367                 krStop = KeyAction::PROGRAM_RE_INDEF;
368             else
369                 krStop = KeyAction::PROGRAM_RE_KPSTOP;
370         }
371         bind->setAction(keys, KeyAction::programAction(ui->programKpBox->text(), ui->programKrBox->text(), kpStop | krStop));
372     } else if (ui->pteMacroBox->toPlainText()\&.length() > 0) {
373         // G-key macro handling:
374         // Set the macro definiton for all keys selected (indeed, it may be multiple keys)\&.
375         // First, concat the Macro Key Definion and the Macro plain text
376         // after escaping possible colos in the parts for Macro Text and Macro Comment\&.
377         QString mac;
378         mac = ui->pteMacroComment->toPlainText()\&.replace(":", "&das_IST_31N_col0n;");
379         mac = ui->pteMacroText->toPlainText()\&.replace(":", "&das_IST_31N_col0n;") + ":" + mac;
380         mac = ui->pteMacroBox->toPlainText() + ":" + mac;
381         bind->setAction(keys, KeyAction::macroAction(mac));
382     } else if(doUnbind)
383         bind->noAction(keys);
384 }
.fi
.SS "void RebindWidget::convertMacroBox ()\fC [private]\fP"
the ckb-daemon needs a shorter format, only ' [+|-]<keyname>'
.PP
That function does the conversion\&. 
.PP
Definition at line 776 of file rebindwidget\&.cpp\&.
.PP
References Ui_RebindWidget::pteMacroBox, and ui\&.
.PP
Referenced by on_btnStopMacro_clicked()\&.
.PP
.nf
776                                    {
777     QString in;
778 
779     in = ui->pteMacroBox->toPlainText();
780     in\&.replace (QRegExp("\n"), ",");
781     in\&.replace (QRegExp("key "), "");
782     ui->pteMacroBox->setPlainText(in);
783 }
.fi
.SS "void RebindWidget::helpStatus (intstatus)\fC [private]\fP"

.PP
\fBParameters:\fP
.RS 4
\fIstatus\fP determines what to display\&. 
.RE
.PP

.PP
Definition at line 752 of file rebindwidget\&.cpp\&.
.PP
References Ui_RebindWidget::lbl_macro, and ui\&.
.PP
Referenced by on_btnClearMacro_clicked(), on_btnStartMacro_clicked(), on_btnStopMacro_clicked(), and setBox()\&.
.PP
.nf
752                                         {
753     switch (status) {
754     case 1:
755         ui->lbl_macro->setText("Type in a macro name in the comment box and click start\&.");
756         break;
757     case 2:
758         ui->lbl_macro->setText("Type your macro and click stop when finished\&.");
759         break;
760     case 3:
761         ui->lbl_macro->setText("Click Apply or change values in Macro Key Actions in advance\&.");
762         break;
763     default:
764         ui->lbl_macro->setText(QString("Oops: Some magic in RebindWidget::helpStatus (%1)")\&.arg(status));
765     }
766 }
.fi
.SS "void RebindWidget::on_animBox_currentIndexChanged (intindex)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 592 of file rebindwidget\&.cpp\&.
.PP
References Ui_RebindWidget::animBox, Ui_RebindWidget::animButton, setBox(), and ui\&.
.PP
.nf
592                                                           {
593     if(index == 0)
594         ui->animButton->setChecked(false);
595     else {
596         ui->animButton->setChecked(true);
597         setBox(ui->animBox);
598     }
599 }
.fi
.SS "void RebindWidget::on_animButton_clicked (boolchecked)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 689 of file rebindwidget\&.cpp\&.
.PP
References Ui_RebindWidget::animBox, and ui\&.
.PP
.nf
689                                                     {
690     if(checked && ui->animBox->currentIndex() == 0)
691         ui->animBox->setCurrentIndex(1);
692 }
.fi
.SS "void RebindWidget::on_applyButton_clicked ()\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 386 of file rebindwidget\&.cpp\&.
.PP
References applyChanges(), on_btnStopMacro_clicked(), and selection\&.
.PP
.nf
386                                          {
387     // Normally, this should be done via signalling\&.
388     // Because there is no serarate thread, we have to call it directly
389     // (otherwise we could do Key char conversion step by step,
390     // but so it is more easy to change the key definition):
391     on_btnStopMacro_clicked();
392     applyChanges(selection, true);
393 }
.fi
.SS "void RebindWidget::on_btnClearMacro_clicked ()\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 744 of file rebindwidget\&.cpp\&.
.PP
References helpStatus()\&.
.PP
.nf
744                                             {
745     helpStatus(1);
746 }
.fi
.SS "void RebindWidget::on_btnStartMacro_clicked ()\fC [private]\fP, \fC [slot]\fP"
The UI is protected against false clicking (e\&.g\&. if you type start and than Apply, the channel is closed in wrong order)\&.
.PP
At this time, all neccessary params like macroNumber, macroPath, cmdFile etc\&. had been cached\&. 
.PP
Definition at line 703 of file rebindwidget\&.cpp\&.
.PP
References Ui_RebindWidget::applyButton, bind, Ui_RebindWidget::btnStartMacro, Ui_RebindWidget::btnStopMacro, KbBind::getMacroNumber(), KbBind::getMacroPath(), KbBind::handleNotificationChannel(), helpStatus(), macReader, Ui_RebindWidget::pteMacroBox, Ui_RebindWidget::pteMacroText, Ui_RebindWidget::resetButton, ui, and Ui_RebindWidget::unbindButton\&.
.PP
.nf
703                                             {
704     if (!macReader) {
705         bind->handleNotificationChannel(true);
706         macReader = new MacroReader(bind->getMacroNumber(), bind->getMacroPath(), ui->pteMacroBox, ui->pteMacroText);
707         // because of the second thread we need to disable three of the four bottom buttons\&.
708         // Clicking "Stop" will enable them again\&.
709         ui->applyButton->setEnabled(false);
710         ui->resetButton->setEnabled(false);
711         ui->unbindButton->setEnabled(false);
712         ui->btnStartMacro->setEnabled(false);
713         ui->btnStopMacro->setEnabled(true);
714         helpStatus(2);
715     }
716 }
.fi
.SS "void RebindWidget::on_btnStopMacro_clicked ()\fC [private]\fP, \fC [slot]\fP"
Afterwards, the characters in the MacroBox are changed from KB-out format to cmd-in format\&. At last the UI changes to the new state\&. 
.PP
Definition at line 725 of file rebindwidget\&.cpp\&.
.PP
References Ui_RebindWidget::applyButton, bind, Ui_RebindWidget::btnStartMacro, Ui_RebindWidget::btnStopMacro, convertMacroBox(), KbBind::handleNotificationChannel(), helpStatus(), macReader, Ui_RebindWidget::resetButton, ui, and Ui_RebindWidget::unbindButton\&.
.PP
Referenced by on_applyButton_clicked()\&.
.PP
.nf
725                                            {
726     if (macReader) {
727         bind->handleNotificationChannel(false);
728         delete macReader;
729         macReader = 0;
730         convertMacroBox();
731         ui->applyButton->setEnabled(true);
732         ui->resetButton->setEnabled(true);
733         ui->unbindButton->setEnabled(true);
734         ui->btnStartMacro->setEnabled(true);
735         ui->btnStopMacro->setEnabled(false);
736         helpStatus(3);
737     }
738 }
.fi
.SS "void RebindWidget::on_cancelButton_clicked ()\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 395 of file rebindwidget\&.cpp\&.
.PP
References selection, and setSelection()\&.
.PP
.nf
395                                           {
396     // Re-load selection
397     setSelection(selection);
398 }
.fi
.SS "void RebindWidget::on_dpiBox_currentIndexChanged (intindex)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 518 of file rebindwidget\&.cpp\&.
.PP
References DPI_CUST_IDX, Ui_RebindWidget::dpiBox, Ui_RebindWidget::dpiButton, Ui_RebindWidget::dpiCustLabel, Ui_RebindWidget::dpiCustXBox, Ui_RebindWidget::dpiCustYBox, setBox(), and ui\&.
.PP
.nf
518                                                          {
519     if(index != DPI_CUST_IDX){
520         // Clear custom DPI
521         ui->dpiCustXBox->setEnabled(false);
522         ui->dpiCustYBox->setEnabled(false);
523         ui->dpiCustLabel->setEnabled(false);
524     } else {
525         ui->dpiCustXBox->setEnabled(true);
526         ui->dpiCustYBox->setEnabled(true);
527         ui->dpiCustLabel->setEnabled(true);
528     }
529     if(index == 0)
530         ui->dpiButton->setChecked(false);
531     else {
532         ui->dpiButton->setChecked(true);
533         setBox(ui->dpiBox);
534     }
535 }
.fi
.SS "void RebindWidget::on_dpiButton_clicked (boolchecked)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 674 of file rebindwidget\&.cpp\&.
.PP
References Ui_RebindWidget::dpiBox, and ui\&.
.PP
.nf
674                                                    {
675     if(checked && ui->dpiBox->currentIndex() == 0)
676         ui->dpiBox->setCurrentIndex(1);
677 }
.fi
.SS "void RebindWidget::on_fnBox_currentIndexChanged (intindex)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 464 of file rebindwidget\&.cpp\&.
.PP
References Ui_RebindWidget::fnBox, Ui_RebindWidget::fnButton, setBox(), and ui\&.
.PP
.nf
464                                                         {
465     if(index == 0)
466         ui->fnButton->setChecked(false);
467     else {
468         ui->fnButton->setChecked(true);
469         setBox(ui->fnBox);
470     }
471 }
.fi
.SS "void RebindWidget::on_fnButton_clicked (boolchecked)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 611 of file rebindwidget\&.cpp\&.
.PP
References Ui_RebindWidget::fnBox, and ui\&.
.PP
.nf
611                                                   {
612     if(checked && ui->fnBox->currentIndex() == 0)
613         ui->fnBox->setCurrentIndex(1);
614 }
.fi
.SS "void RebindWidget::on_lightBox_currentIndexChanged (intindex)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 550 of file rebindwidget\&.cpp\&.
.PP
References Ui_RebindWidget::lightBox, Ui_RebindWidget::lightButton, Ui_RebindWidget::lightWrapBox, setBox(), and ui\&.
.PP
.nf
550                                                            {
551     if(index == 0){
552         ui->lightButton->setChecked(false);
553         ui->lightWrapBox->hide();
554     } else {
555         ui->lightWrapBox->show();
556         ui->lightButton->setChecked(true);
557         setBox(ui->lightBox);
558     }
559 }
.fi
.SS "void RebindWidget::on_lightButton_clicked (boolchecked)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 631 of file rebindwidget\&.cpp\&.
.PP
References Ui_RebindWidget::lightBox, and ui\&.
.PP
.nf
631                                                      {
632     if(checked && ui->lightBox->currentIndex() == 0)
633         ui->lightBox->setCurrentIndex(1);
634 }
.fi
.SS "void RebindWidget::on_lockBox_currentIndexChanged (intindex)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 561 of file rebindwidget\&.cpp\&.
.PP
References Ui_RebindWidget::lockBox, Ui_RebindWidget::lockButton, setBox(), and ui\&.
.PP
.nf
561                                                           {
562     if(index == 0)
563         ui->lockButton->setChecked(false);
564     else {
565         ui->lockButton->setChecked(true);
566         setBox(ui->lockBox);
567     }
568 }
.fi
.SS "void RebindWidget::on_lockButton_clicked (boolchecked)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 636 of file rebindwidget\&.cpp\&.
.PP
References Ui_RebindWidget::lockBox, and ui\&.
.PP
.nf
636                                                     {
637     if(checked && ui->lockBox->currentIndex() == 0)
638         ui->lockBox->setCurrentIndex(1);
639 }
.fi
.SS "void RebindWidget::on_mb2Box_currentIndexChanged (intindex)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 500 of file rebindwidget\&.cpp\&.
.PP
References Ui_RebindWidget::mb2Box, Ui_RebindWidget::mb2Button, setBox(), and ui\&.
.PP
.nf
500                                                          {
501     if(index == 0)
502         ui->mb2Button->setChecked(false);
503     else {
504         ui->mb2Button->setChecked(true);
505         setBox(ui->mb2Box);
506     }
507 }
.fi
.SS "void RebindWidget::on_mb2Button_clicked (boolchecked)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 664 of file rebindwidget\&.cpp\&.
.PP
References Ui_RebindWidget::mb2Box, and ui\&.
.PP
.nf
664                                                    {
665     if(checked && ui->mb2Box->currentIndex() == 0)
666         ui->mb2Box->setCurrentIndex(1);
667 }
.fi
.SS "void RebindWidget::on_mbBox_currentIndexChanged (intindex)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 491 of file rebindwidget\&.cpp\&.
.PP
References Ui_RebindWidget::mbBox, Ui_RebindWidget::mbButton, setBox(), and ui\&.
.PP
.nf
491                                                         {
492     if(index == 0)
493         ui->mbButton->setChecked(false);
494     else {
495         ui->mbButton->setChecked(true);
496         setBox(ui->mbBox);
497     }
498 }
.fi
.SS "void RebindWidget::on_mbButton_clicked (boolchecked)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 659 of file rebindwidget\&.cpp\&.
.PP
References Ui_RebindWidget::mbBox, and ui\&.
.PP
.nf
659                                                   {
660     if(checked && ui->mbBox->currentIndex() == 0)
661         ui->mbBox->setCurrentIndex(1);
662 }
.fi
.SS "void RebindWidget::on_mediaBox_currentIndexChanged (intindex)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 482 of file rebindwidget\&.cpp\&.
.PP
References Ui_RebindWidget::mediaBox, Ui_RebindWidget::mediaButton, setBox(), and ui\&.
.PP
.nf
482                                                            {
483     if(index == 0)
484         ui->mediaButton->setChecked(false);
485     else {
486         ui->mediaButton->setChecked(true);
487         setBox(ui->mediaBox);
488     }
489 }
.fi
.SS "void RebindWidget::on_mediaButton_clicked (boolchecked)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 621 of file rebindwidget\&.cpp\&.
.PP
References Ui_RebindWidget::mediaBox, and ui\&.
.PP
.nf
621                                                      {
622     if(checked && ui->mediaBox->currentIndex() == 0)
623         ui->mediaBox->setCurrentIndex(1);
624 }
.fi
.SS "void RebindWidget::on_modBox_currentIndexChanged (intindex)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 455 of file rebindwidget\&.cpp\&.
.PP
References Ui_RebindWidget::modBox, Ui_RebindWidget::modButton, setBox(), and ui\&.
.PP
.nf
455                                                          {
456     if(index == 0)
457         ui->modButton->setChecked(false);
458     else {
459         ui->modButton->setChecked(true);
460         setBox(ui->modBox);
461     }
462 }
.fi
.SS "void RebindWidget::on_modButton_clicked (boolchecked)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 606 of file rebindwidget\&.cpp\&.
.PP
References Ui_RebindWidget::modBox, and ui\&.
.PP
.nf
606                                                    {
607     if(checked && ui->modBox->currentIndex() == 0)
608         ui->modBox->setCurrentIndex(1);
609 }
.fi
.SS "void RebindWidget::on_modeBox_currentIndexChanged (intindex)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 537 of file rebindwidget\&.cpp\&.
.PP
References Ui_RebindWidget::modeBox, Ui_RebindWidget::modeButton, Ui_RebindWidget::modeWrapBox, setBox(), and ui\&.
.PP
.nf
537                                                           {
538     if(index == 1 || index == 2)
539         ui->modeWrapBox->show();
540     else
541         ui->modeWrapBox->hide();
542     if(index == 0)
543         ui->modeButton->setChecked(false);
544     else {
545         ui->modeButton->setChecked(true);
546         setBox(ui->modeBox);
547     }
548 }
.fi
.SS "void RebindWidget::on_modeButton_clicked (boolchecked)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 626 of file rebindwidget\&.cpp\&.
.PP
References Ui_RebindWidget::modeBox, and ui\&.
.PP
.nf
626                                                     {
627     if(checked && ui->modeBox->currentIndex() == 0)
628         ui->modeBox->setCurrentIndex(1);
629 }
.fi
.SS "void RebindWidget::on_numBox_currentIndexChanged (intindex)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 473 of file rebindwidget\&.cpp\&.
.PP
References Ui_RebindWidget::numBox, Ui_RebindWidget::numButton, setBox(), and ui\&.
.PP
.nf
473                                                          {
474     if(index == 0)
475         ui->numButton->setChecked(false);
476     else {
477         ui->numButton->setChecked(true);
478         setBox(ui->numBox);
479     }
480 }
.fi
.SS "void RebindWidget::on_numButton_clicked (boolchecked)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 616 of file rebindwidget\&.cpp\&.
.PP
References Ui_RebindWidget::numBox, and ui\&.
.PP
.nf
616                                                    {
617     if(checked && ui->numBox->currentIndex() == 0)
618         ui->numBox->setCurrentIndex(1);
619 }
.fi
.SS "void RebindWidget::on_programKpBox_textChanged (const QString &arg1)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 570 of file rebindwidget\&.cpp\&.
.PP
References Ui_RebindWidget::programKpBox, Ui_RebindWidget::programKpButton, Ui_RebindWidget::programKpExtra, setBox(), and ui\&.
.PP
.nf
570                                                                  {
571     if(arg1\&.isEmpty()){
572         ui->programKpButton->setChecked(false);
573         ui->programKpExtra->hide();
574     } else {
575         ui->programKpButton->setChecked(true);
576         setBox(ui->programKpBox);
577         ui->programKpExtra->show();
578     }
579 }
.fi
.SS "void RebindWidget::on_programKpButton_clicked (boolchecked)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 641 of file rebindwidget\&.cpp\&.
.PP
References Ui_RebindWidget::programKpBox, setBox(), and ui\&.
.PP
.nf
641                                                          {
642     if(!checked){
643         ui->programKpBox->setText("");
644     } else if(ui->programKpBox->text()\&.isEmpty()){
645         ui->programKpBox->setFocus();
646         setBox(ui->programKpBox);
647     }
648 }
.fi
.SS "void RebindWidget::on_programKpSIBox_clicked (boolchecked)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 679 of file rebindwidget\&.cpp\&.
.PP
References Ui_RebindWidget::programKpModeBox, and ui\&.
.PP
.nf
679                                                         {
680     ui->programKpModeBox->setCurrentIndex(0);
681     ui->programKpModeBox->setEnabled(checked);
682 }
.fi
.SS "void RebindWidget::on_programKrBox_textChanged (const QString &arg1)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 581 of file rebindwidget\&.cpp\&.
.PP
References Ui_RebindWidget::programKrBox, Ui_RebindWidget::programKrButton, Ui_RebindWidget::programKrExtra, setBox(), and ui\&.
.PP
.nf
581                                                                  {
582     if(arg1\&.isEmpty()){
583         ui->programKrButton->setChecked(false);
584         ui->programKrExtra->hide();
585     } else {
586         ui->programKrButton->setChecked(true);
587         setBox(ui->programKrBox);
588         ui->programKrExtra->show();
589     }
590 }
.fi
.SS "void RebindWidget::on_programKrButton_clicked (boolchecked)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 650 of file rebindwidget\&.cpp\&.
.PP
References Ui_RebindWidget::programKrBox, setBox(), and ui\&.
.PP
.nf
650                                                          {
651     if(!checked){
652         ui->programKrBox->setText("");
653     } else if(ui->programKrBox->text()\&.isEmpty()){
654         ui->programKrBox->setFocus();
655         setBox(ui->programKrBox);
656     }
657 }
.fi
.SS "void RebindWidget::on_programKrSIBox_clicked (boolchecked)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 684 of file rebindwidget\&.cpp\&.
.PP
References Ui_RebindWidget::programKrModeBox, and ui\&.
.PP
.nf
684                                                         {
685     ui->programKrModeBox->setCurrentIndex(0);
686     ui->programKrModeBox->setEnabled(checked);
687 }
.fi
.SS "void RebindWidget::on_pteMacroBox_textChanged ()\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 449 of file rebindwidget\&.cpp\&.
.PP
References Ui_RebindWidget::pteMacroBox, setBox(), and ui\&.
.PP
.nf
449                                               {
450     if (ui->pteMacroBox->toPlainText()\&.length() > 0) {
451         setBox(ui->pteMacroBox);
452     }
453 }
.fi
.SS "void RebindWidget::on_resetButton_clicked ()\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 400 of file rebindwidget\&.cpp\&.
.PP
References bind, KbBind::resetAction(), and selection\&.
.PP
.nf
400                                          {
401     bind->resetAction(selection);
402 }
.fi
.SS "void RebindWidget::on_typingBox_currentIndexChanged (intindex)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 440 of file rebindwidget\&.cpp\&.
.PP
References setBox(), Ui_RebindWidget::typingBox, Ui_RebindWidget::typingButton, and ui\&.
.PP
.nf
440                                                             {
441     if(index == 0)
442         ui->typingButton->setChecked(false);
443     else {
444         ui->typingButton->setChecked(true);
445         setBox(ui->typingBox);
446     }
447 }
.fi
.SS "void RebindWidget::on_typingButton_clicked (boolchecked)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 601 of file rebindwidget\&.cpp\&.
.PP
References Ui_RebindWidget::typingBox, and ui\&.
.PP
.nf
601                                                       {
602     if(checked && ui->typingBox->currentIndex() == 0)
603         ui->typingBox->setCurrentIndex(1);
604 }
.fi
.SS "void RebindWidget::on_unbindButton_clicked ()\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 404 of file rebindwidget\&.cpp\&.
.PP
References bind, KbBind::noAction(), and selection\&.
.PP
.nf
404                                           {
405     bind->noAction(selection);
406 }
.fi
.SS "void RebindWidget::on_wheelBox_currentIndexChanged (intindex)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 509 of file rebindwidget\&.cpp\&.
.PP
References setBox(), ui, Ui_RebindWidget::wheelBox, and Ui_RebindWidget::wheelButton\&.
.PP
.nf
509                                                            {
510     if(index == 0)
511         ui->wheelButton->setChecked(false);
512     else {
513         ui->wheelButton->setChecked(true);
514         setBox(ui->wheelBox);
515     }
516 }
.fi
.SS "void RebindWidget::on_wheelButton_clicked (boolchecked)\fC [private]\fP, \fC [slot]\fP"

.PP
Definition at line 669 of file rebindwidget\&.cpp\&.
.PP
References ui, and Ui_RebindWidget::wheelBox\&.
.PP
.nf
669                                                      {
670     if(checked && ui->wheelBox->currentIndex() == 0)
671         ui->wheelBox->setCurrentIndex(1);
672 }
.fi
.SS "void RebindWidget::setBind (\fBKbBind\fP *newBind, \fBKbProfile\fP *newProfile)"

.PP
Definition at line 63 of file rebindwidget\&.cpp\&.
.PP
References bind, KeyMap::byPosition(), KbBind::defaultAction(), KbPerf::dpi(), KbPerf::DPI_COUNT, Ui_RebindWidget::dpiBox, Ui_RebindWidget::dpiButton, Ui_RebindWidget::dpiCustLabel, Ui_RebindWidget::dpiCustXBox, Ui_RebindWidget::dpiCustYBox, Ui_RebindWidget::dpiWarning, fnKeys, Key::friendlyName(), KeyMap::isISO(), KbBind::isMouse(), KeyAction::isNormal(), KeyMap::K95, KeyMap::layout(), KbBind::map(), mediaKeys, Ui_RebindWidget::modeBox, KbProfile::modes(), modKeys, KbMode::name(), numKeys, KbBind::perf(), profile, setSelection(), Ui_RebindWidget::typingBox, typingKeys, and ui\&.
.PP
Referenced by KbBindWidget::newLayout(), and KbBindWidget::setBind()\&.
.PP
.nf
63                                                                 {
64     bind = newBind;
65     profile = newProfile;
66     setSelection(QStringList());
67 
68     // Populate typing keys by position
69     ui->typingBox->clear();
70     ui->typingBox->addItem(" ");
71     typingKeys\&.clear();
72     // Use the K95 map as it has all keys
73     const KeyMap& map = KeyMap(KeyMap::K95, bind->map()\&.layout());
74     foreach(const QString& name, map\&.byPosition()){
75         KeyAction action(KbBind::defaultAction(name));
76         if(action\&.isNormal() && !modKeys\&.contains(name) && !fnKeys\&.contains(name) && !numKeys\&.contains(name) && !mediaKeys\&.contains(name) && name != "enter" && name != "tab" && name != "bspace"){
77             const Key& pos = map[name];
78             QString friendly = pos\&.friendlyName();
79             ui->typingBox->addItem(friendly);
80             typingKeys\&.append(name);
81         }
82     }
83     typingKeys << "enter" << "tab" << "bspace";
84     ui->typingBox->addItem("Enter");
85     ui->typingBox->addItem("Tab");
86     ui->typingBox->addItem("Backspace");
87     if(!map\&.isISO()){
88         // Add ISO backslash (aka KEY_102ND) to ANSI options
89         typingKeys << "bslash_iso";
90         ui->typingBox->addItem("Backslash (ISO layout)");
91     }
92 
93     // Populate mode list
94     ui->modeBox->clear();
95     ui->modeBox->addItem(" ");
96     ui->modeBox->addItem("(Previous)");
97     ui->modeBox->addItem("(Next)");
98     int idx = 1;
99     foreach(KbMode* mode, newProfile->modes())
100         ui->modeBox->addItem(QString("%1: %2")\&.arg(idx++)\&.arg(mode->name()));
101 
102     // Enable/disable DPI based on device
103     if(bind->isMouse()){
104         ui->dpiButton->setEnabled(true);
105         ui->dpiBox->setEnabled(true);
106         ui->dpiWarning->hide();
107         // Fill DPI slots
108         const KbPerf* perf = bind->perf();
109         for(int i = 0; i < KbPerf::DPI_COUNT; i++){
110             bool sniper = (i == 0);
111             int boxIdx = i + 3;
112             QPoint dpi = perf->dpi(i);
113             QString text = tr(sniper ? "Sniper:\t%1 x %2" : "%3:\t%1 x %2")\&.arg(dpi\&.x())\&.arg(dpi\&.y());
114             if(!sniper) text = text\&.arg(i);
115             ui->dpiBox->setItemText(boxIdx, text);
116         }
117     } else {
118         ui->dpiButton->setEnabled(false);
119         ui->dpiBox->setEnabled(false);
120         ui->dpiWarning->show();
121     }
122     // Always disable custom DPI boxes until selected
123     ui->dpiCustXBox->setEnabled(false);
124     ui->dpiCustYBox->setEnabled(false);
125     ui->dpiCustLabel->setEnabled(false);
126 }
.fi
.SS "void RebindWidget::setBox (\fBQWidget\fP *box)\fC [private]\fP"

.PP
Definition at line 408 of file rebindwidget\&.cpp\&.
.PP
References Ui_RebindWidget::animBox, Ui_RebindWidget::dpiBox, Ui_RebindWidget::fnBox, helpStatus(), Ui_RebindWidget::lightBox, Ui_RebindWidget::lockBox, Ui_RebindWidget::mb2Box, Ui_RebindWidget::mbBox, Ui_RebindWidget::mediaBox, Ui_RebindWidget::modBox, Ui_RebindWidget::modeBox, Ui_RebindWidget::numBox, Ui_RebindWidget::programKpBox, Ui_RebindWidget::programKpButton, Ui_RebindWidget::programKrBox, Ui_RebindWidget::programKrButton, Ui_RebindWidget::pteMacroBox, Ui_RebindWidget::typingBox, ui, and Ui_RebindWidget::wheelBox\&.
.PP
Referenced by on_animBox_currentIndexChanged(), on_dpiBox_currentIndexChanged(), on_fnBox_currentIndexChanged(), on_lightBox_currentIndexChanged(), on_lockBox_currentIndexChanged(), on_mb2Box_currentIndexChanged(), on_mbBox_currentIndexChanged(), on_mediaBox_currentIndexChanged(), on_modBox_currentIndexChanged(), on_modeBox_currentIndexChanged(), on_numBox_currentIndexChanged(), on_programKpBox_textChanged(), on_programKpButton_clicked(), on_programKrBox_textChanged(), on_programKrButton_clicked(), on_pteMacroBox_textChanged(), on_typingBox_currentIndexChanged(), on_wheelBox_currentIndexChanged(), and setSelection()\&.
.PP
.nf
408                                      {
409     // Un-select every item except for the current one\&.
410     // on_*_currentIndexChanged will take care of deselecting the checkbox\&.
411     // Key
412     if(box != ui->typingBox) ui->typingBox->setCurrentIndex(0);
413     if(box != ui->modBox) ui->modBox->setCurrentIndex(0);
414     if(box != ui->fnBox) ui->fnBox->setCurrentIndex(0);
415     if(box != ui->numBox) ui->numBox->setCurrentIndex(0);
416     if(box != ui->mediaBox) ui->mediaBox->setCurrentIndex(0);
417     // Mouse
418     if(box != ui->mbBox) ui->mbBox->setCurrentIndex(0);
419     if(box != ui->mb2Box) ui->mb2Box->setCurrentIndex(0);
420     if(box != ui->wheelBox) ui->wheelBox->setCurrentIndex(0);
421     if(box != ui->dpiBox) ui->dpiBox->setCurrentIndex(0);
422     // Anim
423     if(box != ui->animBox) ui->animBox->setCurrentIndex(0);
424     // Special
425     if(box != ui->modeBox) ui->modeBox->setCurrentIndex(0);
426     if(box != ui->lightBox) ui->lightBox->setCurrentIndex(0);
427     if(box != ui->lockBox) ui->lockBox->setCurrentIndex(0);
428     // Program
429     if(box != ui->programKpBox && box != ui->programKrBox){
430         ui->programKpButton->setChecked(false);
431         ui->programKrButton->setChecked(false);
432     }
433     // Clear macro panel
434     if (box != ui->pteMacroBox) {
435         ui->pteMacroBox->setPlainText("");
436         helpStatus(1);
437     }
438 }
.fi
.SS "void RebindWidget::setSelection (const QStringList &newSelection, boolapplyPrevious = \fCfalse\fP)"

.PP
Definition at line 128 of file rebindwidget\&.cpp\&.
.PP
References KbBind::action(), anim, Ui_RebindWidget::animBox, KeyAction::animInfo(), Ui_RebindWidget::animKrBox, KbLight::animList(), Ui_RebindWidget::animOnceBox, applyChanges(), bind, KeyAction::DPI_CUSTOM, DPI_OFFSET, Ui_RebindWidget::dpiBox, Ui_RebindWidget::dpiCustXBox, Ui_RebindWidget::dpiCustYBox, KeyAction::dpiInfo(), KbLight::findAnimIdx(), Ui_RebindWidget::fnBox, fnKeys, KeyAction::isAnim(), KeyAction::isDPI(), KeyAction::isMouse(), KeyAction::isNormal(), KeyAction::isProgram(), KeyAction::isSpecial(), KeyAction::isValidMacro(), KbBind::light(), KeyAction::LIGHT_DOWN, KeyAction::LIGHT_DOWN_WRAP, KeyAction::LIGHT_UP, KeyAction::LIGHT_UP_WRAP, Ui_RebindWidget::lightBox, Ui_RebindWidget::lightWrapBox, Ui_RebindWidget::lockBox, KeyAction::macroContent(), KeyAction::macroDisplay(), KeyAction::macroLine(), Ui_RebindWidget::mb2Box, Ui_RebindWidget::mbBox, Ui_RebindWidget::mediaBox, mediaKeys, Ui_RebindWidget::modBox, KeyAction::MODE_NEXT, KeyAction::MODE_NEXT_WRAP, KeyAction::MODE_PREV, KeyAction::MODE_PREV_WRAP, Ui_RebindWidget::modeBox, Ui_RebindWidget::modeWrapBox, modKeys, mouseExtKeys, mouseKeys, KbAnim::name(), Ui_RebindWidget::numBox, numKeys, KeyAction::PROGRAM_PR_MULTI, KeyAction::PROGRAM_RE_INDEF, KeyAction::PROGRAM_RE_KPSTOP, KeyAction::PROGRAM_RE_MULTI, KeyAction::programInfo(), Ui_RebindWidget::programKpBox, Ui_RebindWidget::programKpModeBox, Ui_RebindWidget::programKpSIBox, Ui_RebindWidget::programKrBox, Ui_RebindWidget::programKrModeBox, Ui_RebindWidget::programKrSIBox, Ui_RebindWidget::pteMacroBox, Ui_RebindWidget::pteMacroComment, Ui_RebindWidget::pteMacroText, selection, setBox(), KeyAction::specialInfo(), TAB_ANIM, TAB_KB, TAB_MACRO, TAB_MOUSE, TAB_PROGRAM, TAB_SPECIAL, Ui_RebindWidget::tabWidget, Ui_RebindWidget::typingBox, typingKeys, ui, Ui_RebindWidget::wheelBox, and wheelKeys\&.
.PP
Referenced by KbBindWidget::newSelection(), on_cancelButton_clicked(), setBind(), and KbBindWidget::updateBind()\&.
.PP
.nf
128                                                                                   {
129     if(bind){
130         // Populate animation list
131         // FIXME: There should be a trigger to update this whenever an animation is added/removed, even if the key selection hasn't changed
132         ui->animBox->clear();
133         ui->animBox->addItem(" ");
134         foreach(KbAnim* anim, bind->light()->animList())
135             ui->animBox->addItem(anim->name());
136     }
137 
138     // Apply changes to previous selection (if any)
139     if(!selection\&.isEmpty() && applyPrevious){
140         QStringList previous = selection;
141         selection = QStringList();
142         applyChanges(previous, false);
143     }
144 
145     selection = newSelection;
146     if(newSelection\&.isEmpty()){
147         hide();
148         return;
149     } else
150         show();
151 
152     bool hasAction = false;
153     QString action;
154     if(selection\&.count() == 1){
155         // Select action from the UI
156         action = bind->action(selection\&.first());
157         if(!action\&.isEmpty())
158             hasAction = true;
159     } else {
160         // Select an action from the UI if all keys are the same\&.
161         // Select nothing if any are unbound or different
162         foreach(const QString& key, selection){
163             QString keyAction = bind->action(key);
164             if(keyAction\&.isEmpty() || (hasAction && keyAction != action)){
165                 hasAction = false;
166                 break;
167             } else if(action\&.isEmpty()){
168                 action = keyAction;
169                 hasAction = true;
170             }
171         }
172     }
173 
174     if(!hasAction)
175         action = "";
176     KeyAction act(action);
177     // Clear everything
178     setBox(0);
179     ui->dpiCustXBox->setValue(400);
180     ui->dpiCustYBox->setValue(400);
181     ui->animOnceBox->setChecked(false);
182     ui->animKrBox->setChecked(false);
183     ui->programKpBox->setText("");
184     ui->programKrBox->setText("");
185     ui->programKpSIBox->setChecked(false);
186     ui->programKrSIBox->setChecked(false);
187     ui->programKpModeBox->setCurrentIndex(0);
188     ui->programKrModeBox->setCurrentIndex(0);
189     ui->programKpModeBox->setEnabled(false);
190     ui->programKrModeBox->setEnabled(false);
191     // Clear neu UI elements in MacroTab
192     ui->pteMacroBox->setPlainText("");
193     ui->pteMacroText->setPlainText("");
194     ui->pteMacroComment->setPlainText("");
195     // Fill in field and select tab according to action type
196     bool mouse = act\&.isMouse();
197     if(mouse){
198         // Mouse buttons
199         ui->tabWidget->setCurrentIndex(TAB_MOUSE);
200         // Set mouse buttons (indexOf returns -1 if not found, index zero is blank)
201         ui->mbBox->setCurrentIndex(mouseKeys\&.indexOf(action) + 1);
202         ui->mb2Box->setCurrentIndex(mouseExtKeys\&.indexOf(action) + 1);
203         ui->wheelBox->setCurrentIndex(wheelKeys\&.indexOf(action) + 1);
204         if(act\&.isDPI()){
205             QPoint custom;
206             int value = act\&.dpiInfo(custom);
207             if(value <= -DPI_OFFSET || value > KeyAction::DPI_CUSTOM)
208                 return;
209             ui->dpiBox->setCurrentIndex(value + DPI_OFFSET);
210             if(value == KeyAction::DPI_CUSTOM){
211                 ui->dpiCustXBox->setValue(custom\&.x());
212                 ui->dpiCustYBox->setValue(custom\&.y());
213             }
214         }
215     } else if(act\&.isNormal()){
216         // Standard key
217         ui->tabWidget->setCurrentIndex(TAB_KB);
218         ui->typingBox->setCurrentIndex(typingKeys\&.indexOf(action) + 1);
219         ui->modBox->setCurrentIndex(modKeys\&.indexOf(action) + 1);
220         ui->fnBox->setCurrentIndex(fnKeys\&.indexOf(action) + 1);
221         ui->numBox->setCurrentIndex(numKeys\&.indexOf(action) + 1);
222         ui->mediaBox->setCurrentIndex(mediaKeys\&.indexOf(action) + 1);
223     } else if(act\&.isProgram()){
224         // Program key
225         ui->tabWidget->setCurrentIndex(TAB_PROGRAM);
226         QString onPress, onRelease;
227         int stop = act\&.programInfo(onPress, onRelease);
228         ui->programKpBox->setText(onPress);
229         ui->programKrBox->setText(onRelease);
230         switch(stop & 0x0F){
231         case KeyAction::PROGRAM_PR_MULTI:
232             ui->programKpSIBox->setChecked(false);
233             ui->programKpModeBox->setCurrentIndex(0);
234             ui->programKpModeBox->setEnabled(false);
235             break;
236         default:
237             ui->programKpSIBox->setChecked(true);
238             ui->programKpModeBox->setCurrentIndex(stop & 0x0F);
239             ui->programKpModeBox->setEnabled(true);
240             break;
241         }
242         switch(stop & 0xF0){
243         case KeyAction::PROGRAM_RE_MULTI:
244             ui->programKrSIBox->setChecked(false);
245             ui->programKrModeBox->setCurrentIndex(0);
246             ui->programKrModeBox->setEnabled(false);
247             break;
248         case KeyAction::PROGRAM_RE_INDEF:
249             ui->programKrSIBox->setChecked(true);
250             ui->programKrModeBox->setCurrentIndex(0);
251             ui->programKrModeBox->setEnabled(true);
252             break;
253         case KeyAction::PROGRAM_RE_KPSTOP:
254             ui->programKrSIBox->setChecked(true);
255             ui->programKrModeBox->setCurrentIndex(1);
256             ui->programKrModeBox->setEnabled(true);
257             break;
258         }
259     } else if(act\&.isAnim()){
260         // Animation key
261         ui->tabWidget->setCurrentIndex(TAB_ANIM);
262         bool onlyOnce = false, stopOnRelease = false;
263         QUuid id = act\&.animInfo(onlyOnce, stopOnRelease);
264         // Find this animation in the list\&. If not found, -1 will be returned, resulting in the blank space being selected
265         int index = bind->light()->findAnimIdx(id);
266         ui->animBox->setCurrentIndex(index + 1);
267         ui->animOnceBox->setChecked(!onlyOnce);
268         ui->animKrBox->setChecked(stopOnRelease);
269     } else if(act\&.isSpecial()){
270         // Other special keys
271         ui->tabWidget->setCurrentIndex(TAB_SPECIAL);
272         int param;
273         QString sAction = act\&.specialInfo(param);
274         // Mode selection\&. Check wrap-around flag
275         ui->modeWrapBox->setChecked(true);
276         if(sAction == "mode"){
277             ui->modeWrapBox->setChecked(true);
278             if(param == KeyAction::MODE_PREV_WRAP)
279                 param = KeyAction::MODE_PREV;
280             else if(param == KeyAction::MODE_NEXT_WRAP)
281                 param = KeyAction::MODE_NEXT;
282             else if(param < 0)
283                 ui->modeWrapBox->setChecked(false);
284             // Set mode box to current selection, or to mode 1 if invalid
285             param += 3;
286             if(param >= 0 && param < ui->modeBox->count())
287                 ui->modeBox->setCurrentIndex(param);
288             else
289                 // 0 -> "", 1 -> Prev, 2 -> Next, 3 -> Mode 1
290                 ui->modeBox->setCurrentIndex(3);
291         } else if (sAction == "macro") {
292             ui->tabWidget->setCurrentIndex(TAB_MACRO);
293             if (act\&.isValidMacro()) {
294                 ui->pteMacroBox->setPlainText(act\&.macroContent());
295                 ui->pteMacroText->setPlainText(act\&.macroLine()[1]\&.replace("&das_IST_31N_col0n;", ":"));
296                 ui->pteMacroComment->setPlainText(act\&.macroLine()[2]\&.replace("&das_IST_31N_col0n;", ":"));
297             } else {
298                 qDebug("RebindWidget::setSelection found invalid macro definition\&.");
299                 act\&.macroDisplay();
300             }
301         } else
302             ui->modeBox->setCurrentIndex(0);
303         // Brightness control\&. Also check wrap
304         if(sAction == "light"){
305             ui->lightWrapBox->setChecked(true);
306             if(param == KeyAction::LIGHT_DOWN_WRAP)
307                 param = KeyAction::LIGHT_DOWN;
308             else if(param == KeyAction::LIGHT_UP_WRAP)
309                 param = KeyAction::LIGHT_UP;
310             else
311                 ui->lightWrapBox->setChecked(false);
312             if(param < 0 || param > 1)
313                 param = -1;
314             ui->lightBox->setCurrentIndex(param + 1);
315         } else
316             ui->lightBox->setCurrentIndex(0);
317         // Win lock
318         if(sAction == "lock"){
319             if(param < 0 || param > 2)
320                 param = -1;
321             ui->lockBox->setCurrentIndex(param + 1);
322         } else
323             ui->lockBox->setCurrentIndex(0);
324     }
325 }
.fi
.SH "Field Documentation"
.PP 
.SS "\fBKbBind\fP* RebindWidget::bind\fC [private]\fP"

.PP
Definition at line 86 of file rebindwidget\&.h\&.
.PP
Referenced by applyChanges(), on_btnStartMacro_clicked(), on_btnStopMacro_clicked(), on_resetButton_clicked(), on_unbindButton_clicked(), setBind(), and setSelection()\&.
.SS "QStringList RebindWidget::fnKeys\fC [private]\fP"

.PP
Definition at line 92 of file rebindwidget\&.h\&.
.PP
Referenced by applyChanges(), RebindWidget(), setBind(), and setSelection()\&.
.SS "\fBMacroReader\fP* RebindWidget::macReader\fC [private]\fP"

.PP
Definition at line 98 of file rebindwidget\&.h\&.
.PP
Referenced by on_btnStartMacro_clicked(), and on_btnStopMacro_clicked()\&.
.SS "QStringList RebindWidget::mediaKeys\fC [private]\fP"

.PP
Definition at line 94 of file rebindwidget\&.h\&.
.PP
Referenced by applyChanges(), RebindWidget(), setBind(), and setSelection()\&.
.SS "QStringList RebindWidget::modKeys\fC [private]\fP"

.PP
Definition at line 91 of file rebindwidget\&.h\&.
.PP
Referenced by applyChanges(), RebindWidget(), setBind(), and setSelection()\&.
.SS "QStringList RebindWidget::mouseExtKeys\fC [private]\fP"

.PP
Definition at line 96 of file rebindwidget\&.h\&.
.PP
Referenced by applyChanges(), RebindWidget(), and setSelection()\&.
.SS "QStringList RebindWidget::mouseKeys\fC [private]\fP"

.PP
Definition at line 95 of file rebindwidget\&.h\&.
.PP
Referenced by applyChanges(), RebindWidget(), and setSelection()\&.
.SS "QStringList RebindWidget::numKeys\fC [private]\fP"

.PP
Definition at line 93 of file rebindwidget\&.h\&.
.PP
Referenced by applyChanges(), RebindWidget(), setBind(), and setSelection()\&.
.SS "\fBKbProfile\fP* RebindWidget::profile\fC [private]\fP"

.PP
Definition at line 87 of file rebindwidget\&.h\&.
.PP
Referenced by setBind()\&.
.SS "QStringList RebindWidget::selection\fC [private]\fP"

.PP
Definition at line 88 of file rebindwidget\&.h\&.
.PP
Referenced by on_applyButton_clicked(), on_cancelButton_clicked(), on_resetButton_clicked(), on_unbindButton_clicked(), and setSelection()\&.
.SS "const int RebindWidget::TAB_ANIM = 2\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 77 of file rebindwidget\&.h\&.
.PP
Referenced by setSelection()\&.
.SS "const int RebindWidget::TAB_KB = 0\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 77 of file rebindwidget\&.h\&.
.PP
Referenced by setSelection()\&.
.SS "const int RebindWidget::TAB_MACRO = 5\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 77 of file rebindwidget\&.h\&.
.PP
Referenced by setSelection()\&.
.SS "const int RebindWidget::TAB_MOUSE = 1\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 77 of file rebindwidget\&.h\&.
.PP
Referenced by setSelection()\&.
.SS "const int RebindWidget::TAB_PROGRAM = 4\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 77 of file rebindwidget\&.h\&.
.PP
Referenced by setSelection()\&.
.SS "const int RebindWidget::TAB_SPECIAL = 3\fC [static]\fP, \fC [private]\fP"

.PP
Definition at line 77 of file rebindwidget\&.h\&.
.PP
Referenced by setSelection()\&.
.SS "QStringList RebindWidget::typingKeys\fC [private]\fP"

.PP
Definition at line 90 of file rebindwidget\&.h\&.
.PP
Referenced by applyChanges(), setBind(), and setSelection()\&.
.SS "\fBUi::RebindWidget\fP* RebindWidget::ui\fC [private]\fP"

.PP
Definition at line 74 of file rebindwidget\&.h\&.
.PP
Referenced by applyChanges(), convertMacroBox(), helpStatus(), on_animBox_currentIndexChanged(), on_animButton_clicked(), on_btnStartMacro_clicked(), on_btnStopMacro_clicked(), on_dpiBox_currentIndexChanged(), on_dpiButton_clicked(), on_fnBox_currentIndexChanged(), on_fnButton_clicked(), on_lightBox_currentIndexChanged(), on_lightButton_clicked(), on_lockBox_currentIndexChanged(), on_lockButton_clicked(), on_mb2Box_currentIndexChanged(), on_mb2Button_clicked(), on_mbBox_currentIndexChanged(), on_mbButton_clicked(), on_mediaBox_currentIndexChanged(), on_mediaButton_clicked(), on_modBox_currentIndexChanged(), on_modButton_clicked(), on_modeBox_currentIndexChanged(), on_modeButton_clicked(), on_numBox_currentIndexChanged(), on_numButton_clicked(), on_programKpBox_textChanged(), on_programKpButton_clicked(), on_programKpSIBox_clicked(), on_programKrBox_textChanged(), on_programKrButton_clicked(), on_programKrSIBox_clicked(), on_pteMacroBox_textChanged(), on_typingBox_currentIndexChanged(), on_typingButton_clicked(), on_wheelBox_currentIndexChanged(), on_wheelButton_clicked(), RebindWidget(), setBind(), setBox(), setSelection(), and ~RebindWidget()\&.
.SS "QStringList RebindWidget::wheelKeys\fC [private]\fP"

.PP
Definition at line 97 of file rebindwidget\&.h\&.
.PP
Referenced by applyChanges(), RebindWidget(), and setSelection()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for ckb-next from the source code\&.
