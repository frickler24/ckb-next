.TH "src/ckb-daemon/devnode.h" 3 "Wed May 24 2017" "Version v0.2.8 at branch master" "ckb-next" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/ckb-daemon/devnode.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'includes\&.h'\fP
.br
\fC#include 'usb\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBS_READDIR\fP   (S_IRWXU | S_IRGRP | S_IROTH | S_IXGRP | S_IXOTH)"
.br
.ti -1c
.RI "#define \fBS_READ\fP   (S_IRUSR | S_IRGRP | S_IROTH | S_IWUSR)"
.br
.ti -1c
.RI "#define \fBS_READWRITE\fP   (S_IRUSR | S_IRGRP | S_IROTH | S_IWUSR | S_IWGRP | S_IWOTH)"
.br
.ti -1c
.RI "#define \fBS_CUSTOM\fP   (S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP)"
.br
.ti -1c
.RI "#define \fBS_CUSTOM_R\fP   (S_IRUSR | S_IWUSR | S_IRGRP)"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fB_readlines_ctx\fP * \fBreadlines_ctx\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBupdateconnected\fP ()"
.br
.ti -1c
.RI "int \fBmkdevpath\fP (\fBusbdevice\fP *kb)"
.br
.ti -1c
.RI "int \fBrmdevpath\fP (\fBusbdevice\fP *kb)"
.br
.ti -1c
.RI "int \fBmknotifynode\fP (\fBusbdevice\fP *kb, int notify)"
.br
.ti -1c
.RI "int \fBrmnotifynode\fP (\fBusbdevice\fP *kb, int notify)"
.br
.ti -1c
.RI "int \fBmkfwnode\fP (\fBusbdevice\fP *kb)"
.br
.ti -1c
.RI "void \fBreadlines_ctx_init\fP (\fBreadlines_ctx\fP *ctx)"
.br
.ti -1c
.RI "void \fBreadlines_ctx_free\fP (\fBreadlines_ctx\fP ctx)"
.br
.ti -1c
.RI "unsigned \fBreadlines\fP (int fd, \fBreadlines_ctx\fP ctx, const char **input)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "const char *const \fBdevpath\fP"
.br
.ti -1c
.RI "long \fBgid\fP"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define S_CUSTOM   (S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP)"

.PP
Definition at line 17 of file devnode\&.h\&.
.PP
Referenced by _mkdevpath()\&.
.SS "#define S_CUSTOM_R   (S_IRUSR | S_IWUSR | S_IRGRP)"

.PP
Definition at line 18 of file devnode\&.h\&.
.SS "#define S_READ   (S_IRUSR | S_IRGRP | S_IROTH | S_IWUSR)"

.PP
Definition at line 15 of file devnode\&.h\&.
.PP
Referenced by _mkdevpath()\&.
.SS "#define S_READDIR   (S_IRWXU | S_IRGRP | S_IROTH | S_IXGRP | S_IXOTH)"

.PP
Definition at line 14 of file devnode\&.h\&.
.PP
Referenced by _mkdevpath()\&.
.SS "#define S_READWRITE   (S_IRUSR | S_IRGRP | S_IROTH | S_IWUSR | S_IWGRP | S_IWOTH)"

.PP
Definition at line 16 of file devnode\&.h\&.
.PP
Referenced by _mkdevpath()\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fB_readlines_ctx\fP* \fBreadlines_ctx\fP"

.PP
Definition at line 36 of file devnode\&.h\&.
.SH "Function Documentation"
.PP 
.SS "int mkdevpath (\fBusbdevice\fP *kb)"

.PP
Definition at line 251 of file devnode\&.c\&.
.PP
References _mkdevpath(), euid_guard_start, and euid_guard_stop\&.
.PP
Referenced by _setupusb(), and main()\&.
.PP
.nf
251                             {
252     euid_guard_start;
253     int res = _mkdevpath(kb);
254     euid_guard_stop;
255     return res;
256 }
.fi
.SS "int mkfwnode (\fBusbdevice\fP *kb)"

.PP
Definition at line 282 of file devnode\&.c\&.
.PP
References ckb_warn, devpath, usbdevice::fwversion, gid, INDEX_OF, keyboard, usbdevice::pollrate, and S_GID_READ\&.
.PP
Referenced by _mkdevpath(), and fwupdate()\&.
.PP
.nf
282                            {
283     int index = INDEX_OF(kb, keyboard);
284     char fwpath[strlen(devpath) + 12];
285     snprintf(fwpath, sizeof(fwpath), "%s%d/fwversion", devpath, index);
286     FILE* fwfile = fopen(fwpath, "w");
287     if(fwfile){
288         fprintf(fwfile, "%04x", kb->fwversion);
289         fputc('\n', fwfile);
290         fclose(fwfile);
291         chmod(fwpath, S_GID_READ);
292         if(gid >= 0)
293             chown(fwpath, 0, gid);
294     } else {
295         ckb_warn("Unable to create %s: %s\n", fwpath, strerror(errno));
296         remove(fwpath);
297         return -1;
298     }
299     char ppath[strlen(devpath) + 11];
300     snprintf(ppath, sizeof(ppath), "%s%d/pollrate", devpath, index);
301     FILE* pfile = fopen(ppath, "w");
302     if(pfile){
303         fprintf(pfile, "%d ms", kb->pollrate);
304         fputc('\n', pfile);
305         fclose(pfile);
306         chmod(ppath, S_GID_READ);
307         if(gid >= 0)
308             chown(ppath, 0, gid);
309     } else {
310         ckb_warn("Unable to create %s: %s\n", fwpath, strerror(errno));
311         remove(ppath);
312         return -2;
313     }
314     return 0;
315 }
.fi
.SS "int mknotifynode (\fBusbdevice\fP *kb, intnotify)"

.PP
Definition at line 91 of file devnode\&.c\&.
.PP
References _mknotifynode(), euid_guard_start, and euid_guard_stop\&.
.PP
Referenced by readcmd()\&.
.PP
.nf
91                                            {
92     euid_guard_start;
93     int res = _mknotifynode(kb, notify);
94     euid_guard_stop;
95     return res;
96 }
.fi
.SS "unsigned readlines (intfd, \fBreadlines_ctx\fPctx, const char **input)"

.PP
Definition at line 336 of file devnode\&.c\&.
.PP
References _readlines_ctx::buffer, _readlines_ctx::buffersize, ckb_warn, _readlines_ctx::leftover, _readlines_ctx::leftoverlen, and MAX_BUFFER\&.
.PP
Referenced by devmain()\&.
.PP
.nf
336                                                                  {
337     // Move any data left over from a previous read to the start of the buffer
338     char* buffer = ctx->buffer;
339     int buffersize = ctx->buffersize;
340     int leftover = ctx->leftover, leftoverlen = ctx->leftoverlen;
341     memcpy(buffer, buffer + leftover, leftoverlen);
342     // Read data from the file
343     ssize_t length = read(fd, buffer + leftoverlen, buffersize - leftoverlen);
344     length = (length < 0 ? 0 : length) + leftoverlen;
345     leftover = ctx->leftover = leftoverlen = ctx->leftoverlen = 0;
346     if(length <= 0){
347         *input = 0;
348         return 0;
349     }
350     // Continue buffering until all available input is read or there's no room left
351     while(length == buffersize){
352         if(buffersize == MAX_BUFFER)
353             break;
354         int oldsize = buffersize;
355         buffersize += 4096;
356         ctx->buffersize = buffersize;
357         buffer = ctx->buffer = realloc(buffer, buffersize + 1);
358         ssize_t length2 = read(fd, buffer + oldsize, buffersize - oldsize);
359         if(length2 <= 0)
360             break;
361         length += length2;
362     }
363     buffer[length] = 0;
364     // Input should be issued one line at a time and should end with a newline\&.
365     char* lastline = memrchr(buffer, '\n', length);
366     if(lastline == buffer + length - 1){
367         // If the buffer ends in a newline, process the whole string
368         *input = buffer;
369         return length;
370     } else if(lastline){
371         // Otherwise, chop off the last line but process everything else
372         *lastline = 0;
373         leftover = ctx->leftover = lastline + 1 - buffer;
374         leftoverlen = ctx->leftoverlen = length - leftover;
375         *input = buffer;
376         return leftover - 1;
377     } else {
378         // If a newline wasn't found at all, process the whole buffer next time
379         *input = 0;
380         if(length == MAX_BUFFER){
381             // Unless the buffer is completely full, in which case discard it
382             ckb_warn("Too much input (1MB)\&. Dropping\&.\n");
383             return 0;
384         }
385         leftoverlen = ctx->leftoverlen = length;
386         return 0;
387     }
388 }
.fi
.SS "void readlines_ctx_free (\fBreadlines_ctx\fPctx)"

.PP
Definition at line 331 of file devnode\&.c\&.
.PP
References _readlines_ctx::buffer\&.
.PP
Referenced by devmain()\&.
.PP
.nf
331                                           {
332     free(ctx->buffer);
333     free(ctx);
334 }
.fi
.SS "void readlines_ctx_init (\fBreadlines_ctx\fP *ctx)"

.PP
Definition at line 324 of file devnode\&.c\&.
.PP
Referenced by devmain()\&.
.PP
.nf
324                                            {
325     // Allocate buffers to store data
326     *ctx = calloc(1, sizeof(struct _readlines_ctx));
327     int buffersize = (*ctx)->buffersize = 4095;
328     (*ctx)->buffer = malloc(buffersize + 1);
329 }
.fi
.SS "int rmdevpath (\fBusbdevice\fP *kb)"

.PP
Definition at line 258 of file devnode\&.c\&.
.PP
References _rmnotifynode(), ckb_info, ckb_warn, devpath, euid_guard_start, euid_guard_stop, INDEX_OF, usbdevice::infifo, keyboard, OUTFIFO_MAX, and rm_recursive()\&.
.PP
Referenced by closeusb(), and quitWithLock()\&.
.PP
.nf
258                             {
259     euid_guard_start;
260     int index = INDEX_OF(kb, keyboard);
261     if(kb->infifo != 0){
262 #ifdef OS_LINUX
263         write(kb->infifo - 1, "\n", 1); // hack to prevent the FIFO thread from perma-blocking
264 #endif
265         close(kb->infifo - 1);
266         kb->infifo = 0;
267     }
268     for(int i = 0; i < OUTFIFO_MAX; i++)
269         _rmnotifynode(kb, i);
270     char path[strlen(devpath) + 2];
271     snprintf(path, sizeof(path), "%s%d", devpath, index);
272     if(rm_recursive(path) != 0 && errno != ENOENT){
273         ckb_warn("Unable to delete %s: %s\n", path, strerror(errno));
274         euid_guard_stop;
275         return -1;
276     }
277     ckb_info("Removed device path %s\n", path);
278     euid_guard_stop;
279     return 0;
280 }
.fi
.SS "int rmnotifynode (\fBusbdevice\fP *kb, intnotify)"

.PP
Definition at line 112 of file devnode\&.c\&.
.PP
References _rmnotifynode(), euid_guard_start, and euid_guard_stop\&.
.PP
Referenced by readcmd()\&.
.PP
.nf
112                                            {
113     euid_guard_start;
114     int res = _rmnotifynode(kb, notify);
115     euid_guard_stop;
116     return res;
117 }
.fi
.SS "void updateconnected ()"

.PP
Definition at line 64 of file devnode\&.c\&.
.PP
References _updateconnected(), euid_guard_start, and euid_guard_stop\&.
.PP
Referenced by _setupusb(), and closeusb()\&.
.PP
.nf
64                       {
65     euid_guard_start;
66     _updateconnected();
67     euid_guard_stop;
68 }
.fi
.SH "Variable Documentation"
.PP 
.SS "const char* const devpath"

.PP
Definition at line 8 of file devnode\&.h\&.
.SS "long gid"

.PP
Definition at line 16 of file devnode\&.c\&.
.PP
Referenced by _mkdevpath(), _mknotifynode(), _updateconnected(), main(), and mkfwnode()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for ckb-next from the source code\&.
